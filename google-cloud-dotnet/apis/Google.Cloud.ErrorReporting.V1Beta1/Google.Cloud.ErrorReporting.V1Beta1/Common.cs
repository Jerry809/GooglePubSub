// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/clouderrorreporting/v1beta1/common.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.ErrorReporting.V1Beta1 {

  /// <summary>Holder for reflection information generated from google/devtools/clouderrorreporting/v1beta1/common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/clouderrorreporting/v1beta1/common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjhnb29nbGUvZGV2dG9vbHMvY2xvdWRlcnJvcnJlcG9ydGluZy92MWJldGEx",
            "L2NvbW1vbi5wcm90bxIrZ29vZ2xlLmRldnRvb2xzLmNsb3VkZXJyb3JyZXBv",
            "cnRpbmcudjFiZXRhMRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxoj",
            "Z29vZ2xlL2FwaS9tb25pdG9yZWRfcmVzb3VyY2UucHJvdG8aH2dvb2dsZS9w",
            "cm90b2J1Zi90aW1lc3RhbXAucHJvdG8igQEKCkVycm9yR3JvdXASDAoEbmFt",
            "ZRgBIAEoCRIQCghncm91cF9pZBgCIAEoCRJTCg90cmFja2luZ19pc3N1ZXMY",
            "AyADKAsyOi5nb29nbGUuZGV2dG9vbHMuY2xvdWRlcnJvcnJlcG9ydGluZy52",
            "MWJldGExLlRyYWNraW5nSXNzdWUiHAoNVHJhY2tpbmdJc3N1ZRILCgN1cmwY",
            "ASABKAki7wEKCkVycm9yRXZlbnQSLgoKZXZlbnRfdGltZRgBIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASVAoPc2VydmljZV9jb250ZXh0GAIg",
            "ASgLMjsuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZXJyb3JyZXBvcnRpbmcudjFi",
            "ZXRhMS5TZXJ2aWNlQ29udGV4dBIPCgdtZXNzYWdlGAMgASgJEkoKB2NvbnRl",
            "eHQYBSABKAsyOS5nb29nbGUuZGV2dG9vbHMuY2xvdWRlcnJvcnJlcG9ydGlu",
            "Zy52MWJldGExLkVycm9yQ29udGV4dCJJCg5TZXJ2aWNlQ29udGV4dBIPCgdz",
            "ZXJ2aWNlGAIgASgJEg8KB3ZlcnNpb24YAyABKAkSFQoNcmVzb3VyY2VfdHlw",
            "ZRgEIAEoCSLJAQoMRXJyb3JDb250ZXh0ElUKDGh0dHBfcmVxdWVzdBgBIAEo",
            "CzI/Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGVycm9ycmVwb3J0aW5nLnYxYmV0",
            "YTEuSHR0cFJlcXVlc3RDb250ZXh0EgwKBHVzZXIYAiABKAkSVAoPcmVwb3J0",
            "X2xvY2F0aW9uGAMgASgLMjsuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZXJyb3Jy",
            "ZXBvcnRpbmcudjFiZXRhMS5Tb3VyY2VMb2NhdGlvbiKIAQoSSHR0cFJlcXVl",
            "c3RDb250ZXh0Eg4KBm1ldGhvZBgBIAEoCRILCgN1cmwYAiABKAkSEgoKdXNl",
            "cl9hZ2VudBgDIAEoCRIQCghyZWZlcnJlchgEIAEoCRIcChRyZXNwb25zZV9z",
            "dGF0dXNfY29kZRgFIAEoBRIRCglyZW1vdGVfaXAYBiABKAkiTwoOU291cmNl",
            "TG9jYXRpb24SEQoJZmlsZV9wYXRoGAEgASgJEhMKC2xpbmVfbnVtYmVyGAIg",
            "ASgFEhUKDWZ1bmN0aW9uX25hbWUYBCABKAlCxgEKL2NvbS5nb29nbGUuZGV2",
            "dG9vbHMuY2xvdWRlcnJvcnJlcG9ydGluZy52MWJldGExQgtDb21tb25Qcm90",
            "b1ABWl5nb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Rl",
            "dnRvb2xzL2Nsb3VkZXJyb3JyZXBvcnRpbmcvdjFiZXRhMTtjbG91ZGVycm9y",
            "cmVwb3J0aW5nqgIjR29vZ2xlLkNsb3VkLkVycm9yUmVwb3J0aW5nLlYxQmV0",
            "YTFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.MonitoredResourceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.ErrorReporting.V1Beta1.ErrorGroup), global::Google.Cloud.ErrorReporting.V1Beta1.ErrorGroup.Parser, new[]{ "Name", "GroupId", "TrackingIssues" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.ErrorReporting.V1Beta1.TrackingIssue), global::Google.Cloud.ErrorReporting.V1Beta1.TrackingIssue.Parser, new[]{ "Url" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.ErrorReporting.V1Beta1.ErrorEvent), global::Google.Cloud.ErrorReporting.V1Beta1.ErrorEvent.Parser, new[]{ "EventTime", "ServiceContext", "Message", "Context" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.ErrorReporting.V1Beta1.ServiceContext), global::Google.Cloud.ErrorReporting.V1Beta1.ServiceContext.Parser, new[]{ "Service", "Version", "ResourceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.ErrorReporting.V1Beta1.ErrorContext), global::Google.Cloud.ErrorReporting.V1Beta1.ErrorContext.Parser, new[]{ "HttpRequest", "User", "ReportLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.ErrorReporting.V1Beta1.HttpRequestContext), global::Google.Cloud.ErrorReporting.V1Beta1.HttpRequestContext.Parser, new[]{ "Method", "Url", "UserAgent", "Referrer", "ResponseStatusCode", "RemoteIp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.ErrorReporting.V1Beta1.SourceLocation), global::Google.Cloud.ErrorReporting.V1Beta1.SourceLocation.Parser, new[]{ "FilePath", "LineNumber", "FunctionName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Description of a group of similar error events.
  /// </summary>
  public sealed partial class ErrorGroup : pb::IMessage<ErrorGroup> {
    private static readonly pb::MessageParser<ErrorGroup> _parser = new pb::MessageParser<ErrorGroup>(() => new ErrorGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.ErrorReporting.V1Beta1.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorGroup(ErrorGroup other) : this() {
      name_ = other.name_;
      groupId_ = other.groupId_;
      trackingIssues_ = other.trackingIssues_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorGroup Clone() {
      return new ErrorGroup(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The group resource name.
    /// Example: &lt;code>projects/my-project-123/groups/my-groupid&lt;/code>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private string groupId_ = "";
    /// <summary>
    /// Group IDs are unique for a given project. If the same kind of error
    /// occurs in different service contexts, it will receive the same group ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tracking_issues" field.</summary>
    public const int TrackingIssuesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.ErrorReporting.V1Beta1.TrackingIssue> _repeated_trackingIssues_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.ErrorReporting.V1Beta1.TrackingIssue.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.ErrorReporting.V1Beta1.TrackingIssue> trackingIssues_ = new pbc::RepeatedField<global::Google.Cloud.ErrorReporting.V1Beta1.TrackingIssue>();
    /// <summary>
    /// Associated tracking issues.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.ErrorReporting.V1Beta1.TrackingIssue> TrackingIssues {
      get { return trackingIssues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (GroupId != other.GroupId) return false;
      if(!trackingIssues_.Equals(other.trackingIssues_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      hash ^= trackingIssues_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GroupId);
      }
      trackingIssues_.WriteTo(output, _repeated_trackingIssues_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      size += trackingIssues_.CalculateSize(_repeated_trackingIssues_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorGroup other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      trackingIssues_.Add(other.trackingIssues_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            GroupId = input.ReadString();
            break;
          }
          case 26: {
            trackingIssues_.AddEntriesFrom(input, _repeated_trackingIssues_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Information related to tracking the progress on resolving the error.
  /// </summary>
  public sealed partial class TrackingIssue : pb::IMessage<TrackingIssue> {
    private static readonly pb::MessageParser<TrackingIssue> _parser = new pb::MessageParser<TrackingIssue>(() => new TrackingIssue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackingIssue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.ErrorReporting.V1Beta1.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackingIssue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackingIssue(TrackingIssue other) : this() {
      url_ = other.url_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackingIssue Clone() {
      return new TrackingIssue(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    /// <summary>
    /// A URL pointing to a related entry in an issue tracking system.
    /// Example: https://github.com/user/project/issues/4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackingIssue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackingIssue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackingIssue other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An error event which is returned by the Error Reporting system.
  /// </summary>
  public sealed partial class ErrorEvent : pb::IMessage<ErrorEvent> {
    private static readonly pb::MessageParser<ErrorEvent> _parser = new pb::MessageParser<ErrorEvent>(() => new ErrorEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.ErrorReporting.V1Beta1.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorEvent(ErrorEvent other) : this() {
      EventTime = other.eventTime_ != null ? other.EventTime.Clone() : null;
      ServiceContext = other.serviceContext_ != null ? other.ServiceContext.Clone() : null;
      message_ = other.message_;
      Context = other.context_ != null ? other.Context.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorEvent Clone() {
      return new ErrorEvent(this);
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp eventTime_;
    /// <summary>
    /// Time when the event occurred as provided in the error report.
    /// If the report did not contain a timestamp, the time the error was received
    /// by the Error Reporting system is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = value;
      }
    }

    /// <summary>Field number for the "service_context" field.</summary>
    public const int ServiceContextFieldNumber = 2;
    private global::Google.Cloud.ErrorReporting.V1Beta1.ServiceContext serviceContext_;
    /// <summary>
    /// The `ServiceContext` for which this error was reported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.ErrorReporting.V1Beta1.ServiceContext ServiceContext {
      get { return serviceContext_; }
      set {
        serviceContext_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// The stack trace that was reported or logged by the service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 5;
    private global::Google.Cloud.ErrorReporting.V1Beta1.ErrorContext context_;
    /// <summary>
    /// Data about the context in which the error occurred.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.ErrorReporting.V1Beta1.ErrorContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EventTime, other.EventTime)) return false;
      if (!object.Equals(ServiceContext, other.ServiceContext)) return false;
      if (Message != other.Message) return false;
      if (!object.Equals(Context, other.Context)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventTime_ != null) hash ^= EventTime.GetHashCode();
      if (serviceContext_ != null) hash ^= ServiceContext.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventTime);
      }
      if (serviceContext_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServiceContext);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (context_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventTime);
      }
      if (serviceContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceContext);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorEvent other) {
      if (other == null) {
        return;
      }
      if (other.eventTime_ != null) {
        if (eventTime_ == null) {
          eventTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EventTime.MergeFrom(other.EventTime);
      }
      if (other.serviceContext_ != null) {
        if (serviceContext_ == null) {
          serviceContext_ = new global::Google.Cloud.ErrorReporting.V1Beta1.ServiceContext();
        }
        ServiceContext.MergeFrom(other.ServiceContext);
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::Google.Cloud.ErrorReporting.V1Beta1.ErrorContext();
        }
        Context.MergeFrom(other.Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (eventTime_ == null) {
              eventTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(eventTime_);
            break;
          }
          case 18: {
            if (serviceContext_ == null) {
              serviceContext_ = new global::Google.Cloud.ErrorReporting.V1Beta1.ServiceContext();
            }
            input.ReadMessage(serviceContext_);
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 42: {
            if (context_ == null) {
              context_ = new global::Google.Cloud.ErrorReporting.V1Beta1.ErrorContext();
            }
            input.ReadMessage(context_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Describes a running service that sends errors.
  /// Its version changes over time and multiple versions can run in parallel.
  /// </summary>
  public sealed partial class ServiceContext : pb::IMessage<ServiceContext> {
    private static readonly pb::MessageParser<ServiceContext> _parser = new pb::MessageParser<ServiceContext>(() => new ServiceContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.ErrorReporting.V1Beta1.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceContext(ServiceContext other) : this() {
      service_ = other.service_;
      version_ = other.version_;
      resourceType_ = other.resourceType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceContext Clone() {
      return new ServiceContext(this);
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private string service_ = "";
    /// <summary>
    /// An identifier of the service, such as the name of the
    /// executable, job, or Google App Engine service name. This field is expected
    /// to have a low number of values that are relatively stable over time, as
    /// opposed to `version`, which can be changed whenever new code is deployed.
    ///
    /// Contains the service name for error reports extracted from Google
    /// App Engine logs or `default` if the App Engine default service is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    /// <summary>
    /// Represents the source code version that the developer provided,
    /// which could represent a version label or a Git SHA-1 hash, for example.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_type" field.</summary>
    public const int ResourceTypeFieldNumber = 4;
    private string resourceType_ = "";
    /// <summary>
    /// Type of the MonitoredResource. List of possible values:
    /// https://cloud.google.com/monitoring/api/resources
    ///
    /// Value is set automatically for incoming errors and must not be set when
    /// reporting errors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceType {
      get { return resourceType_; }
      set {
        resourceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Service != other.Service) return false;
      if (Version != other.Version) return false;
      if (ResourceType != other.ResourceType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (ResourceType.Length != 0) hash ^= ResourceType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Service.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Service);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (ResourceType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResourceType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (ResourceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceContext other) {
      if (other == null) {
        return;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.ResourceType.Length != 0) {
        ResourceType = other.ResourceType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Service = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            ResourceType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A description of the context in which an error occurred.
  /// This data should be provided by the application when reporting an error,
  /// unless the
  /// error report has been generated automatically from Google App Engine logs.
  /// </summary>
  public sealed partial class ErrorContext : pb::IMessage<ErrorContext> {
    private static readonly pb::MessageParser<ErrorContext> _parser = new pb::MessageParser<ErrorContext>(() => new ErrorContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.ErrorReporting.V1Beta1.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorContext(ErrorContext other) : this() {
      HttpRequest = other.httpRequest_ != null ? other.HttpRequest.Clone() : null;
      user_ = other.user_;
      ReportLocation = other.reportLocation_ != null ? other.ReportLocation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorContext Clone() {
      return new ErrorContext(this);
    }

    /// <summary>Field number for the "http_request" field.</summary>
    public const int HttpRequestFieldNumber = 1;
    private global::Google.Cloud.ErrorReporting.V1Beta1.HttpRequestContext httpRequest_;
    /// <summary>
    /// The HTTP request which was processed when the error was
    /// triggered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.ErrorReporting.V1Beta1.HttpRequestContext HttpRequest {
      get { return httpRequest_; }
      set {
        httpRequest_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private string user_ = "";
    /// <summary>
    /// The user who caused or was affected by the crash.
    /// This can be a user ID, an email address, or an arbitrary token that
    /// uniquely identifies the user.
    /// When sending an error report, leave this field empty if the user was not
    /// logged in. In this case the
    /// Error Reporting system will use other data, such as remote IP address, to
    /// distinguish affected users. See `affected_users_count` in
    /// `ErrorGroupStats`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "report_location" field.</summary>
    public const int ReportLocationFieldNumber = 3;
    private global::Google.Cloud.ErrorReporting.V1Beta1.SourceLocation reportLocation_;
    /// <summary>
    /// The location in the source code where the decision was made to
    /// report the error, usually the place where it was logged.
    /// For a logged exception this would be the source line where the
    /// exception is logged, usually close to the place where it was
    /// caught. This value is in contrast to `Exception.cause_location`,
    /// which describes the source line where the exception was thrown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.ErrorReporting.V1Beta1.SourceLocation ReportLocation {
      get { return reportLocation_; }
      set {
        reportLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HttpRequest, other.HttpRequest)) return false;
      if (User != other.User) return false;
      if (!object.Equals(ReportLocation, other.ReportLocation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (httpRequest_ != null) hash ^= HttpRequest.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (reportLocation_ != null) hash ^= ReportLocation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (httpRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HttpRequest);
      }
      if (User.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(User);
      }
      if (reportLocation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReportLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (httpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpRequest);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (reportLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReportLocation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorContext other) {
      if (other == null) {
        return;
      }
      if (other.httpRequest_ != null) {
        if (httpRequest_ == null) {
          httpRequest_ = new global::Google.Cloud.ErrorReporting.V1Beta1.HttpRequestContext();
        }
        HttpRequest.MergeFrom(other.HttpRequest);
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.reportLocation_ != null) {
        if (reportLocation_ == null) {
          reportLocation_ = new global::Google.Cloud.ErrorReporting.V1Beta1.SourceLocation();
        }
        ReportLocation.MergeFrom(other.ReportLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (httpRequest_ == null) {
              httpRequest_ = new global::Google.Cloud.ErrorReporting.V1Beta1.HttpRequestContext();
            }
            input.ReadMessage(httpRequest_);
            break;
          }
          case 18: {
            User = input.ReadString();
            break;
          }
          case 26: {
            if (reportLocation_ == null) {
              reportLocation_ = new global::Google.Cloud.ErrorReporting.V1Beta1.SourceLocation();
            }
            input.ReadMessage(reportLocation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// HTTP request data that is related to a reported error.
  /// This data should be provided by the application when reporting an error,
  /// unless the
  /// error report has been generated automatically from Google App Engine logs.
  /// </summary>
  public sealed partial class HttpRequestContext : pb::IMessage<HttpRequestContext> {
    private static readonly pb::MessageParser<HttpRequestContext> _parser = new pb::MessageParser<HttpRequestContext>(() => new HttpRequestContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HttpRequestContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.ErrorReporting.V1Beta1.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HttpRequestContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HttpRequestContext(HttpRequestContext other) : this() {
      method_ = other.method_;
      url_ = other.url_;
      userAgent_ = other.userAgent_;
      referrer_ = other.referrer_;
      responseStatusCode_ = other.responseStatusCode_;
      remoteIp_ = other.remoteIp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HttpRequestContext Clone() {
      return new HttpRequestContext(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    /// <summary>
    /// The type of HTTP request, such as `GET`, `POST`, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 2;
    private string url_ = "";
    /// <summary>
    /// The URL of the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_agent" field.</summary>
    public const int UserAgentFieldNumber = 3;
    private string userAgent_ = "";
    /// <summary>
    /// The user agent information that is provided with the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAgent {
      get { return userAgent_; }
      set {
        userAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "referrer" field.</summary>
    public const int ReferrerFieldNumber = 4;
    private string referrer_ = "";
    /// <summary>
    /// The referrer information that is provided with the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Referrer {
      get { return referrer_; }
      set {
        referrer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "response_status_code" field.</summary>
    public const int ResponseStatusCodeFieldNumber = 5;
    private int responseStatusCode_;
    /// <summary>
    /// The HTTP response status code for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResponseStatusCode {
      get { return responseStatusCode_; }
      set {
        responseStatusCode_ = value;
      }
    }

    /// <summary>Field number for the "remote_ip" field.</summary>
    public const int RemoteIpFieldNumber = 6;
    private string remoteIp_ = "";
    /// <summary>
    /// The IP address from which the request originated.
    /// This can be IPv4, IPv6, or a token which is derived from the
    /// IP address, depending on the data that has been provided
    /// in the error report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemoteIp {
      get { return remoteIp_; }
      set {
        remoteIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HttpRequestContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HttpRequestContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (Url != other.Url) return false;
      if (UserAgent != other.UserAgent) return false;
      if (Referrer != other.Referrer) return false;
      if (ResponseStatusCode != other.ResponseStatusCode) return false;
      if (RemoteIp != other.RemoteIp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (UserAgent.Length != 0) hash ^= UserAgent.GetHashCode();
      if (Referrer.Length != 0) hash ^= Referrer.GetHashCode();
      if (ResponseStatusCode != 0) hash ^= ResponseStatusCode.GetHashCode();
      if (RemoteIp.Length != 0) hash ^= RemoteIp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Url);
      }
      if (UserAgent.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserAgent);
      }
      if (Referrer.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Referrer);
      }
      if (ResponseStatusCode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ResponseStatusCode);
      }
      if (RemoteIp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RemoteIp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (UserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAgent);
      }
      if (Referrer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Referrer);
      }
      if (ResponseStatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResponseStatusCode);
      }
      if (RemoteIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteIp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HttpRequestContext other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.UserAgent.Length != 0) {
        UserAgent = other.UserAgent;
      }
      if (other.Referrer.Length != 0) {
        Referrer = other.Referrer;
      }
      if (other.ResponseStatusCode != 0) {
        ResponseStatusCode = other.ResponseStatusCode;
      }
      if (other.RemoteIp.Length != 0) {
        RemoteIp = other.RemoteIp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 18: {
            Url = input.ReadString();
            break;
          }
          case 26: {
            UserAgent = input.ReadString();
            break;
          }
          case 34: {
            Referrer = input.ReadString();
            break;
          }
          case 40: {
            ResponseStatusCode = input.ReadInt32();
            break;
          }
          case 50: {
            RemoteIp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Indicates a location in the source code of the service for which
  /// errors are reported.
  /// This data should be provided by the application when reporting an error,
  /// unless the error report has been generated automatically from Google App
  /// Engine logs. All fields are optional.
  /// </summary>
  public sealed partial class SourceLocation : pb::IMessage<SourceLocation> {
    private static readonly pb::MessageParser<SourceLocation> _parser = new pb::MessageParser<SourceLocation>(() => new SourceLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourceLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.ErrorReporting.V1Beta1.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceLocation(SourceLocation other) : this() {
      filePath_ = other.filePath_;
      lineNumber_ = other.lineNumber_;
      functionName_ = other.functionName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceLocation Clone() {
      return new SourceLocation(this);
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 1;
    private string filePath_ = "";
    /// <summary>
    /// The source code filename, which can include a truncated relative
    /// path, or a full path from a production machine.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "line_number" field.</summary>
    public const int LineNumberFieldNumber = 2;
    private int lineNumber_;
    /// <summary>
    /// 1-based. 0 indicates that the line number is unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineNumber {
      get { return lineNumber_; }
      set {
        lineNumber_ = value;
      }
    }

    /// <summary>Field number for the "function_name" field.</summary>
    public const int FunctionNameFieldNumber = 4;
    private string functionName_ = "";
    /// <summary>
    /// Human-readable name of a function or method.
    /// The value can include optional context like the class or package name.
    /// For example, `my.package.MyClass.method` in case of Java.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FunctionName {
      get { return functionName_; }
      set {
        functionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourceLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourceLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilePath != other.FilePath) return false;
      if (LineNumber != other.LineNumber) return false;
      if (FunctionName != other.FunctionName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (LineNumber != 0) hash ^= LineNumber.GetHashCode();
      if (FunctionName.Length != 0) hash ^= FunctionName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilePath);
      }
      if (LineNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LineNumber);
      }
      if (FunctionName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FunctionName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (LineNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineNumber);
      }
      if (FunctionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourceLocation other) {
      if (other == null) {
        return;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      if (other.LineNumber != 0) {
        LineNumber = other.LineNumber;
      }
      if (other.FunctionName.Length != 0) {
        FunctionName = other.FunctionName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FilePath = input.ReadString();
            break;
          }
          case 16: {
            LineNumber = input.ReadInt32();
            break;
          }
          case 34: {
            FunctionName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
