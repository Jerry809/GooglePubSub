// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/log_entry.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Logging.V2 {

  /// <summary>Holder for reflection information generated from google/logging/v2/log_entry.proto</summary>
  public static partial class LogEntryReflection {

    #region Descriptor
    /// <summary>File descriptor for google/logging/v2/log_entry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LogEntryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFnb29nbGUvbG9nZ2luZy92Mi9sb2dfZW50cnkucHJvdG8SEWdvb2dsZS5s",
            "b2dnaW5nLnYyGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb3RvGiNnb29n",
            "bGUvYXBpL21vbml0b3JlZF9yZXNvdXJjZS5wcm90bxomZ29vZ2xlL2xvZ2dp",
            "bmcvdHlwZS9odHRwX3JlcXVlc3QucHJvdG8aJmdvb2dsZS9sb2dnaW5nL3R5",
            "cGUvbG9nX3NldmVyaXR5LnByb3RvGhlnb29nbGUvcHJvdG9idWYvYW55LnBy",
            "b3RvGhxnb29nbGUvcHJvdG9idWYvc3RydWN0LnByb3RvGh9nb29nbGUvcHJv",
            "dG9idWYvdGltZXN0YW1wLnByb3RvIqkFCghMb2dFbnRyeRIQCghsb2dfbmFt",
            "ZRgMIAEoCRIvCghyZXNvdXJjZRgIIAEoCzIdLmdvb2dsZS5hcGkuTW9uaXRv",
            "cmVkUmVzb3VyY2USLQoNcHJvdG9fcGF5bG9hZBgCIAEoCzIULmdvb2dsZS5w",
            "cm90b2J1Zi5BbnlIABIWCgx0ZXh0X3BheWxvYWQYAyABKAlIABIvCgxqc29u",
            "X3BheWxvYWQYBiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0SAASLQoJ",
            "dGltZXN0YW1wGAkgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI1",
            "ChFyZWNlaXZlX3RpbWVzdGFtcBgYIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASMgoIc2V2ZXJpdHkYCiABKA4yIC5nb29nbGUubG9nZ2luZy50",
            "eXBlLkxvZ1NldmVyaXR5EhEKCWluc2VydF9pZBgEIAEoCRI2CgxodHRwX3Jl",
            "cXVlc3QYByABKAsyIC5nb29nbGUubG9nZ2luZy50eXBlLkh0dHBSZXF1ZXN0",
            "EjcKBmxhYmVscxgLIAMoCzInLmdvb2dsZS5sb2dnaW5nLnYyLkxvZ0VudHJ5",
            "LkxhYmVsc0VudHJ5EjcKCW9wZXJhdGlvbhgPIAEoCzIkLmdvb2dsZS5sb2dn",
            "aW5nLnYyLkxvZ0VudHJ5T3BlcmF0aW9uEg0KBXRyYWNlGBYgASgJEkIKD3Nv",
            "dXJjZV9sb2NhdGlvbhgXIAEoCzIpLmdvb2dsZS5sb2dnaW5nLnYyLkxvZ0Vu",
            "dHJ5U291cmNlTG9jYXRpb24aLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4AUIJCgdwYXlsb2FkIk4KEUxvZ0VudHJ5T3Bl",
            "cmF0aW9uEgoKAmlkGAEgASgJEhAKCHByb2R1Y2VyGAIgASgJEg0KBWZpcnN0",
            "GAMgASgIEgwKBGxhc3QYBCABKAgiRgoWTG9nRW50cnlTb3VyY2VMb2NhdGlv",
            "bhIMCgRmaWxlGAEgASgJEgwKBGxpbmUYAiABKAMSEAoIZnVuY3Rpb24YAyAB",
            "KAlCfwoVY29tLmdvb2dsZS5sb2dnaW5nLnYyQg1Mb2dFbnRyeVByb3RvUAFa",
            "OGdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvbG9nZ2lu",
            "Zy92Mjtsb2dnaW5n+AEBqgIXR29vZ2xlLkNsb3VkLkxvZ2dpbmcuVjJiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.MonitoredResourceReflection.Descriptor, global::Google.Cloud.Logging.Type.HttpRequestReflection.Descriptor, global::Google.Cloud.Logging.Type.LogSeverityReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Logging.V2.LogEntry), global::Google.Cloud.Logging.V2.LogEntry.Parser, new[]{ "LogName", "Resource", "ProtoPayload", "TextPayload", "JsonPayload", "Timestamp", "ReceiveTimestamp", "Severity", "InsertId", "HttpRequest", "Labels", "Operation", "Trace", "SourceLocation" }, new[]{ "Payload" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Logging.V2.LogEntryOperation), global::Google.Cloud.Logging.V2.LogEntryOperation.Parser, new[]{ "Id", "Producer", "First", "Last" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Logging.V2.LogEntrySourceLocation), global::Google.Cloud.Logging.V2.LogEntrySourceLocation.Parser, new[]{ "File", "Line", "Function" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An individual entry in a log.
  /// </summary>
  public sealed partial class LogEntry : pb::IMessage<LogEntry> {
    private static readonly pb::MessageParser<LogEntry> _parser = new pb::MessageParser<LogEntry>(() => new LogEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Logging.V2.LogEntryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEntry(LogEntry other) : this() {
      logName_ = other.logName_;
      Resource = other.resource_ != null ? other.Resource.Clone() : null;
      Timestamp = other.timestamp_ != null ? other.Timestamp.Clone() : null;
      ReceiveTimestamp = other.receiveTimestamp_ != null ? other.ReceiveTimestamp.Clone() : null;
      severity_ = other.severity_;
      insertId_ = other.insertId_;
      HttpRequest = other.httpRequest_ != null ? other.HttpRequest.Clone() : null;
      labels_ = other.labels_.Clone();
      Operation = other.operation_ != null ? other.Operation.Clone() : null;
      trace_ = other.trace_;
      SourceLocation = other.sourceLocation_ != null ? other.SourceLocation.Clone() : null;
      switch (other.PayloadCase) {
        case PayloadOneofCase.ProtoPayload:
          ProtoPayload = other.ProtoPayload.Clone();
          break;
        case PayloadOneofCase.TextPayload:
          TextPayload = other.TextPayload;
          break;
        case PayloadOneofCase.JsonPayload:
          JsonPayload = other.JsonPayload.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEntry Clone() {
      return new LogEntry(this);
    }

    /// <summary>Field number for the "log_name" field.</summary>
    public const int LogNameFieldNumber = 12;
    private string logName_ = "";
    /// <summary>
    /// Required. The resource name of the log to which this log entry belongs:
    ///
    ///     "projects/[PROJECT_ID]/logs/[LOG_ID]"
    ///     "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
    ///     "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
    ///     "folders/[FOLDER_ID]/logs/[LOG_ID]"
    ///
    /// `[LOG_ID]` must be URL-encoded within `log_name`. Example:
    /// `"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity"`.
    /// `[LOG_ID]` must be less than 512 characters long and can only include the
    /// following characters: upper and lower case alphanumeric characters,
    /// forward-slash, underscore, hyphen, and period.
    ///
    /// For backward compatibility, if `log_name` begins with a forward-slash, such
    /// as `/projects/...`, then the log entry is ingested as usual but the
    /// forward-slash is removed. Listing the log entry will not show the leading
    /// slash and filtering for a log name with a leading slash will never return
    /// any results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogName {
      get { return logName_; }
      set {
        logName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 8;
    private global::Google.Api.MonitoredResource resource_;
    /// <summary>
    /// Required. The monitored resource associated with this log entry.
    /// Example: a log entry that reports a database error would be
    /// associated with the monitored resource designating the particular
    /// database that reported the error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.MonitoredResource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "proto_payload" field.</summary>
    public const int ProtoPayloadFieldNumber = 2;
    /// <summary>
    /// The log entry payload, represented as a protocol buffer.  Some
    /// Google Cloud Platform services use this field for their log
    /// entry payloads.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any ProtoPayload {
      get { return payloadCase_ == PayloadOneofCase.ProtoPayload ? (global::Google.Protobuf.WellKnownTypes.Any) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ProtoPayload;
      }
    }

    /// <summary>Field number for the "text_payload" field.</summary>
    public const int TextPayloadFieldNumber = 3;
    /// <summary>
    /// The log entry payload, represented as a Unicode string (UTF-8).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextPayload {
      get { return payloadCase_ == PayloadOneofCase.TextPayload ? (string) payload_ : ""; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.TextPayload;
      }
    }

    /// <summary>Field number for the "json_payload" field.</summary>
    public const int JsonPayloadFieldNumber = 6;
    /// <summary>
    /// The log entry payload, represented as a structure that is
    /// expressed as a JSON object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct JsonPayload {
      get { return payloadCase_ == PayloadOneofCase.JsonPayload ? (global::Google.Protobuf.WellKnownTypes.Struct) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.JsonPayload;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Optional. The time the event described by the log entry occurred.  If
    /// omitted in a new log entry, Stackdriver Logging will insert the time the
    /// log entry is received.  Stackdriver Logging might reject log entries whose
    /// time stamps are more than a couple of hours in the future. Log entries
    /// with time stamps in the past are accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "receive_timestamp" field.</summary>
    public const int ReceiveTimestampFieldNumber = 24;
    private global::Google.Protobuf.WellKnownTypes.Timestamp receiveTimestamp_;
    /// <summary>
    /// Output only. The time the log entry was received by Stackdriver Logging.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReceiveTimestamp {
      get { return receiveTimestamp_; }
      set {
        receiveTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 10;
    private global::Google.Cloud.Logging.Type.LogSeverity severity_ = 0;
    /// <summary>
    /// Optional. The severity of the log entry. The default value is
    /// `LogSeverity.DEFAULT`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Logging.Type.LogSeverity Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "insert_id" field.</summary>
    public const int InsertIdFieldNumber = 4;
    private string insertId_ = "";
    /// <summary>
    /// Optional. A unique identifier for the log entry. If you provide a value,
    /// then Stackdriver Logging considers other log entries in the same project,
    /// with the same `timestamp`, and with the same `insert_id` to be duplicates
    /// which can be removed.  If omitted in new log entries, then Stackdriver
    /// Logging will insert its own unique identifier. The `insert_id` is used
    /// to order log entries that have the same `timestamp` value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InsertId {
      get { return insertId_; }
      set {
        insertId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "http_request" field.</summary>
    public const int HttpRequestFieldNumber = 7;
    private global::Google.Cloud.Logging.Type.HttpRequest httpRequest_;
    /// <summary>
    /// Optional. Information about the HTTP request associated with this
    /// log entry, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Logging.Type.HttpRequest HttpRequest {
      get { return httpRequest_; }
      set {
        httpRequest_ = value;
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 11;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 90);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Optional. A set of user-defined (key, value) data that provides additional
    /// information about the log entry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 15;
    private global::Google.Cloud.Logging.V2.LogEntryOperation operation_;
    /// <summary>
    /// Optional. Information about an operation associated with the log entry, if
    /// applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Logging.V2.LogEntryOperation Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "trace" field.</summary>
    public const int TraceFieldNumber = 22;
    private string trace_ = "";
    /// <summary>
    /// Optional. Resource name of the trace associated with the log entry, if any.
    /// If it contains a relative resource name, the name is assumed to be relative
    /// to `//tracing.googleapis.com`. Example:
    /// `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trace {
      get { return trace_; }
      set {
        trace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_location" field.</summary>
    public const int SourceLocationFieldNumber = 23;
    private global::Google.Cloud.Logging.V2.LogEntrySourceLocation sourceLocation_;
    /// <summary>
    /// Optional. Source code location information associated with the log entry,
    /// if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Logging.V2.LogEntrySourceLocation SourceLocation {
      get { return sourceLocation_; }
      set {
        sourceLocation_ = value;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      ProtoPayload = 2,
      TextPayload = 3,
      JsonPayload = 6,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogName != other.LogName) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      if (!object.Equals(ProtoPayload, other.ProtoPayload)) return false;
      if (TextPayload != other.TextPayload) return false;
      if (!object.Equals(JsonPayload, other.JsonPayload)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(ReceiveTimestamp, other.ReceiveTimestamp)) return false;
      if (Severity != other.Severity) return false;
      if (InsertId != other.InsertId) return false;
      if (!object.Equals(HttpRequest, other.HttpRequest)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(Operation, other.Operation)) return false;
      if (Trace != other.Trace) return false;
      if (!object.Equals(SourceLocation, other.SourceLocation)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LogName.Length != 0) hash ^= LogName.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.ProtoPayload) hash ^= ProtoPayload.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TextPayload) hash ^= TextPayload.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.JsonPayload) hash ^= JsonPayload.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (receiveTimestamp_ != null) hash ^= ReceiveTimestamp.GetHashCode();
      if (Severity != 0) hash ^= Severity.GetHashCode();
      if (InsertId.Length != 0) hash ^= InsertId.GetHashCode();
      if (httpRequest_ != null) hash ^= HttpRequest.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (operation_ != null) hash ^= Operation.GetHashCode();
      if (Trace.Length != 0) hash ^= Trace.GetHashCode();
      if (sourceLocation_ != null) hash ^= SourceLocation.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payloadCase_ == PayloadOneofCase.ProtoPayload) {
        output.WriteRawTag(18);
        output.WriteMessage(ProtoPayload);
      }
      if (payloadCase_ == PayloadOneofCase.TextPayload) {
        output.WriteRawTag(26);
        output.WriteString(TextPayload);
      }
      if (InsertId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InsertId);
      }
      if (payloadCase_ == PayloadOneofCase.JsonPayload) {
        output.WriteRawTag(50);
        output.WriteMessage(JsonPayload);
      }
      if (httpRequest_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(HttpRequest);
      }
      if (resource_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Resource);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Timestamp);
      }
      if (Severity != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Severity);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (LogName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LogName);
      }
      if (operation_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Operation);
      }
      if (Trace.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Trace);
      }
      if (sourceLocation_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SourceLocation);
      }
      if (receiveTimestamp_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ReceiveTimestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LogName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogName);
      }
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (payloadCase_ == PayloadOneofCase.ProtoPayload) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProtoPayload);
      }
      if (payloadCase_ == PayloadOneofCase.TextPayload) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextPayload);
      }
      if (payloadCase_ == PayloadOneofCase.JsonPayload) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JsonPayload);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (receiveTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReceiveTimestamp);
      }
      if (Severity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      if (InsertId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InsertId);
      }
      if (httpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpRequest);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (operation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operation);
      }
      if (Trace.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Trace);
      }
      if (sourceLocation_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SourceLocation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogEntry other) {
      if (other == null) {
        return;
      }
      if (other.LogName.Length != 0) {
        LogName = other.LogName;
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          resource_ = new global::Google.Api.MonitoredResource();
        }
        Resource.MergeFrom(other.Resource);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.receiveTimestamp_ != null) {
        if (receiveTimestamp_ == null) {
          receiveTimestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReceiveTimestamp.MergeFrom(other.ReceiveTimestamp);
      }
      if (other.Severity != 0) {
        Severity = other.Severity;
      }
      if (other.InsertId.Length != 0) {
        InsertId = other.InsertId;
      }
      if (other.httpRequest_ != null) {
        if (httpRequest_ == null) {
          httpRequest_ = new global::Google.Cloud.Logging.Type.HttpRequest();
        }
        HttpRequest.MergeFrom(other.HttpRequest);
      }
      labels_.Add(other.labels_);
      if (other.operation_ != null) {
        if (operation_ == null) {
          operation_ = new global::Google.Cloud.Logging.V2.LogEntryOperation();
        }
        Operation.MergeFrom(other.Operation);
      }
      if (other.Trace.Length != 0) {
        Trace = other.Trace;
      }
      if (other.sourceLocation_ != null) {
        if (sourceLocation_ == null) {
          sourceLocation_ = new global::Google.Cloud.Logging.V2.LogEntrySourceLocation();
        }
        SourceLocation.MergeFrom(other.SourceLocation);
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.ProtoPayload:
          ProtoPayload = other.ProtoPayload;
          break;
        case PayloadOneofCase.TextPayload:
          TextPayload = other.TextPayload;
          break;
        case PayloadOneofCase.JsonPayload:
          JsonPayload = other.JsonPayload;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (payloadCase_ == PayloadOneofCase.ProtoPayload) {
              subBuilder.MergeFrom(ProtoPayload);
            }
            input.ReadMessage(subBuilder);
            ProtoPayload = subBuilder;
            break;
          }
          case 26: {
            TextPayload = input.ReadString();
            break;
          }
          case 34: {
            InsertId = input.ReadString();
            break;
          }
          case 50: {
            global::Google.Protobuf.WellKnownTypes.Struct subBuilder = new global::Google.Protobuf.WellKnownTypes.Struct();
            if (payloadCase_ == PayloadOneofCase.JsonPayload) {
              subBuilder.MergeFrom(JsonPayload);
            }
            input.ReadMessage(subBuilder);
            JsonPayload = subBuilder;
            break;
          }
          case 58: {
            if (httpRequest_ == null) {
              httpRequest_ = new global::Google.Cloud.Logging.Type.HttpRequest();
            }
            input.ReadMessage(httpRequest_);
            break;
          }
          case 66: {
            if (resource_ == null) {
              resource_ = new global::Google.Api.MonitoredResource();
            }
            input.ReadMessage(resource_);
            break;
          }
          case 74: {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 80: {
            severity_ = (global::Google.Cloud.Logging.Type.LogSeverity) input.ReadEnum();
            break;
          }
          case 90: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 98: {
            LogName = input.ReadString();
            break;
          }
          case 122: {
            if (operation_ == null) {
              operation_ = new global::Google.Cloud.Logging.V2.LogEntryOperation();
            }
            input.ReadMessage(operation_);
            break;
          }
          case 178: {
            Trace = input.ReadString();
            break;
          }
          case 186: {
            if (sourceLocation_ == null) {
              sourceLocation_ = new global::Google.Cloud.Logging.V2.LogEntrySourceLocation();
            }
            input.ReadMessage(sourceLocation_);
            break;
          }
          case 194: {
            if (receiveTimestamp_ == null) {
              receiveTimestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(receiveTimestamp_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Additional information about a potentially long-running operation with which
  /// a log entry is associated.
  /// </summary>
  public sealed partial class LogEntryOperation : pb::IMessage<LogEntryOperation> {
    private static readonly pb::MessageParser<LogEntryOperation> _parser = new pb::MessageParser<LogEntryOperation>(() => new LogEntryOperation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogEntryOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Logging.V2.LogEntryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEntryOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEntryOperation(LogEntryOperation other) : this() {
      id_ = other.id_;
      producer_ = other.producer_;
      first_ = other.first_;
      last_ = other.last_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEntryOperation Clone() {
      return new LogEntryOperation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Optional. An arbitrary operation identifier. Log entries with the
    /// same identifier are assumed to be part of the same operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "producer" field.</summary>
    public const int ProducerFieldNumber = 2;
    private string producer_ = "";
    /// <summary>
    /// Optional. An arbitrary producer identifier. The combination of
    /// `id` and `producer` must be globally unique.  Examples for `producer`:
    /// `"MyDivision.MyBigCompany.com"`, `"github.com/MyProject/MyApplication"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Producer {
      get { return producer_; }
      set {
        producer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first" field.</summary>
    public const int FirstFieldNumber = 3;
    private bool first_;
    /// <summary>
    /// Optional. Set this to True if this is the first log entry in the operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool First {
      get { return first_; }
      set {
        first_ = value;
      }
    }

    /// <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 4;
    private bool last_;
    /// <summary>
    /// Optional. Set this to True if this is the last log entry in the operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Last {
      get { return last_; }
      set {
        last_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogEntryOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogEntryOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Producer != other.Producer) return false;
      if (First != other.First) return false;
      if (Last != other.Last) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Producer.Length != 0) hash ^= Producer.GetHashCode();
      if (First != false) hash ^= First.GetHashCode();
      if (Last != false) hash ^= Last.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Producer.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Producer);
      }
      if (First != false) {
        output.WriteRawTag(24);
        output.WriteBool(First);
      }
      if (Last != false) {
        output.WriteRawTag(32);
        output.WriteBool(Last);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Producer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Producer);
      }
      if (First != false) {
        size += 1 + 1;
      }
      if (Last != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogEntryOperation other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Producer.Length != 0) {
        Producer = other.Producer;
      }
      if (other.First != false) {
        First = other.First;
      }
      if (other.Last != false) {
        Last = other.Last;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Producer = input.ReadString();
            break;
          }
          case 24: {
            First = input.ReadBool();
            break;
          }
          case 32: {
            Last = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Additional information about the source code location that produced the log
  /// entry.
  /// </summary>
  public sealed partial class LogEntrySourceLocation : pb::IMessage<LogEntrySourceLocation> {
    private static readonly pb::MessageParser<LogEntrySourceLocation> _parser = new pb::MessageParser<LogEntrySourceLocation>(() => new LogEntrySourceLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogEntrySourceLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Logging.V2.LogEntryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEntrySourceLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEntrySourceLocation(LogEntrySourceLocation other) : this() {
      file_ = other.file_;
      line_ = other.line_;
      function_ = other.function_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEntrySourceLocation Clone() {
      return new LogEntrySourceLocation(this);
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 1;
    private string file_ = "";
    /// <summary>
    /// Optional. Source file name. Depending on the runtime environment, this
    /// might be a simple name or a fully-qualified name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 2;
    private long line_;
    /// <summary>
    /// Optional. Line within the source file. 1-based; 0 indicates no line number
    /// available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 3;
    private string function_ = "";
    /// <summary>
    /// Optional. Human-readable name of the function or method being invoked, with
    /// optional context such as the class or package name. This information may be
    /// used in contexts such as the logs viewer, where a file and line number are
    /// less meaningful. The format can vary by language. For example:
    /// `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function`
    /// (Python).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Function {
      get { return function_; }
      set {
        function_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogEntrySourceLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogEntrySourceLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (File != other.File) return false;
      if (Line != other.Line) return false;
      if (Function != other.Function) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (File.Length != 0) hash ^= File.GetHashCode();
      if (Line != 0L) hash ^= Line.GetHashCode();
      if (Function.Length != 0) hash ^= Function.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (File.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(File);
      }
      if (Line != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Line);
      }
      if (Function.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Function);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (File.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      if (Line != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Line);
      }
      if (Function.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Function);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogEntrySourceLocation other) {
      if (other == null) {
        return;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      if (other.Line != 0L) {
        Line = other.Line;
      }
      if (other.Function.Length != 0) {
        Function = other.Function;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            File = input.ReadString();
            break;
          }
          case 16: {
            Line = input.ReadInt64();
            break;
          }
          case 26: {
            Function = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
