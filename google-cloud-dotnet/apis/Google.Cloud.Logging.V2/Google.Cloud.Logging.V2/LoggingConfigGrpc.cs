// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Google.Cloud.Logging.V2 {
  /// <summary>
  /// Service for configuring sinks used to export log entries outside of
  /// Stackdriver Logging.
  /// </summary>
  public static partial class ConfigServiceV2
  {
    static readonly string __ServiceName = "google.logging.v2.ConfigServiceV2";

    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListSinksRequest> __Marshaller_ListSinksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Logging.V2.ListSinksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListSinksResponse> __Marshaller_ListSinksResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Logging.V2.ListSinksResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.GetSinkRequest> __Marshaller_GetSinkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Logging.V2.GetSinkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.LogSink> __Marshaller_LogSink = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Logging.V2.LogSink.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.CreateSinkRequest> __Marshaller_CreateSinkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Logging.V2.CreateSinkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.UpdateSinkRequest> __Marshaller_UpdateSinkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Logging.V2.UpdateSinkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.DeleteSinkRequest> __Marshaller_DeleteSinkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Logging.V2.DeleteSinkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Logging.V2.ListSinksRequest, global::Google.Cloud.Logging.V2.ListSinksResponse> __Method_ListSinks = new grpc::Method<global::Google.Cloud.Logging.V2.ListSinksRequest, global::Google.Cloud.Logging.V2.ListSinksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSinks",
        __Marshaller_ListSinksRequest,
        __Marshaller_ListSinksResponse);

    static readonly grpc::Method<global::Google.Cloud.Logging.V2.GetSinkRequest, global::Google.Cloud.Logging.V2.LogSink> __Method_GetSink = new grpc::Method<global::Google.Cloud.Logging.V2.GetSinkRequest, global::Google.Cloud.Logging.V2.LogSink>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSink",
        __Marshaller_GetSinkRequest,
        __Marshaller_LogSink);

    static readonly grpc::Method<global::Google.Cloud.Logging.V2.CreateSinkRequest, global::Google.Cloud.Logging.V2.LogSink> __Method_CreateSink = new grpc::Method<global::Google.Cloud.Logging.V2.CreateSinkRequest, global::Google.Cloud.Logging.V2.LogSink>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSink",
        __Marshaller_CreateSinkRequest,
        __Marshaller_LogSink);

    static readonly grpc::Method<global::Google.Cloud.Logging.V2.UpdateSinkRequest, global::Google.Cloud.Logging.V2.LogSink> __Method_UpdateSink = new grpc::Method<global::Google.Cloud.Logging.V2.UpdateSinkRequest, global::Google.Cloud.Logging.V2.LogSink>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSink",
        __Marshaller_UpdateSinkRequest,
        __Marshaller_LogSink);

    static readonly grpc::Method<global::Google.Cloud.Logging.V2.DeleteSinkRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSink = new grpc::Method<global::Google.Cloud.Logging.V2.DeleteSinkRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSink",
        __Marshaller_DeleteSinkRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Logging.V2.LoggingConfigReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ConfigServiceV2</summary>
    public abstract partial class ConfigServiceV2Base
    {
      /// <summary>
      /// Lists sinks.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.ListSinksResponse> ListSinks(global::Google.Cloud.Logging.V2.ListSinksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a sink.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogSink> GetSink(global::Google.Cloud.Logging.V2.GetSinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a sink that exports specified log entries to a destination.  The
      /// export of newly-ingested log entries begins immediately, unless the current
      /// time is outside the sink's start and end times or the sink's
      /// `writer_identity` is not permitted to write to the destination.  A sink can
      /// export log entries only from the resource owning the sink.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogSink> CreateSink(global::Google.Cloud.Logging.V2.CreateSinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a sink. If the named sink doesn't exist, then this method is
      /// identical to
      /// [sinks.create](/logging/docs/api/reference/rest/v2/projects.sinks/create).
      /// If the named sink does exist, then this method replaces the following
      /// fields in the existing sink with values from the new sink: `destination`,
      /// `filter`, `output_version_format`, `start_time`, and `end_time`.
      /// The updated filter might also have a new `writer_identity`; see the
      /// `unique_writer_identity` field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogSink> UpdateSink(global::Google.Cloud.Logging.V2.UpdateSinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a sink. If the sink has a unique `writer_identity`, then that
      /// service account is also deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSink(global::Google.Cloud.Logging.V2.DeleteSinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ConfigServiceV2</summary>
    public partial class ConfigServiceV2Client : grpc::ClientBase<ConfigServiceV2Client>
    {
      /// <summary>Creates a new client for ConfigServiceV2</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ConfigServiceV2Client(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ConfigServiceV2 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ConfigServiceV2Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ConfigServiceV2Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ConfigServiceV2Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists sinks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Logging.V2.ListSinksResponse ListSinks(global::Google.Cloud.Logging.V2.ListSinksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSinks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists sinks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Logging.V2.ListSinksResponse ListSinks(global::Google.Cloud.Logging.V2.ListSinksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSinks, null, options, request);
      }
      /// <summary>
      /// Lists sinks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Cloud.Logging.V2.ListSinksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSinksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists sinks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Cloud.Logging.V2.ListSinksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSinks, null, options, request);
      }
      /// <summary>
      /// Gets a sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Logging.V2.LogSink GetSink(global::Google.Cloud.Logging.V2.GetSinkRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Logging.V2.LogSink GetSink(global::Google.Cloud.Logging.V2.GetSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSink, null, options, request);
      }
      /// <summary>
      /// Gets a sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> GetSinkAsync(global::Google.Cloud.Logging.V2.GetSinkRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> GetSinkAsync(global::Google.Cloud.Logging.V2.GetSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSink, null, options, request);
      }
      /// <summary>
      /// Creates a sink that exports specified log entries to a destination.  The
      /// export of newly-ingested log entries begins immediately, unless the current
      /// time is outside the sink's start and end times or the sink's
      /// `writer_identity` is not permitted to write to the destination.  A sink can
      /// export log entries only from the resource owning the sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Logging.V2.LogSink CreateSink(global::Google.Cloud.Logging.V2.CreateSinkRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a sink that exports specified log entries to a destination.  The
      /// export of newly-ingested log entries begins immediately, unless the current
      /// time is outside the sink's start and end times or the sink's
      /// `writer_identity` is not permitted to write to the destination.  A sink can
      /// export log entries only from the resource owning the sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Logging.V2.LogSink CreateSink(global::Google.Cloud.Logging.V2.CreateSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSink, null, options, request);
      }
      /// <summary>
      /// Creates a sink that exports specified log entries to a destination.  The
      /// export of newly-ingested log entries begins immediately, unless the current
      /// time is outside the sink's start and end times or the sink's
      /// `writer_identity` is not permitted to write to the destination.  A sink can
      /// export log entries only from the resource owning the sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> CreateSinkAsync(global::Google.Cloud.Logging.V2.CreateSinkRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a sink that exports specified log entries to a destination.  The
      /// export of newly-ingested log entries begins immediately, unless the current
      /// time is outside the sink's start and end times or the sink's
      /// `writer_identity` is not permitted to write to the destination.  A sink can
      /// export log entries only from the resource owning the sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> CreateSinkAsync(global::Google.Cloud.Logging.V2.CreateSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSink, null, options, request);
      }
      /// <summary>
      /// Updates a sink. If the named sink doesn't exist, then this method is
      /// identical to
      /// [sinks.create](/logging/docs/api/reference/rest/v2/projects.sinks/create).
      /// If the named sink does exist, then this method replaces the following
      /// fields in the existing sink with values from the new sink: `destination`,
      /// `filter`, `output_version_format`, `start_time`, and `end_time`.
      /// The updated filter might also have a new `writer_identity`; see the
      /// `unique_writer_identity` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Logging.V2.LogSink UpdateSink(global::Google.Cloud.Logging.V2.UpdateSinkRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateSink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a sink. If the named sink doesn't exist, then this method is
      /// identical to
      /// [sinks.create](/logging/docs/api/reference/rest/v2/projects.sinks/create).
      /// If the named sink does exist, then this method replaces the following
      /// fields in the existing sink with values from the new sink: `destination`,
      /// `filter`, `output_version_format`, `start_time`, and `end_time`.
      /// The updated filter might also have a new `writer_identity`; see the
      /// `unique_writer_identity` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Logging.V2.LogSink UpdateSink(global::Google.Cloud.Logging.V2.UpdateSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSink, null, options, request);
      }
      /// <summary>
      /// Updates a sink. If the named sink doesn't exist, then this method is
      /// identical to
      /// [sinks.create](/logging/docs/api/reference/rest/v2/projects.sinks/create).
      /// If the named sink does exist, then this method replaces the following
      /// fields in the existing sink with values from the new sink: `destination`,
      /// `filter`, `output_version_format`, `start_time`, and `end_time`.
      /// The updated filter might also have a new `writer_identity`; see the
      /// `unique_writer_identity` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Cloud.Logging.V2.UpdateSinkRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateSinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a sink. If the named sink doesn't exist, then this method is
      /// identical to
      /// [sinks.create](/logging/docs/api/reference/rest/v2/projects.sinks/create).
      /// If the named sink does exist, then this method replaces the following
      /// fields in the existing sink with values from the new sink: `destination`,
      /// `filter`, `output_version_format`, `start_time`, and `end_time`.
      /// The updated filter might also have a new `writer_identity`; see the
      /// `unique_writer_identity` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Cloud.Logging.V2.UpdateSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSink, null, options, request);
      }
      /// <summary>
      /// Deletes a sink. If the sink has a unique `writer_identity`, then that
      /// service account is also deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Cloud.Logging.V2.DeleteSinkRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a sink. If the sink has a unique `writer_identity`, then that
      /// service account is also deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Cloud.Logging.V2.DeleteSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSink, null, options, request);
      }
      /// <summary>
      /// Deletes a sink. If the sink has a unique `writer_identity`, then that
      /// service account is also deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Cloud.Logging.V2.DeleteSinkRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a sink. If the sink has a unique `writer_identity`, then that
      /// service account is also deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Cloud.Logging.V2.DeleteSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSink, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ConfigServiceV2Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConfigServiceV2Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ConfigServiceV2Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListSinks, serviceImpl.ListSinks)
          .AddMethod(__Method_GetSink, serviceImpl.GetSink)
          .AddMethod(__Method_CreateSink, serviceImpl.CreateSink)
          .AddMethod(__Method_UpdateSink, serviceImpl.UpdateSink)
          .AddMethod(__Method_DeleteSink, serviceImpl.DeleteSink).Build();
    }

  }
}
#endregion
