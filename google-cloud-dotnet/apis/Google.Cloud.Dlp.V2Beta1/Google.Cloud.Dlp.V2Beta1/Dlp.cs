// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Dlp.V2Beta1 {

  /// <summary>Holder for reflection information generated from google/privacy/dlp/v2beta1/dlp.proto</summary>
  public static partial class DlpReflection {

    #region Descriptor
    /// <summary>File descriptor for google/privacy/dlp/v2beta1/dlp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DlpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRnb29nbGUvcHJpdmFjeS9kbHAvdjJiZXRhMS9kbHAucHJvdG8SGmdvb2ds",
            "ZS5wcml2YWN5LmRscC52MmJldGExGhxnb29nbGUvYXBpL2Fubm90YXRpb25z",
            "LnByb3RvGiNnb29nbGUvbG9uZ3J1bm5pbmcvb3BlcmF0aW9ucy5wcm90bxoo",
            "Z29vZ2xlL3ByaXZhY3kvZGxwL3YyYmV0YTEvc3RvcmFnZS5wcm90bxobZ29v",
            "Z2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGlt",
            "ZXN0YW1wLnByb3RvGhZnb29nbGUvdHlwZS9kYXRlLnByb3RvGhtnb29nbGUv",
            "dHlwZS90aW1lb2ZkYXkucHJvdG8igAMKDUluc3BlY3RDb25maWcSOAoKaW5m",
            "b190eXBlcxgBIAMoCzIkLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLklu",
            "Zm9UeXBlEj4KDm1pbl9saWtlbGlob29kGAIgASgOMiYuZ29vZ2xlLnByaXZh",
            "Y3kuZGxwLnYyYmV0YTEuTGlrZWxpaG9vZBIUCgxtYXhfZmluZGluZ3MYAyAB",
            "KAUSFQoNaW5jbHVkZV9xdW90ZRgEIAEoCBIVCg1leGNsdWRlX3R5cGVzGAYg",
            "ASgIElEKEGluZm9fdHlwZV9saW1pdHMYByADKAsyNy5nb29nbGUucHJpdmFj",
            "eS5kbHAudjJiZXRhMS5JbnNwZWN0Q29uZmlnLkluZm9UeXBlTGltaXQaXgoN",
            "SW5mb1R5cGVMaW1pdBI3CglpbmZvX3R5cGUYASABKAsyJC5nb29nbGUucHJp",
            "dmFjeS5kbHAudjJiZXRhMS5JbmZvVHlwZRIUCgxtYXhfZmluZGluZ3MYAiAB",
            "KAUiLAoPT3BlcmF0aW9uQ29uZmlnEhkKEW1heF9pdGVtX2ZpbmRpbmdzGAEg",
            "ASgDIn0KC0NvbnRlbnRJdGVtEgwKBHR5cGUYASABKAkSDgoEZGF0YRgCIAEo",
            "DEgAEg8KBXZhbHVlGAMgASgJSAASMgoFdGFibGUYBCABKAsyIS5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMS5UYWJsZUgAQgsKCWRhdGFfaXRlbSKsAQoF",
            "VGFibGUSNAoHaGVhZGVycxgBIAMoCzIjLmdvb2dsZS5wcml2YWN5LmRscC52",
            "MmJldGExLkZpZWxkSWQSMwoEcm93cxgCIAMoCzIlLmdvb2dsZS5wcml2YWN5",
            "LmRscC52MmJldGExLlRhYmxlLlJvdxo4CgNSb3cSMQoGdmFsdWVzGAEgAygL",
            "MiEuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuVmFsdWUiYgoNSW5zcGVj",
            "dFJlc3VsdBI1CghmaW5kaW5ncxgBIAMoCzIjLmdvb2dsZS5wcml2YWN5LmRs",
            "cC52MmJldGExLkZpbmRpbmcSGgoSZmluZGluZ3NfdHJ1bmNhdGVkGAIgASgI",
            "IvYBCgdGaW5kaW5nEg0KBXF1b3RlGAEgASgJEjcKCWluZm9fdHlwZRgCIAEo",
            "CzIkLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkluZm9UeXBlEjoKCmxp",
            "a2VsaWhvb2QYAyABKA4yJi5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5M",
            "aWtlbGlob29kEjYKCGxvY2F0aW9uGAQgASgLMiQuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTEuTG9jYXRpb24SLwoLY3JlYXRlX3RpbWUYBiABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wIvICCghMb2NhdGlvbhI1CgpieXRl",
            "X3JhbmdlGAEgASgLMiEuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuUmFu",
            "Z2USOgoPY29kZXBvaW50X3JhbmdlGAIgASgLMiEuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTEuUmFuZ2USPgoLaW1hZ2VfYm94ZXMYAyADKAsyKS5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMS5JbWFnZUxvY2F0aW9uEjkKCnJlY29y",
            "ZF9rZXkYBCABKAsyJS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5SZWNv",
            "cmRLZXkSNQoIZmllbGRfaWQYBSABKAsyIy5nb29nbGUucHJpdmFjeS5kbHAu",
            "djJiZXRhMS5GaWVsZElkEkEKDnRhYmxlX2xvY2F0aW9uGAYgASgLMikuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuVGFibGVMb2NhdGlvbiIiCg1UYWJs",
            "ZUxvY2F0aW9uEhEKCXJvd19pbmRleBgBIAEoAyIjCgVSYW5nZRINCgVzdGFy",
            "dBgBIAEoAxILCgNlbmQYAiABKAMiSQoNSW1hZ2VMb2NhdGlvbhILCgN0b3AY",
            "ASABKAUSDAoEbGVmdBgCIAEoBRINCgV3aWR0aBgDIAEoBRIOCgZoZWlnaHQY",
            "BCABKAUi5wQKFFJlZGFjdENvbnRlbnRSZXF1ZXN0EkEKDmluc3BlY3RfY29u",
            "ZmlnGAEgASgLMikuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuSW5zcGVj",
            "dENvbmZpZxI2CgVpdGVtcxgCIAMoCzInLmdvb2dsZS5wcml2YWN5LmRscC52",
            "MmJldGExLkNvbnRlbnRJdGVtElcKD3JlcGxhY2VfY29uZmlncxgDIAMoCzI+",
            "Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLlJlZGFjdENvbnRlbnRSZXF1",
            "ZXN0LlJlcGxhY2VDb25maWcSZgoXaW1hZ2VfcmVkYWN0aW9uX2NvbmZpZ3MY",
            "BCADKAsyRS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5SZWRhY3RDb250",
            "ZW50UmVxdWVzdC5JbWFnZVJlZGFjdGlvbkNvbmZpZxpeCg1SZXBsYWNlQ29u",
            "ZmlnEjcKCWluZm9fdHlwZRgBIAEoCzIkLmdvb2dsZS5wcml2YWN5LmRscC52",
            "MmJldGExLkluZm9UeXBlEhQKDHJlcGxhY2Vfd2l0aBgCIAEoCRqyAQoUSW1h",
            "Z2VSZWRhY3Rpb25Db25maWcSOQoJaW5mb190eXBlGAEgASgLMiQuZ29vZ2xl",
            "LnByaXZhY3kuZGxwLnYyYmV0YTEuSW5mb1R5cGVIABIZCg9yZWRhY3RfYWxs",
            "X3RleHQYAiABKAhIABI6Cg9yZWRhY3Rpb25fY29sb3IYAyABKAsyIS5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMS5Db2xvckIICgZ0YXJnZXQiMQoFQ29s",
            "b3ISCwoDcmVkGAEgASgCEg0KBWdyZWVuGAIgASgCEgwKBGJsdWUYAyABKAIi",
            "TwoVUmVkYWN0Q29udGVudFJlc3BvbnNlEjYKBWl0ZW1zGAEgAygLMicuZ29v",
            "Z2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuQ29udGVudEl0ZW0ikgEKFUluc3Bl",
            "Y3RDb250ZW50UmVxdWVzdBJBCg5pbnNwZWN0X2NvbmZpZxgBIAEoCzIpLmdv",
            "b2dsZS5wcml2YWN5LmRscC52MmJldGExLkluc3BlY3RDb25maWcSNgoFaXRl",
            "bXMYAiADKAsyJy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5Db250ZW50",
            "SXRlbSJUChZJbnNwZWN0Q29udGVudFJlc3BvbnNlEjoKB3Jlc3VsdHMYASAD",
            "KAsyKS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5JbnNwZWN0UmVzdWx0",
            "IrQCCh1DcmVhdGVJbnNwZWN0T3BlcmF0aW9uUmVxdWVzdBJBCg5pbnNwZWN0",
            "X2NvbmZpZxgBIAEoCzIpLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLklu",
            "c3BlY3RDb25maWcSQQoOc3RvcmFnZV9jb25maWcYAiABKAsyKS5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMS5TdG9yYWdlQ29uZmlnEkYKDW91dHB1dF9j",
            "b25maWcYAyABKAsyLy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5PdXRw",
            "dXRTdG9yYWdlQ29uZmlnEkUKEG9wZXJhdGlvbl9jb25maWcYBSABKAsyKy5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5PcGVyYXRpb25Db25maWcinwEK",
            "E091dHB1dFN0b3JhZ2VDb25maWcSOgoFdGFibGUYASABKAsyKS5nb29nbGUu",
            "cHJpdmFjeS5kbHAudjJiZXRhMS5CaWdRdWVyeVRhYmxlSAASRAoMc3RvcmFn",
            "ZV9wYXRoGAIgASgLMiwuZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTEuQ2xv",
            "dWRTdG9yYWdlUGF0aEgAQgYKBHR5cGUiXAoSSW5mb1R5cGVTdGF0aXN0aWNz",
            "EjcKCWluZm9fdHlwZRgBIAEoCzIkLmdvb2dsZS5wcml2YWN5LmRscC52MmJl",
            "dGExLkluZm9UeXBlEg0KBWNvdW50GAIgASgDIrIDChhJbnNwZWN0T3BlcmF0",
            "aW9uTWV0YWRhdGESFwoPcHJvY2Vzc2VkX2J5dGVzGAEgASgDEh0KFXRvdGFs",
            "X2VzdGltYXRlZF9ieXRlcxgEIAEoAxJHCg9pbmZvX3R5cGVfc3RhdHMYAiAD",
            "KAsyLi5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5JbmZvVHlwZVN0YXRp",
            "c3RpY3MSLwoLY3JlYXRlX3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wEkkKFnJlcXVlc3RfaW5zcGVjdF9jb25maWcYBSABKAsyKS5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5JbnNwZWN0Q29uZmlnEkkKFnJl",
            "cXVlc3Rfc3RvcmFnZV9jb25maWcYBiABKAsyKS5nb29nbGUucHJpdmFjeS5k",
            "bHAudjJiZXRhMS5TdG9yYWdlQ29uZmlnEk4KFXJlcXVlc3Rfb3V0cHV0X2Nv",
            "bmZpZxgHIAEoCzIvLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLk91dHB1",
            "dFN0b3JhZ2VDb25maWciJgoWSW5zcGVjdE9wZXJhdGlvblJlc3VsdBIMCgRu",
            "YW1lGAEgASgJImEKGkxpc3RJbnNwZWN0RmluZGluZ3NSZXF1ZXN0EgwKBG5h",
            "bWUYASABKAkSEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyAB",
            "KAkSDgoGZmlsdGVyGAQgASgJInEKG0xpc3RJbnNwZWN0RmluZGluZ3NSZXNw",
            "b25zZRI5CgZyZXN1bHQYASABKAsyKS5nb29nbGUucHJpdmFjeS5kbHAudjJi",
            "ZXRhMS5JbnNwZWN0UmVzdWx0EhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJ+",
            "ChNJbmZvVHlwZURlc2NyaXB0aW9uEgwKBG5hbWUYASABKAkSFAoMZGlzcGxh",
            "eV9uYW1lGAIgASgJEkMKCmNhdGVnb3JpZXMYAyADKAsyLy5nb29nbGUucHJp",
            "dmFjeS5kbHAudjJiZXRhMS5DYXRlZ29yeURlc2NyaXB0aW9uIj8KFExpc3RJ",
            "bmZvVHlwZXNSZXF1ZXN0EhAKCGNhdGVnb3J5GAEgASgJEhUKDWxhbmd1YWdl",
            "X2NvZGUYAiABKAkiXAoVTGlzdEluZm9UeXBlc1Jlc3BvbnNlEkMKCmluZm9f",
            "dHlwZXMYASADKAsyLy5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5JbmZv",
            "VHlwZURlc2NyaXB0aW9uIjkKE0NhdGVnb3J5RGVzY3JpcHRpb24SDAoEbmFt",
            "ZRgBIAEoCRIUCgxkaXNwbGF5X25hbWUYAiABKAkiMgoZTGlzdFJvb3RDYXRl",
            "Z29yaWVzUmVxdWVzdBIVCg1sYW5ndWFnZV9jb2RlGAEgASgJImEKGkxpc3RS",
            "b290Q2F0ZWdvcmllc1Jlc3BvbnNlEkMKCmNhdGVnb3JpZXMYASADKAsyLy5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5DYXRlZ29yeURlc2NyaXB0aW9u",
            "Iv4BCgVWYWx1ZRIXCg1pbnRlZ2VyX3ZhbHVlGAEgASgDSAASFQoLZmxvYXRf",
            "dmFsdWUYAiABKAFIABIWCgxzdHJpbmdfdmFsdWUYAyABKAlIABIXCg1ib29s",
            "ZWFuX3ZhbHVlGAQgASgISAASNQoPdGltZXN0YW1wX3ZhbHVlGAUgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgAEiwKCnRpbWVfdmFsdWUYBiAB",
            "KAsyFi5nb29nbGUudHlwZS5UaW1lT2ZEYXlIABInCgpkYXRlX3ZhbHVlGAcg",
            "ASgLMhEuZ29vZ2xlLnR5cGUuRGF0ZUgAQgYKBHR5cGUqdAoKTGlrZWxpaG9v",
            "ZBIaChZMSUtFTElIT09EX1VOU1BFQ0lGSUVEEAASEQoNVkVSWV9VTkxJS0VM",
            "WRABEgwKCFVOTElLRUxZEAISDAoIUE9TU0lCTEUQAxIKCgZMSUtFTFkQBBIP",
            "CgtWRVJZX0xJS0VMWRAFMvYHCgpEbHBTZXJ2aWNlEpwBCg5JbnNwZWN0Q29u",
            "dGVudBIxLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkluc3BlY3RDb250",
            "ZW50UmVxdWVzdBoyLmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkluc3Bl",
            "Y3RDb250ZW50UmVzcG9uc2UiI4LT5JMCHSIYL3YyYmV0YTEvY29udGVudDpp",
            "bnNwZWN0OgEqEpgBCg1SZWRhY3RDb250ZW50EjAuZ29vZ2xlLnByaXZhY3ku",
            "ZGxwLnYyYmV0YTEuUmVkYWN0Q29udGVudFJlcXVlc3QaMS5nb29nbGUucHJp",
            "dmFjeS5kbHAudjJiZXRhMS5SZWRhY3RDb250ZW50UmVzcG9uc2UiIoLT5JMC",
            "HCIXL3YyYmV0YTEvY29udGVudDpyZWRhY3Q6ASoSmgEKFkNyZWF0ZUluc3Bl",
            "Y3RPcGVyYXRpb24SOS5nb29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5DcmVh",
            "dGVJbnNwZWN0T3BlcmF0aW9uUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmlu",
            "Zy5PcGVyYXRpb24iJoLT5JMCICIbL3YyYmV0YTEvaW5zcGVjdC9vcGVyYXRp",
            "b25zOgEqEroBChNMaXN0SW5zcGVjdEZpbmRpbmdzEjYuZ29vZ2xlLnByaXZh",
            "Y3kuZGxwLnYyYmV0YTEuTGlzdEluc3BlY3RGaW5kaW5nc1JlcXVlc3QaNy5n",
            "b29nbGUucHJpdmFjeS5kbHAudjJiZXRhMS5MaXN0SW5zcGVjdEZpbmRpbmdz",
            "UmVzcG9uc2UiMoLT5JMCLBIqL3YyYmV0YTEve25hbWU9aW5zcGVjdC9yZXN1",
            "bHRzLyp9L2ZpbmRpbmdzEqwBCg1MaXN0SW5mb1R5cGVzEjAuZ29vZ2xlLnBy",
            "aXZhY3kuZGxwLnYyYmV0YTEuTGlzdEluZm9UeXBlc1JlcXVlc3QaMS5nb29n",
            "bGUucHJpdmFjeS5kbHAudjJiZXRhMS5MaXN0SW5mb1R5cGVzUmVzcG9uc2Ui",
            "NoLT5JMCMBIuL3YyYmV0YTEvcm9vdENhdGVnb3JpZXMve2NhdGVnb3J5PSp9",
            "L2luZm9UeXBlcxKkAQoSTGlzdFJvb3RDYXRlZ29yaWVzEjUuZ29vZ2xlLnBy",
            "aXZhY3kuZGxwLnYyYmV0YTEuTGlzdFJvb3RDYXRlZ29yaWVzUmVxdWVzdBo2",
            "Lmdvb2dsZS5wcml2YWN5LmRscC52MmJldGExLkxpc3RSb290Q2F0ZWdvcmll",
            "c1Jlc3BvbnNlIh+C0+STAhkSFy92MmJldGExL3Jvb3RDYXRlZ29yaWVzQoYB",
            "Ch5jb20uZ29vZ2xlLnByaXZhY3kuZGxwLnYyYmV0YTFCCERscFByb3RvUAFa",
            "PWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvcHJpdmFj",
            "eS9kbHAvdjJiZXRhMTtkbHCqAhhHb29nbGUuQ2xvdWQuRGxwLlYyQmV0YTFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Cloud.Dlp.V2Beta1.StorageReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Type.DateReflection.Descriptor, global::Google.Type.TimeofdayReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Cloud.Dlp.V2Beta1.Likelihood), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectConfig), global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Parser, new[]{ "InfoTypes", "MinLikelihood", "MaxFindings", "IncludeQuote", "ExcludeTypes", "InfoTypeLimits" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit), global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit.Parser, new[]{ "InfoType", "MaxFindings" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.OperationConfig), global::Google.Cloud.Dlp.V2Beta1.OperationConfig.Parser, new[]{ "MaxItemFindings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ContentItem), global::Google.Cloud.Dlp.V2Beta1.ContentItem.Parser, new[]{ "Type", "Data", "Value", "Table" }, new[]{ "DataItem" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Table), global::Google.Cloud.Dlp.V2Beta1.Table.Parser, new[]{ "Headers", "Rows" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row), global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row.Parser, new[]{ "Values" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectResult), global::Google.Cloud.Dlp.V2Beta1.InspectResult.Parser, new[]{ "Findings", "FindingsTruncated" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Finding), global::Google.Cloud.Dlp.V2Beta1.Finding.Parser, new[]{ "Quote", "InfoType", "Likelihood", "Location", "CreateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Location), global::Google.Cloud.Dlp.V2Beta1.Location.Parser, new[]{ "ByteRange", "CodepointRange", "ImageBoxes", "RecordKey", "FieldId", "TableLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.TableLocation), global::Google.Cloud.Dlp.V2Beta1.TableLocation.Parser, new[]{ "RowIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Range), global::Google.Cloud.Dlp.V2Beta1.Range.Parser, new[]{ "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ImageLocation), global::Google.Cloud.Dlp.V2Beta1.ImageLocation.Parser, new[]{ "Top", "Left", "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest), global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Parser, new[]{ "InspectConfig", "Items", "ReplaceConfigs", "ImageRedactionConfigs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig), global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig.Parser, new[]{ "InfoType", "ReplaceWith" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig), global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig.Parser, new[]{ "InfoType", "RedactAllText", "RedactionColor" }, new[]{ "Target" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Color), global::Google.Cloud.Dlp.V2Beta1.Color.Parser, new[]{ "Red", "Green", "Blue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.RedactContentResponse), global::Google.Cloud.Dlp.V2Beta1.RedactContentResponse.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectContentRequest), global::Google.Cloud.Dlp.V2Beta1.InspectContentRequest.Parser, new[]{ "InspectConfig", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectContentResponse), global::Google.Cloud.Dlp.V2Beta1.InspectContentResponse.Parser, new[]{ "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CreateInspectOperationRequest), global::Google.Cloud.Dlp.V2Beta1.CreateInspectOperationRequest.Parser, new[]{ "InspectConfig", "StorageConfig", "OutputConfig", "OperationConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig), global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig.Parser, new[]{ "Table", "StoragePath" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics), global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics.Parser, new[]{ "InfoType", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectOperationMetadata), global::Google.Cloud.Dlp.V2Beta1.InspectOperationMetadata.Parser, new[]{ "ProcessedBytes", "TotalEstimatedBytes", "InfoTypeStats", "CreateTime", "RequestInspectConfig", "RequestStorageConfig", "RequestOutputConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InspectOperationResult), global::Google.Cloud.Dlp.V2Beta1.InspectOperationResult.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListInspectFindingsRequest), global::Google.Cloud.Dlp.V2Beta1.ListInspectFindingsRequest.Parser, new[]{ "Name", "PageSize", "PageToken", "Filter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListInspectFindingsResponse), global::Google.Cloud.Dlp.V2Beta1.ListInspectFindingsResponse.Parser, new[]{ "Result", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription), global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription.Parser, new[]{ "Name", "DisplayName", "Categories" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListInfoTypesRequest), global::Google.Cloud.Dlp.V2Beta1.ListInfoTypesRequest.Parser, new[]{ "Category", "LanguageCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListInfoTypesResponse), global::Google.Cloud.Dlp.V2Beta1.ListInfoTypesResponse.Parser, new[]{ "InfoTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.CategoryDescription), global::Google.Cloud.Dlp.V2Beta1.CategoryDescription.Parser, new[]{ "Name", "DisplayName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListRootCategoriesRequest), global::Google.Cloud.Dlp.V2Beta1.ListRootCategoriesRequest.Parser, new[]{ "LanguageCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.ListRootCategoriesResponse), global::Google.Cloud.Dlp.V2Beta1.ListRootCategoriesResponse.Parser, new[]{ "Categories" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dlp.V2Beta1.Value), global::Google.Cloud.Dlp.V2Beta1.Value.Parser, new[]{ "IntegerValue", "FloatValue", "StringValue", "BooleanValue", "TimestampValue", "TimeValue", "DateValue" }, new[]{ "Type" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Categorization of results based on how likely they are to represent a match,
  /// based on the number of elements they contain which imply a match.
  /// </summary>
  public enum Likelihood {
    /// <summary>
    /// Default value; information with all likelihoods is included.
    /// </summary>
    [pbr::OriginalName("LIKELIHOOD_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Few matching elements.
    /// </summary>
    [pbr::OriginalName("VERY_UNLIKELY")] VeryUnlikely = 1,
    [pbr::OriginalName("UNLIKELY")] Unlikely = 2,
    /// <summary>
    /// Some matching elements.
    /// </summary>
    [pbr::OriginalName("POSSIBLE")] Possible = 3,
    [pbr::OriginalName("LIKELY")] Likely = 4,
    /// <summary>
    /// Many matching elements.
    /// </summary>
    [pbr::OriginalName("VERY_LIKELY")] VeryLikely = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Configuration description of the scanning process.
  /// When used with redactContent only info_types and min_likelihood are currently
  /// used.
  /// </summary>
  public sealed partial class InspectConfig : pb::IMessage<InspectConfig> {
    private static readonly pb::MessageParser<InspectConfig> _parser = new pb::MessageParser<InspectConfig>(() => new InspectConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectConfig(InspectConfig other) : this() {
      infoTypes_ = other.infoTypes_.Clone();
      minLikelihood_ = other.minLikelihood_;
      maxFindings_ = other.maxFindings_;
      includeQuote_ = other.includeQuote_;
      excludeTypes_ = other.excludeTypes_;
      infoTypeLimits_ = other.infoTypeLimits_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectConfig Clone() {
      return new InspectConfig(this);
    }

    /// <summary>Field number for the "info_types" field.</summary>
    public const int InfoTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InfoType> _repeated_infoTypes_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.InfoType.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoType> infoTypes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoType>();
    /// <summary>
    /// Restricts what info_types to look for. The values must correspond to
    /// InfoType values returned by ListInfoTypes or found in documentation.
    /// Empty info_types runs all enabled detectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoType> InfoTypes {
      get { return infoTypes_; }
    }

    /// <summary>Field number for the "min_likelihood" field.</summary>
    public const int MinLikelihoodFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.Likelihood minLikelihood_ = 0;
    /// <summary>
    /// Only returns findings equal or above this threshold.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Likelihood MinLikelihood {
      get { return minLikelihood_; }
      set {
        minLikelihood_ = value;
      }
    }

    /// <summary>Field number for the "max_findings" field.</summary>
    public const int MaxFindingsFieldNumber = 3;
    private int maxFindings_;
    /// <summary>
    /// Limits the number of findings per content item or long running operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFindings {
      get { return maxFindings_; }
      set {
        maxFindings_ = value;
      }
    }

    /// <summary>Field number for the "include_quote" field.</summary>
    public const int IncludeQuoteFieldNumber = 4;
    private bool includeQuote_;
    /// <summary>
    /// When true, a contextual quote from the data that triggered a finding is
    /// included in the response; see Finding.quote.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeQuote {
      get { return includeQuote_; }
      set {
        includeQuote_ = value;
      }
    }

    /// <summary>Field number for the "exclude_types" field.</summary>
    public const int ExcludeTypesFieldNumber = 6;
    private bool excludeTypes_;
    /// <summary>
    /// When true, excludes type information of the findings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExcludeTypes {
      get { return excludeTypes_; }
      set {
        excludeTypes_ = value;
      }
    }

    /// <summary>Field number for the "info_type_limits" field.</summary>
    public const int InfoTypeLimitsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit> _repeated_infoTypeLimits_codec
        = pb::FieldCodec.ForMessage(58, global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit> infoTypeLimits_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit>();
    /// <summary>
    /// Configuration of findings limit given for specified info types.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Types.InfoTypeLimit> InfoTypeLimits {
      get { return infoTypeLimits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infoTypes_.Equals(other.infoTypes_)) return false;
      if (MinLikelihood != other.MinLikelihood) return false;
      if (MaxFindings != other.MaxFindings) return false;
      if (IncludeQuote != other.IncludeQuote) return false;
      if (ExcludeTypes != other.ExcludeTypes) return false;
      if(!infoTypeLimits_.Equals(other.infoTypeLimits_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infoTypes_.GetHashCode();
      if (MinLikelihood != 0) hash ^= MinLikelihood.GetHashCode();
      if (MaxFindings != 0) hash ^= MaxFindings.GetHashCode();
      if (IncludeQuote != false) hash ^= IncludeQuote.GetHashCode();
      if (ExcludeTypes != false) hash ^= ExcludeTypes.GetHashCode();
      hash ^= infoTypeLimits_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoTypes_.WriteTo(output, _repeated_infoTypes_codec);
      if (MinLikelihood != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MinLikelihood);
      }
      if (MaxFindings != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxFindings);
      }
      if (IncludeQuote != false) {
        output.WriteRawTag(32);
        output.WriteBool(IncludeQuote);
      }
      if (ExcludeTypes != false) {
        output.WriteRawTag(48);
        output.WriteBool(ExcludeTypes);
      }
      infoTypeLimits_.WriteTo(output, _repeated_infoTypeLimits_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoTypes_.CalculateSize(_repeated_infoTypes_codec);
      if (MinLikelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MinLikelihood);
      }
      if (MaxFindings != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFindings);
      }
      if (IncludeQuote != false) {
        size += 1 + 1;
      }
      if (ExcludeTypes != false) {
        size += 1 + 1;
      }
      size += infoTypeLimits_.CalculateSize(_repeated_infoTypeLimits_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectConfig other) {
      if (other == null) {
        return;
      }
      infoTypes_.Add(other.infoTypes_);
      if (other.MinLikelihood != 0) {
        MinLikelihood = other.MinLikelihood;
      }
      if (other.MaxFindings != 0) {
        MaxFindings = other.MaxFindings;
      }
      if (other.IncludeQuote != false) {
        IncludeQuote = other.IncludeQuote;
      }
      if (other.ExcludeTypes != false) {
        ExcludeTypes = other.ExcludeTypes;
      }
      infoTypeLimits_.Add(other.infoTypeLimits_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoTypes_.AddEntriesFrom(input, _repeated_infoTypes_codec);
            break;
          }
          case 16: {
            minLikelihood_ = (global::Google.Cloud.Dlp.V2Beta1.Likelihood) input.ReadEnum();
            break;
          }
          case 24: {
            MaxFindings = input.ReadInt32();
            break;
          }
          case 32: {
            IncludeQuote = input.ReadBool();
            break;
          }
          case 48: {
            ExcludeTypes = input.ReadBool();
            break;
          }
          case 58: {
            infoTypeLimits_.AddEntriesFrom(input, _repeated_infoTypeLimits_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InspectConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Max findings configuration per info type, per content item or long running
      /// operation.
      /// </summary>
      public sealed partial class InfoTypeLimit : pb::IMessage<InfoTypeLimit> {
        private static readonly pb::MessageParser<InfoTypeLimit> _parser = new pb::MessageParser<InfoTypeLimit>(() => new InfoTypeLimit());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InfoTypeLimit> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.InspectConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeLimit() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeLimit(InfoTypeLimit other) : this() {
          InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
          maxFindings_ = other.maxFindings_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InfoTypeLimit Clone() {
          return new InfoTypeLimit(this);
        }

        /// <summary>Field number for the "info_type" field.</summary>
        public const int InfoTypeFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta1.InfoType infoType_;
        /// <summary>
        /// Type of information the findings limit applies to. Only one limit per
        /// info_type should be provided. If InfoTypeLimit does not have an
        /// info_type, the DLP API applies the limit against all info_types that are
        /// found but not specified in another InfoTypeLimit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
          get { return infoType_; }
          set {
            infoType_ = value;
          }
        }

        /// <summary>Field number for the "max_findings" field.</summary>
        public const int MaxFindingsFieldNumber = 2;
        private int maxFindings_;
        /// <summary>
        /// Max findings limit for the given infoType.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxFindings {
          get { return maxFindings_; }
          set {
            maxFindings_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InfoTypeLimit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InfoTypeLimit other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InfoType, other.InfoType)) return false;
          if (MaxFindings != other.MaxFindings) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (infoType_ != null) hash ^= InfoType.GetHashCode();
          if (MaxFindings != 0) hash ^= MaxFindings.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (infoType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(InfoType);
          }
          if (MaxFindings != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(MaxFindings);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (infoType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
          }
          if (MaxFindings != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFindings);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InfoTypeLimit other) {
          if (other == null) {
            return;
          }
          if (other.infoType_ != null) {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
            }
            InfoType.MergeFrom(other.InfoType);
          }
          if (other.MaxFindings != 0) {
            MaxFindings = other.MaxFindings;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (infoType_ == null) {
                  infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
                }
                input.ReadMessage(infoType_);
                break;
              }
              case 16: {
                MaxFindings = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Additional configuration for inspect long running operations.
  /// </summary>
  public sealed partial class OperationConfig : pb::IMessage<OperationConfig> {
    private static readonly pb::MessageParser<OperationConfig> _parser = new pb::MessageParser<OperationConfig>(() => new OperationConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperationConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationConfig(OperationConfig other) : this() {
      maxItemFindings_ = other.maxItemFindings_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationConfig Clone() {
      return new OperationConfig(this);
    }

    /// <summary>Field number for the "max_item_findings" field.</summary>
    public const int MaxItemFindingsFieldNumber = 1;
    private long maxItemFindings_;
    /// <summary>
    /// Max number of findings per file, Datastore entity, or database row.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxItemFindings {
      get { return maxItemFindings_; }
      set {
        maxItemFindings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperationConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperationConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxItemFindings != other.MaxItemFindings) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxItemFindings != 0L) hash ^= MaxItemFindings.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxItemFindings != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxItemFindings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxItemFindings != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxItemFindings);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperationConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxItemFindings != 0L) {
        MaxItemFindings = other.MaxItemFindings;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxItemFindings = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Container structure for the content to inspect.
  /// </summary>
  public sealed partial class ContentItem : pb::IMessage<ContentItem> {
    private static readonly pb::MessageParser<ContentItem> _parser = new pb::MessageParser<ContentItem>(() => new ContentItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem(ContentItem other) : this() {
      type_ = other.type_;
      switch (other.DataItemCase) {
        case DataItemOneofCase.Data:
          Data = other.Data;
          break;
        case DataItemOneofCase.Value:
          Value = other.Value;
          break;
        case DataItemOneofCase.Table:
          Table = other.Table.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentItem Clone() {
      return new ContentItem(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// Type of the content, as defined in Content-Type HTTP header.
    /// Supported types are: all "text" types, octet streams, PNG images,
    /// JPEG images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    /// <summary>
    /// Content data to inspect or redact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return dataItemCase_ == DataItemOneofCase.Data ? (pb::ByteString) dataItem_ : pb::ByteString.Empty; }
      set {
        dataItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataItemCase_ = DataItemOneofCase.Data;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    /// <summary>
    /// String data to inspect or redact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return dataItemCase_ == DataItemOneofCase.Value ? (string) dataItem_ : ""; }
      set {
        dataItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataItemCase_ = DataItemOneofCase.Value;
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 4;
    /// <summary>
    /// Structured content for inspection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Table Table {
      get { return dataItemCase_ == DataItemOneofCase.Table ? (global::Google.Cloud.Dlp.V2Beta1.Table) dataItem_ : null; }
      set {
        dataItem_ = value;
        dataItemCase_ = value == null ? DataItemOneofCase.None : DataItemOneofCase.Table;
      }
    }

    private object dataItem_;
    /// <summary>Enum of possible cases for the "data_item" oneof.</summary>
    public enum DataItemOneofCase {
      None = 0,
      Data = 2,
      Value = 3,
      Table = 4,
    }
    private DataItemOneofCase dataItemCase_ = DataItemOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataItemOneofCase DataItemCase {
      get { return dataItemCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataItem() {
      dataItemCase_ = DataItemOneofCase.None;
      dataItem_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      if (Value != other.Value) return false;
      if (!object.Equals(Table, other.Table)) return false;
      if (DataItemCase != other.DataItemCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (dataItemCase_ == DataItemOneofCase.Data) hash ^= Data.GetHashCode();
      if (dataItemCase_ == DataItemOneofCase.Value) hash ^= Value.GetHashCode();
      if (dataItemCase_ == DataItemOneofCase.Table) hash ^= Table.GetHashCode();
      hash ^= (int) dataItemCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (dataItemCase_ == DataItemOneofCase.Data) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (dataItemCase_ == DataItemOneofCase.Value) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (dataItemCase_ == DataItemOneofCase.Table) {
        output.WriteRawTag(34);
        output.WriteMessage(Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (dataItemCase_ == DataItemOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (dataItemCase_ == DataItemOneofCase.Value) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (dataItemCase_ == DataItemOneofCase.Table) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentItem other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      switch (other.DataItemCase) {
        case DataItemOneofCase.Data:
          Data = other.Data;
          break;
        case DataItemOneofCase.Value:
          Value = other.Value;
          break;
        case DataItemOneofCase.Table:
          Table = other.Table;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 34: {
            global::Google.Cloud.Dlp.V2Beta1.Table subBuilder = new global::Google.Cloud.Dlp.V2Beta1.Table();
            if (dataItemCase_ == DataItemOneofCase.Table) {
              subBuilder.MergeFrom(Table);
            }
            input.ReadMessage(subBuilder);
            Table = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Structured content to inspect. Up to 50,000 `Value`s per request allowed.
  /// </summary>
  public sealed partial class Table : pb::IMessage<Table> {
    private static readonly pb::MessageParser<Table> _parser = new pb::MessageParser<Table>(() => new Table());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Table> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table(Table other) : this() {
      headers_ = other.headers_.Clone();
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table Clone() {
      return new Table(this);
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.FieldId> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.FieldId.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> headers_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.FieldId> Headers {
      get { return headers_; }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row> rows_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Table.Types.Row> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Table);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Table other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!headers_.Equals(other.headers_)) return false;
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= headers_.GetHashCode();
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      headers_.WriteTo(output, _repeated_headers_codec);
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += headers_.CalculateSize(_repeated_headers_codec);
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Table other) {
      if (other == null) {
        return;
      }
      headers_.Add(other.headers_);
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
          case 18: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Table message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Row : pb::IMessage<Row> {
        private static readonly pb::MessageParser<Row> _parser = new pb::MessageParser<Row>(() => new Row());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Row> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.Table.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row(Row other) : this() {
          values_ = other.values_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row Clone() {
          return new Row(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.Value> _repeated_values_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.Value.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value> values_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Value> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Row);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Row other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          values_.WriteTo(output, _repeated_values_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Row other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// All the findings for a single scanned item.
  /// </summary>
  public sealed partial class InspectResult : pb::IMessage<InspectResult> {
    private static readonly pb::MessageParser<InspectResult> _parser = new pb::MessageParser<InspectResult>(() => new InspectResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectResult(InspectResult other) : this() {
      findings_ = other.findings_.Clone();
      findingsTruncated_ = other.findingsTruncated_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectResult Clone() {
      return new InspectResult(this);
    }

    /// <summary>Field number for the "findings" field.</summary>
    public const int FindingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.Finding> _repeated_findings_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.Finding.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Finding> findings_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Finding>();
    /// <summary>
    /// List of findings for an item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.Finding> Findings {
      get { return findings_; }
    }

    /// <summary>Field number for the "findings_truncated" field.</summary>
    public const int FindingsTruncatedFieldNumber = 2;
    private bool findingsTruncated_;
    /// <summary>
    /// If true, then this item might have more findings than were returned,
    /// and the findings returned are an arbitrary subset of all findings.
    /// The findings list might be truncated because the input items were too
    /// large, or because the server reached the maximum amount of resources
    /// allowed for a single API call. For best results, divide the input into
    /// smaller batches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FindingsTruncated {
      get { return findingsTruncated_; }
      set {
        findingsTruncated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!findings_.Equals(other.findings_)) return false;
      if (FindingsTruncated != other.FindingsTruncated) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= findings_.GetHashCode();
      if (FindingsTruncated != false) hash ^= FindingsTruncated.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      findings_.WriteTo(output, _repeated_findings_codec);
      if (FindingsTruncated != false) {
        output.WriteRawTag(16);
        output.WriteBool(FindingsTruncated);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += findings_.CalculateSize(_repeated_findings_codec);
      if (FindingsTruncated != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectResult other) {
      if (other == null) {
        return;
      }
      findings_.Add(other.findings_);
      if (other.FindingsTruncated != false) {
        FindingsTruncated = other.FindingsTruncated;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            findings_.AddEntriesFrom(input, _repeated_findings_codec);
            break;
          }
          case 16: {
            FindingsTruncated = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Container structure describing a single finding within a string or image.
  /// </summary>
  public sealed partial class Finding : pb::IMessage<Finding> {
    private static readonly pb::MessageParser<Finding> _parser = new pb::MessageParser<Finding>(() => new Finding());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Finding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finding(Finding other) : this() {
      quote_ = other.quote_;
      InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
      likelihood_ = other.likelihood_;
      Location = other.location_ != null ? other.Location.Clone() : null;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finding Clone() {
      return new Finding(this);
    }

    /// <summary>Field number for the "quote" field.</summary>
    public const int QuoteFieldNumber = 1;
    private string quote_ = "";
    /// <summary>
    /// The specific string that may be potentially sensitive info.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Quote {
      get { return quote_; }
      set {
        quote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info_type" field.</summary>
    public const int InfoTypeFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.InfoType infoType_;
    /// <summary>
    /// The specific type of info the string might be.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "likelihood" field.</summary>
    public const int LikelihoodFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta1.Likelihood likelihood_ = 0;
    /// <summary>
    /// Estimate of how likely it is that the info_type is correct.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Likelihood Likelihood {
      get { return likelihood_; }
      set {
        likelihood_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 4;
    private global::Google.Cloud.Dlp.V2Beta1.Location location_;
    /// <summary>
    /// Location of the info found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Timestamp when finding was detected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Finding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Finding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Quote != other.Quote) return false;
      if (!object.Equals(InfoType, other.InfoType)) return false;
      if (Likelihood != other.Likelihood) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Quote.Length != 0) hash ^= Quote.GetHashCode();
      if (infoType_ != null) hash ^= InfoType.GetHashCode();
      if (Likelihood != 0) hash ^= Likelihood.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Quote.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Quote);
      }
      if (infoType_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InfoType);
      }
      if (Likelihood != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Likelihood);
      }
      if (location_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Location);
      }
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Quote.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Quote);
      }
      if (infoType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
      }
      if (Likelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Likelihood);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Finding other) {
      if (other == null) {
        return;
      }
      if (other.Quote.Length != 0) {
        Quote = other.Quote;
      }
      if (other.infoType_ != null) {
        if (infoType_ == null) {
          infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
        }
        InfoType.MergeFrom(other.InfoType);
      }
      if (other.Likelihood != 0) {
        Likelihood = other.Likelihood;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Google.Cloud.Dlp.V2Beta1.Location();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Quote = input.ReadString();
            break;
          }
          case 18: {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
            }
            input.ReadMessage(infoType_);
            break;
          }
          case 24: {
            likelihood_ = (global::Google.Cloud.Dlp.V2Beta1.Likelihood) input.ReadEnum();
            break;
          }
          case 34: {
            if (location_ == null) {
              location_ = new global::Google.Cloud.Dlp.V2Beta1.Location();
            }
            input.ReadMessage(location_);
            break;
          }
          case 50: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Specifies the location of a finding within its source item.
  /// </summary>
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      ByteRange = other.byteRange_ != null ? other.ByteRange.Clone() : null;
      CodepointRange = other.codepointRange_ != null ? other.CodepointRange.Clone() : null;
      imageBoxes_ = other.imageBoxes_.Clone();
      RecordKey = other.recordKey_ != null ? other.RecordKey.Clone() : null;
      FieldId = other.fieldId_ != null ? other.FieldId.Clone() : null;
      TableLocation = other.tableLocation_ != null ? other.TableLocation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "byte_range" field.</summary>
    public const int ByteRangeFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.Range byteRange_;
    /// <summary>
    /// Zero-based byte offsets within a content item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Range ByteRange {
      get { return byteRange_; }
      set {
        byteRange_ = value;
      }
    }

    /// <summary>Field number for the "codepoint_range" field.</summary>
    public const int CodepointRangeFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.Range codepointRange_;
    /// <summary>
    /// Character offsets within a content item, included when content type
    /// is a text. Default charset assumed to be UTF-8.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.Range CodepointRange {
      get { return codepointRange_; }
      set {
        codepointRange_ = value;
      }
    }

    /// <summary>Field number for the "image_boxes" field.</summary>
    public const int ImageBoxesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ImageLocation> _repeated_imageBoxes_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta1.ImageLocation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ImageLocation> imageBoxes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ImageLocation>();
    /// <summary>
    /// Location within an image's pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ImageLocation> ImageBoxes {
      get { return imageBoxes_; }
    }

    /// <summary>Field number for the "record_key" field.</summary>
    public const int RecordKeyFieldNumber = 4;
    private global::Google.Cloud.Dlp.V2Beta1.RecordKey recordKey_;
    /// <summary>
    /// Key of the finding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.RecordKey RecordKey {
      get { return recordKey_; }
      set {
        recordKey_ = value;
      }
    }

    /// <summary>Field number for the "field_id" field.</summary>
    public const int FieldIdFieldNumber = 5;
    private global::Google.Cloud.Dlp.V2Beta1.FieldId fieldId_;
    /// <summary>
    /// Field id of the field containing the finding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.FieldId FieldId {
      get { return fieldId_; }
      set {
        fieldId_ = value;
      }
    }

    /// <summary>Field number for the "table_location" field.</summary>
    public const int TableLocationFieldNumber = 6;
    private global::Google.Cloud.Dlp.V2Beta1.TableLocation tableLocation_;
    /// <summary>
    /// Location within a `ContentItem.Table`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.TableLocation TableLocation {
      get { return tableLocation_; }
      set {
        tableLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ByteRange, other.ByteRange)) return false;
      if (!object.Equals(CodepointRange, other.CodepointRange)) return false;
      if(!imageBoxes_.Equals(other.imageBoxes_)) return false;
      if (!object.Equals(RecordKey, other.RecordKey)) return false;
      if (!object.Equals(FieldId, other.FieldId)) return false;
      if (!object.Equals(TableLocation, other.TableLocation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (byteRange_ != null) hash ^= ByteRange.GetHashCode();
      if (codepointRange_ != null) hash ^= CodepointRange.GetHashCode();
      hash ^= imageBoxes_.GetHashCode();
      if (recordKey_ != null) hash ^= RecordKey.GetHashCode();
      if (fieldId_ != null) hash ^= FieldId.GetHashCode();
      if (tableLocation_ != null) hash ^= TableLocation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (byteRange_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ByteRange);
      }
      if (codepointRange_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CodepointRange);
      }
      imageBoxes_.WriteTo(output, _repeated_imageBoxes_codec);
      if (recordKey_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RecordKey);
      }
      if (fieldId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FieldId);
      }
      if (tableLocation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TableLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (byteRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ByteRange);
      }
      if (codepointRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CodepointRange);
      }
      size += imageBoxes_.CalculateSize(_repeated_imageBoxes_codec);
      if (recordKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordKey);
      }
      if (fieldId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldId);
      }
      if (tableLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableLocation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.byteRange_ != null) {
        if (byteRange_ == null) {
          byteRange_ = new global::Google.Cloud.Dlp.V2Beta1.Range();
        }
        ByteRange.MergeFrom(other.ByteRange);
      }
      if (other.codepointRange_ != null) {
        if (codepointRange_ == null) {
          codepointRange_ = new global::Google.Cloud.Dlp.V2Beta1.Range();
        }
        CodepointRange.MergeFrom(other.CodepointRange);
      }
      imageBoxes_.Add(other.imageBoxes_);
      if (other.recordKey_ != null) {
        if (recordKey_ == null) {
          recordKey_ = new global::Google.Cloud.Dlp.V2Beta1.RecordKey();
        }
        RecordKey.MergeFrom(other.RecordKey);
      }
      if (other.fieldId_ != null) {
        if (fieldId_ == null) {
          fieldId_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
        }
        FieldId.MergeFrom(other.FieldId);
      }
      if (other.tableLocation_ != null) {
        if (tableLocation_ == null) {
          tableLocation_ = new global::Google.Cloud.Dlp.V2Beta1.TableLocation();
        }
        TableLocation.MergeFrom(other.TableLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (byteRange_ == null) {
              byteRange_ = new global::Google.Cloud.Dlp.V2Beta1.Range();
            }
            input.ReadMessage(byteRange_);
            break;
          }
          case 18: {
            if (codepointRange_ == null) {
              codepointRange_ = new global::Google.Cloud.Dlp.V2Beta1.Range();
            }
            input.ReadMessage(codepointRange_);
            break;
          }
          case 26: {
            imageBoxes_.AddEntriesFrom(input, _repeated_imageBoxes_codec);
            break;
          }
          case 34: {
            if (recordKey_ == null) {
              recordKey_ = new global::Google.Cloud.Dlp.V2Beta1.RecordKey();
            }
            input.ReadMessage(recordKey_);
            break;
          }
          case 42: {
            if (fieldId_ == null) {
              fieldId_ = new global::Google.Cloud.Dlp.V2Beta1.FieldId();
            }
            input.ReadMessage(fieldId_);
            break;
          }
          case 50: {
            if (tableLocation_ == null) {
              tableLocation_ = new global::Google.Cloud.Dlp.V2Beta1.TableLocation();
            }
            input.ReadMessage(tableLocation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Location of a finding within a `ContentItem.Table`.
  /// </summary>
  public sealed partial class TableLocation : pb::IMessage<TableLocation> {
    private static readonly pb::MessageParser<TableLocation> _parser = new pb::MessageParser<TableLocation>(() => new TableLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableLocation(TableLocation other) : this() {
      rowIndex_ = other.rowIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableLocation Clone() {
      return new TableLocation(this);
    }

    /// <summary>Field number for the "row_index" field.</summary>
    public const int RowIndexFieldNumber = 1;
    private long rowIndex_;
    /// <summary>
    /// The zero-based index of the row where the finding is located.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RowIndex {
      get { return rowIndex_; }
      set {
        rowIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowIndex != other.RowIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowIndex != 0L) hash ^= RowIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowIndex != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RowIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RowIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableLocation other) {
      if (other == null) {
        return;
      }
      if (other.RowIndex != 0L) {
        RowIndex = other.RowIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RowIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Generic half-open interval [start, end)
  /// </summary>
  public sealed partial class Range : pb::IMessage<Range> {
    private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Range> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range(Range other) : this() {
      start_ = other.start_;
      end_ = other.end_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Range Clone() {
      return new Range(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private long start_;
    /// <summary>
    /// Index of the first character of the range (inclusive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private long end_;
    /// <summary>
    /// Index of the last character of the range (exclusive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Range);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Range other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Range other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt64();
            break;
          }
          case 16: {
            End = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Bounding box encompassing detected text within an image.
  /// </summary>
  public sealed partial class ImageLocation : pb::IMessage<ImageLocation> {
    private static readonly pb::MessageParser<ImageLocation> _parser = new pb::MessageParser<ImageLocation>(() => new ImageLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageLocation(ImageLocation other) : this() {
      top_ = other.top_;
      left_ = other.left_;
      width_ = other.width_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageLocation Clone() {
      return new ImageLocation(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private int top_;
    /// <summary>
    /// Top coordinate of the bounding box. (0,0) is upper left.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 2;
    private int left_;
    /// <summary>
    /// Left coordinate of the bounding box. (0,0) is upper left.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    /// <summary>
    /// Width of the bounding box in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    /// <summary>
    /// Height of the bounding box in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Top != other.Top) return false;
      if (Left != other.Left) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Top != 0) hash ^= Top.GetHashCode();
      if (Left != 0) hash ^= Left.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Top != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Top);
      }
      if (Left != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Left);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Top != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Top);
      }
      if (Left != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Left);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageLocation other) {
      if (other == null) {
        return;
      }
      if (other.Top != 0) {
        Top = other.Top;
      }
      if (other.Left != 0) {
        Left = other.Left;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Top = input.ReadInt32();
            break;
          }
          case 16: {
            Left = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to search for potentially sensitive info in a list of items
  /// and replace it with a default or provided content.
  /// </summary>
  public sealed partial class RedactContentRequest : pb::IMessage<RedactContentRequest> {
    private static readonly pb::MessageParser<RedactContentRequest> _parser = new pb::MessageParser<RedactContentRequest>(() => new RedactContentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedactContentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentRequest(RedactContentRequest other) : this() {
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      items_ = other.items_.Clone();
      replaceConfigs_ = other.replaceConfigs_.Clone();
      imageRedactionConfigs_ = other.imageRedactionConfigs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentRequest Clone() {
      return new RedactContentRequest(this);
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InspectConfig inspectConfig_;
    /// <summary>
    /// Configuration for the inspector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ContentItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.ContentItem.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> items_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem>();
    /// <summary>
    /// The list of items to inspect. Up to 100 are allowed per request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "replace_configs" field.</summary>
    public const int ReplaceConfigsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig> _repeated_replaceConfigs_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig> replaceConfigs_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig>();
    /// <summary>
    /// The strings to replace findings text findings with. Must specify at least
    /// one of these or one ImageRedactionConfig if redacting images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ReplaceConfig> ReplaceConfigs {
      get { return replaceConfigs_; }
    }

    /// <summary>Field number for the "image_redaction_configs" field.</summary>
    public const int ImageRedactionConfigsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig> _repeated_imageRedactionConfigs_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig> imageRedactionConfigs_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig>();
    /// <summary>
    /// The configuration for specifying what content to redact from images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Types.ImageRedactionConfig> ImageRedactionConfigs {
      get { return imageRedactionConfigs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedactContentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedactContentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if(!items_.Equals(other.items_)) return false;
      if(!replaceConfigs_.Equals(other.replaceConfigs_)) return false;
      if(!imageRedactionConfigs_.Equals(other.imageRedactionConfigs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      hash ^= items_.GetHashCode();
      hash ^= replaceConfigs_.GetHashCode();
      hash ^= imageRedactionConfigs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (inspectConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InspectConfig);
      }
      items_.WriteTo(output, _repeated_items_codec);
      replaceConfigs_.WriteTo(output, _repeated_replaceConfigs_codec);
      imageRedactionConfigs_.WriteTo(output, _repeated_imageRedactionConfigs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      size += replaceConfigs_.CalculateSize(_repeated_replaceConfigs_codec);
      size += imageRedactionConfigs_.CalculateSize(_repeated_imageRedactionConfigs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedactContentRequest other) {
      if (other == null) {
        return;
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      items_.Add(other.items_);
      replaceConfigs_.Add(other.replaceConfigs_);
      imageRedactionConfigs_.Add(other.imageRedactionConfigs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 26: {
            replaceConfigs_.AddEntriesFrom(input, _repeated_replaceConfigs_codec);
            break;
          }
          case 34: {
            imageRedactionConfigs_.AddEntriesFrom(input, _repeated_imageRedactionConfigs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RedactContentRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ReplaceConfig : pb::IMessage<ReplaceConfig> {
        private static readonly pb::MessageParser<ReplaceConfig> _parser = new pb::MessageParser<ReplaceConfig>(() => new ReplaceConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReplaceConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplaceConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplaceConfig(ReplaceConfig other) : this() {
          InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
          replaceWith_ = other.replaceWith_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplaceConfig Clone() {
          return new ReplaceConfig(this);
        }

        /// <summary>Field number for the "info_type" field.</summary>
        public const int InfoTypeFieldNumber = 1;
        private global::Google.Cloud.Dlp.V2Beta1.InfoType infoType_;
        /// <summary>
        /// Type of information to replace. Only one ReplaceConfig per info_type
        /// should be provided. If ReplaceConfig does not have an info_type, the DLP
        /// API matches it against all info_types that are found but not specified in
        /// another ReplaceConfig.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
          get { return infoType_; }
          set {
            infoType_ = value;
          }
        }

        /// <summary>Field number for the "replace_with" field.</summary>
        public const int ReplaceWithFieldNumber = 2;
        private string replaceWith_ = "";
        /// <summary>
        /// Content replacing sensitive information of given type. Max 256 chars.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReplaceWith {
          get { return replaceWith_; }
          set {
            replaceWith_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ReplaceConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReplaceConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InfoType, other.InfoType)) return false;
          if (ReplaceWith != other.ReplaceWith) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (infoType_ != null) hash ^= InfoType.GetHashCode();
          if (ReplaceWith.Length != 0) hash ^= ReplaceWith.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (infoType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(InfoType);
          }
          if (ReplaceWith.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ReplaceWith);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (infoType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
          }
          if (ReplaceWith.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplaceWith);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReplaceConfig other) {
          if (other == null) {
            return;
          }
          if (other.infoType_ != null) {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
            }
            InfoType.MergeFrom(other.InfoType);
          }
          if (other.ReplaceWith.Length != 0) {
            ReplaceWith = other.ReplaceWith;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (infoType_ == null) {
                  infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
                }
                input.ReadMessage(infoType_);
                break;
              }
              case 18: {
                ReplaceWith = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Configuration for determing how redaction of images should occur.
      /// </summary>
      public sealed partial class ImageRedactionConfig : pb::IMessage<ImageRedactionConfig> {
        private static readonly pb::MessageParser<ImageRedactionConfig> _parser = new pb::MessageParser<ImageRedactionConfig>(() => new ImageRedactionConfig());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageRedactionConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Dlp.V2Beta1.RedactContentRequest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRedactionConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRedactionConfig(ImageRedactionConfig other) : this() {
          RedactionColor = other.redactionColor_ != null ? other.RedactionColor.Clone() : null;
          switch (other.TargetCase) {
            case TargetOneofCase.InfoType:
              InfoType = other.InfoType.Clone();
              break;
            case TargetOneofCase.RedactAllText:
              RedactAllText = other.RedactAllText;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRedactionConfig Clone() {
          return new ImageRedactionConfig(this);
        }

        /// <summary>Field number for the "info_type" field.</summary>
        public const int InfoTypeFieldNumber = 1;
        /// <summary>
        /// Only one per info_type should be provided per request. If not
        /// specified, and redact_all_text is false, the DLP API will redact all
        /// text that it matches against all info_types that are found, but not
        /// specified in another ImageRedactionConfig.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
          get { return targetCase_ == TargetOneofCase.InfoType ? (global::Google.Cloud.Dlp.V2Beta1.InfoType) target_ : null; }
          set {
            target_ = value;
            targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.InfoType;
          }
        }

        /// <summary>Field number for the "redact_all_text" field.</summary>
        public const int RedactAllTextFieldNumber = 2;
        /// <summary>
        /// If true, all text found in the image, regardless whether it matches an
        /// info_type, is redacted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RedactAllText {
          get { return targetCase_ == TargetOneofCase.RedactAllText ? (bool) target_ : false; }
          set {
            target_ = value;
            targetCase_ = TargetOneofCase.RedactAllText;
          }
        }

        /// <summary>Field number for the "redaction_color" field.</summary>
        public const int RedactionColorFieldNumber = 3;
        private global::Google.Cloud.Dlp.V2Beta1.Color redactionColor_;
        /// <summary>
        /// The color to use when redacting content from an image. If not specified,
        /// the default is black.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Dlp.V2Beta1.Color RedactionColor {
          get { return redactionColor_; }
          set {
            redactionColor_ = value;
          }
        }

        private object target_;
        /// <summary>Enum of possible cases for the "target" oneof.</summary>
        public enum TargetOneofCase {
          None = 0,
          InfoType = 1,
          RedactAllText = 2,
        }
        private TargetOneofCase targetCase_ = TargetOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetOneofCase TargetCase {
          get { return targetCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTarget() {
          targetCase_ = TargetOneofCase.None;
          target_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageRedactionConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageRedactionConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InfoType, other.InfoType)) return false;
          if (RedactAllText != other.RedactAllText) return false;
          if (!object.Equals(RedactionColor, other.RedactionColor)) return false;
          if (TargetCase != other.TargetCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (targetCase_ == TargetOneofCase.InfoType) hash ^= InfoType.GetHashCode();
          if (targetCase_ == TargetOneofCase.RedactAllText) hash ^= RedactAllText.GetHashCode();
          if (redactionColor_ != null) hash ^= RedactionColor.GetHashCode();
          hash ^= (int) targetCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (targetCase_ == TargetOneofCase.InfoType) {
            output.WriteRawTag(10);
            output.WriteMessage(InfoType);
          }
          if (targetCase_ == TargetOneofCase.RedactAllText) {
            output.WriteRawTag(16);
            output.WriteBool(RedactAllText);
          }
          if (redactionColor_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(RedactionColor);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (targetCase_ == TargetOneofCase.InfoType) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
          }
          if (targetCase_ == TargetOneofCase.RedactAllText) {
            size += 1 + 1;
          }
          if (redactionColor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedactionColor);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageRedactionConfig other) {
          if (other == null) {
            return;
          }
          if (other.redactionColor_ != null) {
            if (redactionColor_ == null) {
              redactionColor_ = new global::Google.Cloud.Dlp.V2Beta1.Color();
            }
            RedactionColor.MergeFrom(other.RedactionColor);
          }
          switch (other.TargetCase) {
            case TargetOneofCase.InfoType:
              InfoType = other.InfoType;
              break;
            case TargetOneofCase.RedactAllText:
              RedactAllText = other.RedactAllText;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                global::Google.Cloud.Dlp.V2Beta1.InfoType subBuilder = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
                if (targetCase_ == TargetOneofCase.InfoType) {
                  subBuilder.MergeFrom(InfoType);
                }
                input.ReadMessage(subBuilder);
                InfoType = subBuilder;
                break;
              }
              case 16: {
                RedactAllText = input.ReadBool();
                break;
              }
              case 26: {
                if (redactionColor_ == null) {
                  redactionColor_ = new global::Google.Cloud.Dlp.V2Beta1.Color();
                }
                input.ReadMessage(redactionColor_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Represents a color in the RGB color space.
  /// </summary>
  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 1;
    private float red_;
    /// <summary>
    /// The amount of red in the color as a value in the interval [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 2;
    private float green_;
    /// <summary>
    /// The amount of green in the color as a value in the interval [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 3;
    private float blue_;
    /// <summary>
    /// The amount of blue in the color as a value in the interval [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Red != other.Red) return false;
      if (Green != other.Green) return false;
      if (Blue != other.Blue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Red != 0F) hash ^= Red.GetHashCode();
      if (Green != 0F) hash ^= Green.GetHashCode();
      if (Blue != 0F) hash ^= Blue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Red != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Red);
      }
      if (Green != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Green);
      }
      if (Blue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Blue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Red != 0F) {
        size += 1 + 4;
      }
      if (Green != 0F) {
        size += 1 + 4;
      }
      if (Blue != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.Red != 0F) {
        Red = other.Red;
      }
      if (other.Green != 0F) {
        Green = other.Green;
      }
      if (other.Blue != 0F) {
        Blue = other.Blue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Red = input.ReadFloat();
            break;
          }
          case 21: {
            Green = input.ReadFloat();
            break;
          }
          case 29: {
            Blue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Results of redacting a list of items.
  /// </summary>
  public sealed partial class RedactContentResponse : pb::IMessage<RedactContentResponse> {
    private static readonly pb::MessageParser<RedactContentResponse> _parser = new pb::MessageParser<RedactContentResponse>(() => new RedactContentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedactContentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentResponse(RedactContentResponse other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedactContentResponse Clone() {
      return new RedactContentResponse(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ContentItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.ContentItem.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> items_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem>();
    /// <summary>
    /// The redacted content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedactContentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedactContentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedactContentResponse other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to search for potentially sensitive info in a list of items.
  /// </summary>
  public sealed partial class InspectContentRequest : pb::IMessage<InspectContentRequest> {
    private static readonly pb::MessageParser<InspectContentRequest> _parser = new pb::MessageParser<InspectContentRequest>(() => new InspectContentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectContentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentRequest(InspectContentRequest other) : this() {
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentRequest Clone() {
      return new InspectContentRequest(this);
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InspectConfig inspectConfig_;
    /// <summary>
    /// Configuration for the inspector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.ContentItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.ContentItem.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> items_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem>();
    /// <summary>
    /// The list of items to inspect. Items in a single request are
    /// considered "related" unless inspect_config.independent_inputs is true.
    /// Up to 100 are allowed per request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.ContentItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectContentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectContentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (inspectConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InspectConfig);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectContentRequest other) {
      if (other == null) {
        return;
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Results of inspecting a list of items.
  /// </summary>
  public sealed partial class InspectContentResponse : pb::IMessage<InspectContentResponse> {
    private static readonly pb::MessageParser<InspectContentResponse> _parser = new pb::MessageParser<InspectContentResponse>(() => new InspectContentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectContentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentResponse(InspectContentResponse other) : this() {
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectContentResponse Clone() {
      return new InspectContentResponse(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InspectResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.InspectResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectResult> results_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectResult>();
    /// <summary>
    /// Each content_item from the request has a result in this list, in the
    /// same order as the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InspectResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectContentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectContentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectContentResponse other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for scheduling a scan of a data subset from a Google Platform data
  /// repository.
  /// </summary>
  public sealed partial class CreateInspectOperationRequest : pb::IMessage<CreateInspectOperationRequest> {
    private static readonly pb::MessageParser<CreateInspectOperationRequest> _parser = new pb::MessageParser<CreateInspectOperationRequest>(() => new CreateInspectOperationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInspectOperationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInspectOperationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInspectOperationRequest(CreateInspectOperationRequest other) : this() {
      InspectConfig = other.inspectConfig_ != null ? other.InspectConfig.Clone() : null;
      StorageConfig = other.storageConfig_ != null ? other.StorageConfig.Clone() : null;
      OutputConfig = other.outputConfig_ != null ? other.OutputConfig.Clone() : null;
      OperationConfig = other.operationConfig_ != null ? other.OperationConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInspectOperationRequest Clone() {
      return new CreateInspectOperationRequest(this);
    }

    /// <summary>Field number for the "inspect_config" field.</summary>
    public const int InspectConfigFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InspectConfig inspectConfig_;
    /// <summary>
    /// Configuration for the inspector.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InspectConfig InspectConfig {
      get { return inspectConfig_; }
      set {
        inspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "storage_config" field.</summary>
    public const int StorageConfigFieldNumber = 2;
    private global::Google.Cloud.Dlp.V2Beta1.StorageConfig storageConfig_;
    /// <summary>
    /// Specification of the data set to process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.StorageConfig StorageConfig {
      get { return storageConfig_; }
      set {
        storageConfig_ = value;
      }
    }

    /// <summary>Field number for the "output_config" field.</summary>
    public const int OutputConfigFieldNumber = 3;
    private global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig outputConfig_;
    /// <summary>
    /// Optional location to store findings. The bucket must already exist and
    /// the Google APIs service account for DLP must have write permission to
    /// write to the given bucket.
    /// &lt;p>Results are split over multiple csv files with each file name matching
    /// the pattern "[operation_id]_[count].csv", for example
    /// `3094877188788974909_1.csv`. The `operation_id` matches the
    /// identifier for the Operation, and the `count` is a counter used for
    /// tracking the number of files written. &lt;p>The CSV file(s) contain the
    /// following columns regardless of storage type scanned: &lt;li>id &lt;li>info_type
    /// &lt;li>likelihood &lt;li>byte size of finding &lt;li>quote &lt;li>timestamp&lt;br/>
    /// &lt;p>For Cloud Storage the next columns are: &lt;li>file_path
    /// &lt;li>start_offset&lt;br/>
    /// &lt;p>For Cloud Datastore the next columns are: &lt;li>project_id
    /// &lt;li>namespace_id &lt;li>path &lt;li>column_name &lt;li>offset&lt;br/>
    /// &lt;p>For BigQuery the next columns are: &lt;li>row_number &lt;li>project_id
    /// &lt;li>dataset_id &lt;li>table_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig OutputConfig {
      get { return outputConfig_; }
      set {
        outputConfig_ = value;
      }
    }

    /// <summary>Field number for the "operation_config" field.</summary>
    public const int OperationConfigFieldNumber = 5;
    private global::Google.Cloud.Dlp.V2Beta1.OperationConfig operationConfig_;
    /// <summary>
    /// Additional configuration settings for long running operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.OperationConfig OperationConfig {
      get { return operationConfig_; }
      set {
        operationConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInspectOperationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInspectOperationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InspectConfig, other.InspectConfig)) return false;
      if (!object.Equals(StorageConfig, other.StorageConfig)) return false;
      if (!object.Equals(OutputConfig, other.OutputConfig)) return false;
      if (!object.Equals(OperationConfig, other.OperationConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inspectConfig_ != null) hash ^= InspectConfig.GetHashCode();
      if (storageConfig_ != null) hash ^= StorageConfig.GetHashCode();
      if (outputConfig_ != null) hash ^= OutputConfig.GetHashCode();
      if (operationConfig_ != null) hash ^= OperationConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (inspectConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InspectConfig);
      }
      if (storageConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StorageConfig);
      }
      if (outputConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OutputConfig);
      }
      if (operationConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(OperationConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InspectConfig);
      }
      if (storageConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorageConfig);
      }
      if (outputConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputConfig);
      }
      if (operationConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OperationConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInspectOperationRequest other) {
      if (other == null) {
        return;
      }
      if (other.inspectConfig_ != null) {
        if (inspectConfig_ == null) {
          inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
        }
        InspectConfig.MergeFrom(other.InspectConfig);
      }
      if (other.storageConfig_ != null) {
        if (storageConfig_ == null) {
          storageConfig_ = new global::Google.Cloud.Dlp.V2Beta1.StorageConfig();
        }
        StorageConfig.MergeFrom(other.StorageConfig);
      }
      if (other.outputConfig_ != null) {
        if (outputConfig_ == null) {
          outputConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig();
        }
        OutputConfig.MergeFrom(other.OutputConfig);
      }
      if (other.operationConfig_ != null) {
        if (operationConfig_ == null) {
          operationConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OperationConfig();
        }
        OperationConfig.MergeFrom(other.OperationConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (inspectConfig_ == null) {
              inspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
            }
            input.ReadMessage(inspectConfig_);
            break;
          }
          case 18: {
            if (storageConfig_ == null) {
              storageConfig_ = new global::Google.Cloud.Dlp.V2Beta1.StorageConfig();
            }
            input.ReadMessage(storageConfig_);
            break;
          }
          case 26: {
            if (outputConfig_ == null) {
              outputConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig();
            }
            input.ReadMessage(outputConfig_);
            break;
          }
          case 42: {
            if (operationConfig_ == null) {
              operationConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OperationConfig();
            }
            input.ReadMessage(operationConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cloud repository for storing output.
  /// </summary>
  public sealed partial class OutputStorageConfig : pb::IMessage<OutputStorageConfig> {
    private static readonly pb::MessageParser<OutputStorageConfig> _parser = new pb::MessageParser<OutputStorageConfig>(() => new OutputStorageConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputStorageConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputStorageConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputStorageConfig(OutputStorageConfig other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Table:
          Table = other.Table.Clone();
          break;
        case TypeOneofCase.StoragePath:
          StoragePath = other.StoragePath.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputStorageConfig Clone() {
      return new OutputStorageConfig(this);
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 1;
    /// <summary>
    /// Store findings in a new table in the dataset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.BigQueryTable Table {
      get { return typeCase_ == TypeOneofCase.Table ? (global::Google.Cloud.Dlp.V2Beta1.BigQueryTable) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Table;
      }
    }

    /// <summary>Field number for the "storage_path" field.</summary>
    public const int StoragePathFieldNumber = 2;
    /// <summary>
    /// The path to a Google Cloud Storage location to store output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.CloudStoragePath StoragePath {
      get { return typeCase_ == TypeOneofCase.StoragePath ? (global::Google.Cloud.Dlp.V2Beta1.CloudStoragePath) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.StoragePath;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Table = 1,
      StoragePath = 2,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputStorageConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputStorageConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Table, other.Table)) return false;
      if (!object.Equals(StoragePath, other.StoragePath)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Table) hash ^= Table.GetHashCode();
      if (typeCase_ == TypeOneofCase.StoragePath) hash ^= StoragePath.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Table) {
        output.WriteRawTag(10);
        output.WriteMessage(Table);
      }
      if (typeCase_ == TypeOneofCase.StoragePath) {
        output.WriteRawTag(18);
        output.WriteMessage(StoragePath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Table) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      if (typeCase_ == TypeOneofCase.StoragePath) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StoragePath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputStorageConfig other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Table:
          Table = other.Table;
          break;
        case TypeOneofCase.StoragePath:
          StoragePath = other.StoragePath;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Dlp.V2Beta1.BigQueryTable subBuilder = new global::Google.Cloud.Dlp.V2Beta1.BigQueryTable();
            if (typeCase_ == TypeOneofCase.Table) {
              subBuilder.MergeFrom(Table);
            }
            input.ReadMessage(subBuilder);
            Table = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Dlp.V2Beta1.CloudStoragePath subBuilder = new global::Google.Cloud.Dlp.V2Beta1.CloudStoragePath();
            if (typeCase_ == TypeOneofCase.StoragePath) {
              subBuilder.MergeFrom(StoragePath);
            }
            input.ReadMessage(subBuilder);
            StoragePath = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Statistics regarding a specific InfoType.
  /// </summary>
  public sealed partial class InfoTypeStatistics : pb::IMessage<InfoTypeStatistics> {
    private static readonly pb::MessageParser<InfoTypeStatistics> _parser = new pb::MessageParser<InfoTypeStatistics>(() => new InfoTypeStatistics());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoTypeStatistics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeStatistics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeStatistics(InfoTypeStatistics other) : this() {
      InfoType = other.infoType_ != null ? other.InfoType.Clone() : null;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeStatistics Clone() {
      return new InfoTypeStatistics(this);
    }

    /// <summary>Field number for the "info_type" field.</summary>
    public const int InfoTypeFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InfoType infoType_;
    /// <summary>
    /// The type of finding this stat is for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InfoType InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    /// <summary>
    /// Number of findings for this info type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoTypeStatistics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoTypeStatistics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InfoType, other.InfoType)) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (infoType_ != null) hash ^= InfoType.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infoType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoType);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infoType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoType);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoTypeStatistics other) {
      if (other == null) {
        return;
      }
      if (other.infoType_ != null) {
        if (infoType_ == null) {
          infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
        }
        InfoType.MergeFrom(other.InfoType);
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infoType_ == null) {
              infoType_ = new global::Google.Cloud.Dlp.V2Beta1.InfoType();
            }
            input.ReadMessage(infoType_);
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Metadata returned within GetOperation for an inspect request.
  /// </summary>
  public sealed partial class InspectOperationMetadata : pb::IMessage<InspectOperationMetadata> {
    private static readonly pb::MessageParser<InspectOperationMetadata> _parser = new pb::MessageParser<InspectOperationMetadata>(() => new InspectOperationMetadata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectOperationMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationMetadata(InspectOperationMetadata other) : this() {
      processedBytes_ = other.processedBytes_;
      totalEstimatedBytes_ = other.totalEstimatedBytes_;
      infoTypeStats_ = other.infoTypeStats_.Clone();
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      RequestInspectConfig = other.requestInspectConfig_ != null ? other.RequestInspectConfig.Clone() : null;
      RequestStorageConfig = other.requestStorageConfig_ != null ? other.RequestStorageConfig.Clone() : null;
      RequestOutputConfig = other.requestOutputConfig_ != null ? other.RequestOutputConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationMetadata Clone() {
      return new InspectOperationMetadata(this);
    }

    /// <summary>Field number for the "processed_bytes" field.</summary>
    public const int ProcessedBytesFieldNumber = 1;
    private long processedBytes_;
    /// <summary>
    /// Total size in bytes that were processed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProcessedBytes {
      get { return processedBytes_; }
      set {
        processedBytes_ = value;
      }
    }

    /// <summary>Field number for the "total_estimated_bytes" field.</summary>
    public const int TotalEstimatedBytesFieldNumber = 4;
    private long totalEstimatedBytes_;
    /// <summary>
    /// Estimate of the number of bytes to process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalEstimatedBytes {
      get { return totalEstimatedBytes_; }
      set {
        totalEstimatedBytes_ = value;
      }
    }

    /// <summary>Field number for the "info_type_stats" field.</summary>
    public const int InfoTypeStatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics> _repeated_infoTypeStats_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics> infoTypeStats_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeStatistics> InfoTypeStats {
      get { return infoTypeStats_; }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The time which this request was started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "request_inspect_config" field.</summary>
    public const int RequestInspectConfigFieldNumber = 5;
    private global::Google.Cloud.Dlp.V2Beta1.InspectConfig requestInspectConfig_;
    /// <summary>
    /// The inspect config used to create the Operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InspectConfig RequestInspectConfig {
      get { return requestInspectConfig_; }
      set {
        requestInspectConfig_ = value;
      }
    }

    /// <summary>Field number for the "request_storage_config" field.</summary>
    public const int RequestStorageConfigFieldNumber = 6;
    private global::Google.Cloud.Dlp.V2Beta1.StorageConfig requestStorageConfig_;
    /// <summary>
    /// The storage config used to create the Operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.StorageConfig RequestStorageConfig {
      get { return requestStorageConfig_; }
      set {
        requestStorageConfig_ = value;
      }
    }

    /// <summary>Field number for the "request_output_config" field.</summary>
    public const int RequestOutputConfigFieldNumber = 7;
    private global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig requestOutputConfig_;
    /// <summary>
    /// Optional location to store findings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig RequestOutputConfig {
      get { return requestOutputConfig_; }
      set {
        requestOutputConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectOperationMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectOperationMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProcessedBytes != other.ProcessedBytes) return false;
      if (TotalEstimatedBytes != other.TotalEstimatedBytes) return false;
      if(!infoTypeStats_.Equals(other.infoTypeStats_)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(RequestInspectConfig, other.RequestInspectConfig)) return false;
      if (!object.Equals(RequestStorageConfig, other.RequestStorageConfig)) return false;
      if (!object.Equals(RequestOutputConfig, other.RequestOutputConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProcessedBytes != 0L) hash ^= ProcessedBytes.GetHashCode();
      if (TotalEstimatedBytes != 0L) hash ^= TotalEstimatedBytes.GetHashCode();
      hash ^= infoTypeStats_.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (requestInspectConfig_ != null) hash ^= RequestInspectConfig.GetHashCode();
      if (requestStorageConfig_ != null) hash ^= RequestStorageConfig.GetHashCode();
      if (requestOutputConfig_ != null) hash ^= RequestOutputConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProcessedBytes != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProcessedBytes);
      }
      infoTypeStats_.WriteTo(output, _repeated_infoTypeStats_codec);
      if (createTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateTime);
      }
      if (TotalEstimatedBytes != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalEstimatedBytes);
      }
      if (requestInspectConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RequestInspectConfig);
      }
      if (requestStorageConfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RequestStorageConfig);
      }
      if (requestOutputConfig_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RequestOutputConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProcessedBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProcessedBytes);
      }
      if (TotalEstimatedBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalEstimatedBytes);
      }
      size += infoTypeStats_.CalculateSize(_repeated_infoTypeStats_codec);
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (requestInspectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestInspectConfig);
      }
      if (requestStorageConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestStorageConfig);
      }
      if (requestOutputConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestOutputConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectOperationMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ProcessedBytes != 0L) {
        ProcessedBytes = other.ProcessedBytes;
      }
      if (other.TotalEstimatedBytes != 0L) {
        TotalEstimatedBytes = other.TotalEstimatedBytes;
      }
      infoTypeStats_.Add(other.infoTypeStats_);
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.requestInspectConfig_ != null) {
        if (requestInspectConfig_ == null) {
          requestInspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
        }
        RequestInspectConfig.MergeFrom(other.RequestInspectConfig);
      }
      if (other.requestStorageConfig_ != null) {
        if (requestStorageConfig_ == null) {
          requestStorageConfig_ = new global::Google.Cloud.Dlp.V2Beta1.StorageConfig();
        }
        RequestStorageConfig.MergeFrom(other.RequestStorageConfig);
      }
      if (other.requestOutputConfig_ != null) {
        if (requestOutputConfig_ == null) {
          requestOutputConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig();
        }
        RequestOutputConfig.MergeFrom(other.RequestOutputConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProcessedBytes = input.ReadInt64();
            break;
          }
          case 18: {
            infoTypeStats_.AddEntriesFrom(input, _repeated_infoTypeStats_codec);
            break;
          }
          case 26: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 32: {
            TotalEstimatedBytes = input.ReadInt64();
            break;
          }
          case 42: {
            if (requestInspectConfig_ == null) {
              requestInspectConfig_ = new global::Google.Cloud.Dlp.V2Beta1.InspectConfig();
            }
            input.ReadMessage(requestInspectConfig_);
            break;
          }
          case 50: {
            if (requestStorageConfig_ == null) {
              requestStorageConfig_ = new global::Google.Cloud.Dlp.V2Beta1.StorageConfig();
            }
            input.ReadMessage(requestStorageConfig_);
            break;
          }
          case 58: {
            if (requestOutputConfig_ == null) {
              requestOutputConfig_ = new global::Google.Cloud.Dlp.V2Beta1.OutputStorageConfig();
            }
            input.ReadMessage(requestOutputConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The operational data.
  /// </summary>
  public sealed partial class InspectOperationResult : pb::IMessage<InspectOperationResult> {
    private static readonly pb::MessageParser<InspectOperationResult> _parser = new pb::MessageParser<InspectOperationResult>(() => new InspectOperationResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InspectOperationResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationResult(InspectOperationResult other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InspectOperationResult Clone() {
      return new InspectOperationResult(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The server-assigned name, which is only unique within the same service that
    /// originally returns it. If you use the default HTTP mapping, the
    /// `name` should have the format of `inspect/results/{id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InspectOperationResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InspectOperationResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InspectOperationResult other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for the list of results in a given inspect operation.
  /// </summary>
  public sealed partial class ListInspectFindingsRequest : pb::IMessage<ListInspectFindingsRequest> {
    private static readonly pb::MessageParser<ListInspectFindingsRequest> _parser = new pb::MessageParser<ListInspectFindingsRequest>(() => new ListInspectFindingsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInspectFindingsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsRequest(ListInspectFindingsRequest other) : this() {
      name_ = other.name_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsRequest Clone() {
      return new ListInspectFindingsRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Identifier of the results set returned as metadata of
    /// the longrunning operation created by a call to CreateInspectOperation.
    /// Should be in the format of `inspect/results/{id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    /// Maximum number of results to return.
    /// If 0, the implementation selects a reasonable value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// The value returned by the last `ListInspectFindingsResponse`; indicates
    /// that this is a continuation of a prior `ListInspectFindings` call, and that
    /// the system should return the next page of data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// Restricts findings to items that match. Supports info_type and likelihood.
    /// &lt;p>Examples:&lt;br/>
    /// &lt;li>info_type=EMAIL_ADDRESS
    /// &lt;li>info_type=PHONE_NUMBER,EMAIL_ADDRESS
    /// &lt;li>likelihood=VERY_LIKELY
    /// &lt;li>likelihood=VERY_LIKELY,LIKELY
    /// &lt;li>info_type=EMAIL_ADDRESS,likelihood=VERY_LIKELY,LIKELY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInspectFindingsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInspectFindingsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInspectFindingsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response to the ListInspectFindings request.
  /// </summary>
  public sealed partial class ListInspectFindingsResponse : pb::IMessage<ListInspectFindingsResponse> {
    private static readonly pb::MessageParser<ListInspectFindingsResponse> _parser = new pb::MessageParser<ListInspectFindingsResponse>(() => new ListInspectFindingsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInspectFindingsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsResponse(ListInspectFindingsResponse other) : this() {
      Result = other.result_ != null ? other.Result.Clone() : null;
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInspectFindingsResponse Clone() {
      return new ListInspectFindingsResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Google.Cloud.Dlp.V2Beta1.InspectResult result_;
    /// <summary>
    /// The results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dlp.V2Beta1.InspectResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// If not empty, indicates that there may be more results that match the
    /// request; this value should be passed in a new `ListInspectFindingsRequest`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInspectFindingsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInspectFindingsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInspectFindingsResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Google.Cloud.Dlp.V2Beta1.InspectResult();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (result_ == null) {
              result_ = new global::Google.Cloud.Dlp.V2Beta1.InspectResult();
            }
            input.ReadMessage(result_);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Info type description.
  /// </summary>
  public sealed partial class InfoTypeDescription : pb::IMessage<InfoTypeDescription> {
    private static readonly pb::MessageParser<InfoTypeDescription> _parser = new pb::MessageParser<InfoTypeDescription>(() => new InfoTypeDescription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoTypeDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeDescription(InfoTypeDescription other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
      categories_ = other.categories_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTypeDescription Clone() {
      return new InfoTypeDescription(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Internal name of the info type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// Human readable form of the info type name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> _repeated_categories_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Dlp.V2Beta1.CategoryDescription.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> categories_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription>();
    /// <summary>
    /// List of categories this info type belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> Categories {
      get { return categories_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoTypeDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoTypeDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if(!categories_.Equals(other.categories_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      hash ^= categories_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      categories_.WriteTo(output, _repeated_categories_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      size += categories_.CalculateSize(_repeated_categories_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoTypeDescription other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      categories_.Add(other.categories_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for the list of info types belonging to a given category,
  /// or all supported info types if no category is specified.
  /// </summary>
  public sealed partial class ListInfoTypesRequest : pb::IMessage<ListInfoTypesRequest> {
    private static readonly pb::MessageParser<ListInfoTypesRequest> _parser = new pb::MessageParser<ListInfoTypesRequest>(() => new ListInfoTypesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInfoTypesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesRequest(ListInfoTypesRequest other) : this() {
      category_ = other.category_;
      languageCode_ = other.languageCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesRequest Clone() {
      return new ListInfoTypesRequest(this);
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 1;
    private string category_ = "";
    /// <summary>
    /// Category name as returned by ListRootCategories.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Category {
      get { return category_; }
      set {
        category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 2;
    private string languageCode_ = "";
    /// <summary>
    /// Optional BCP-47 language code for localized info type friendly
    /// names. If omitted, or if localized strings are not available,
    /// en-US strings will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInfoTypesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInfoTypesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Category != other.Category) return false;
      if (LanguageCode != other.LanguageCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Category.Length != 0) hash ^= Category.GetHashCode();
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Category.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Category);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LanguageCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Category.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
      }
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInfoTypesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Category.Length != 0) {
        Category = other.Category;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Category = input.ReadString();
            break;
          }
          case 18: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response to the ListInfoTypes request.
  /// </summary>
  public sealed partial class ListInfoTypesResponse : pb::IMessage<ListInfoTypesResponse> {
    private static readonly pb::MessageParser<ListInfoTypesResponse> _parser = new pb::MessageParser<ListInfoTypesResponse>(() => new ListInfoTypesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInfoTypesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesResponse(ListInfoTypesResponse other) : this() {
      infoTypes_ = other.infoTypes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInfoTypesResponse Clone() {
      return new ListInfoTypesResponse(this);
    }

    /// <summary>Field number for the "info_types" field.</summary>
    public const int InfoTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription> _repeated_infoTypes_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription> infoTypes_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription>();
    /// <summary>
    /// Set of sensitive info types belonging to a category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.InfoTypeDescription> InfoTypes {
      get { return infoTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInfoTypesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInfoTypesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infoTypes_.Equals(other.infoTypes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infoTypes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoTypes_.WriteTo(output, _repeated_infoTypes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoTypes_.CalculateSize(_repeated_infoTypes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInfoTypesResponse other) {
      if (other == null) {
        return;
      }
      infoTypes_.Add(other.infoTypes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoTypes_.AddEntriesFrom(input, _repeated_infoTypes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Info Type Category description.
  /// </summary>
  public sealed partial class CategoryDescription : pb::IMessage<CategoryDescription> {
    private static readonly pb::MessageParser<CategoryDescription> _parser = new pb::MessageParser<CategoryDescription>(() => new CategoryDescription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CategoryDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryDescription(CategoryDescription other) : this() {
      name_ = other.name_;
      displayName_ = other.displayName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryDescription Clone() {
      return new CategoryDescription(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Internal name of the category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    /// Human readable form of the category name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CategoryDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CategoryDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CategoryDescription other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for root categories of Info Types supported by the API.
  /// Example values might include "FINANCE", "HEALTH", "FAST", "DEFAULT".
  /// </summary>
  public sealed partial class ListRootCategoriesRequest : pb::IMessage<ListRootCategoriesRequest> {
    private static readonly pb::MessageParser<ListRootCategoriesRequest> _parser = new pb::MessageParser<ListRootCategoriesRequest>(() => new ListRootCategoriesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRootCategoriesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesRequest(ListRootCategoriesRequest other) : this() {
      languageCode_ = other.languageCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesRequest Clone() {
      return new ListRootCategoriesRequest(this);
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 1;
    private string languageCode_ = "";
    /// <summary>
    /// Optional language code for localized friendly category names.
    /// If omitted or if localized strings are not available,
    /// en-US strings will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRootCategoriesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRootCategoriesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LanguageCode != other.LanguageCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LanguageCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRootCategoriesRequest other) {
      if (other == null) {
        return;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for ListRootCategories request.
  /// </summary>
  public sealed partial class ListRootCategoriesResponse : pb::IMessage<ListRootCategoriesResponse> {
    private static readonly pb::MessageParser<ListRootCategoriesResponse> _parser = new pb::MessageParser<ListRootCategoriesResponse>(() => new ListRootCategoriesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRootCategoriesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesResponse(ListRootCategoriesResponse other) : this() {
      categories_ = other.categories_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRootCategoriesResponse Clone() {
      return new ListRootCategoriesResponse(this);
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> _repeated_categories_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dlp.V2Beta1.CategoryDescription.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> categories_ = new pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription>();
    /// <summary>
    /// List of all into type categories supported by the API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dlp.V2Beta1.CategoryDescription> Categories {
      get { return categories_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRootCategoriesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRootCategoriesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!categories_.Equals(other.categories_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= categories_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      categories_.WriteTo(output, _repeated_categories_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += categories_.CalculateSize(_repeated_categories_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRootCategoriesResponse other) {
      if (other == null) {
        return;
      }
      categories_.Add(other.categories_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Set of primitive values supported by the system.
  /// </summary>
  public sealed partial class Value : pb::IMessage<Value> {
    private static readonly pb::MessageParser<Value> _parser = new pb::MessageParser<Value>(() => new Value());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dlp.V2Beta1.DlpReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value(Value other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.IntegerValue:
          IntegerValue = other.IntegerValue;
          break;
        case TypeOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case TypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case TypeOneofCase.BooleanValue:
          BooleanValue = other.BooleanValue;
          break;
        case TypeOneofCase.TimestampValue:
          TimestampValue = other.TimestampValue.Clone();
          break;
        case TypeOneofCase.TimeValue:
          TimeValue = other.TimeValue.Clone();
          break;
        case TypeOneofCase.DateValue:
          DateValue = other.DateValue.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value Clone() {
      return new Value(this);
    }

    /// <summary>Field number for the "integer_value" field.</summary>
    public const int IntegerValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntegerValue {
      get { return typeCase_ == TypeOneofCase.IntegerValue ? (long) type_ : 0L; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.IntegerValue;
      }
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FloatValue {
      get { return typeCase_ == TypeOneofCase.FloatValue ? (double) type_ : 0D; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.FloatValue;
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return typeCase_ == TypeOneofCase.StringValue ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "boolean_value" field.</summary>
    public const int BooleanValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BooleanValue {
      get { return typeCase_ == TypeOneofCase.BooleanValue ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.BooleanValue;
      }
    }

    /// <summary>Field number for the "timestamp_value" field.</summary>
    public const int TimestampValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimestampValue {
      get { return typeCase_ == TypeOneofCase.TimestampValue ? (global::Google.Protobuf.WellKnownTypes.Timestamp) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.TimestampValue;
      }
    }

    /// <summary>Field number for the "time_value" field.</summary>
    public const int TimeValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.TimeOfDay TimeValue {
      get { return typeCase_ == TypeOneofCase.TimeValue ? (global::Google.Type.TimeOfDay) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.TimeValue;
      }
    }

    /// <summary>Field number for the "date_value" field.</summary>
    public const int DateValueFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Date DateValue {
      get { return typeCase_ == TypeOneofCase.DateValue ? (global::Google.Type.Date) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.DateValue;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      IntegerValue = 1,
      FloatValue = 2,
      StringValue = 3,
      BooleanValue = 4,
      TimestampValue = 5,
      TimeValue = 6,
      DateValue = 7,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntegerValue != other.IntegerValue) return false;
      if (FloatValue != other.FloatValue) return false;
      if (StringValue != other.StringValue) return false;
      if (BooleanValue != other.BooleanValue) return false;
      if (!object.Equals(TimestampValue, other.TimestampValue)) return false;
      if (!object.Equals(TimeValue, other.TimeValue)) return false;
      if (!object.Equals(DateValue, other.DateValue)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.IntegerValue) hash ^= IntegerValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.FloatValue) hash ^= FloatValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.BooleanValue) hash ^= BooleanValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.TimestampValue) hash ^= TimestampValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.TimeValue) hash ^= TimeValue.GetHashCode();
      if (typeCase_ == TypeOneofCase.DateValue) hash ^= DateValue.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.IntegerValue) {
        output.WriteRawTag(8);
        output.WriteInt64(IntegerValue);
      }
      if (typeCase_ == TypeOneofCase.FloatValue) {
        output.WriteRawTag(17);
        output.WriteDouble(FloatValue);
      }
      if (typeCase_ == TypeOneofCase.StringValue) {
        output.WriteRawTag(26);
        output.WriteString(StringValue);
      }
      if (typeCase_ == TypeOneofCase.BooleanValue) {
        output.WriteRawTag(32);
        output.WriteBool(BooleanValue);
      }
      if (typeCase_ == TypeOneofCase.TimestampValue) {
        output.WriteRawTag(42);
        output.WriteMessage(TimestampValue);
      }
      if (typeCase_ == TypeOneofCase.TimeValue) {
        output.WriteRawTag(50);
        output.WriteMessage(TimeValue);
      }
      if (typeCase_ == TypeOneofCase.DateValue) {
        output.WriteRawTag(58);
        output.WriteMessage(DateValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.IntegerValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntegerValue);
      }
      if (typeCase_ == TypeOneofCase.FloatValue) {
        size += 1 + 8;
      }
      if (typeCase_ == TypeOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (typeCase_ == TypeOneofCase.BooleanValue) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.TimestampValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimestampValue);
      }
      if (typeCase_ == TypeOneofCase.TimeValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeValue);
      }
      if (typeCase_ == TypeOneofCase.DateValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.IntegerValue:
          IntegerValue = other.IntegerValue;
          break;
        case TypeOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case TypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case TypeOneofCase.BooleanValue:
          BooleanValue = other.BooleanValue;
          break;
        case TypeOneofCase.TimestampValue:
          TimestampValue = other.TimestampValue;
          break;
        case TypeOneofCase.TimeValue:
          TimeValue = other.TimeValue;
          break;
        case TypeOneofCase.DateValue:
          DateValue = other.DateValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IntegerValue = input.ReadInt64();
            break;
          }
          case 17: {
            FloatValue = input.ReadDouble();
            break;
          }
          case 26: {
            StringValue = input.ReadString();
            break;
          }
          case 32: {
            BooleanValue = input.ReadBool();
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (typeCase_ == TypeOneofCase.TimestampValue) {
              subBuilder.MergeFrom(TimestampValue);
            }
            input.ReadMessage(subBuilder);
            TimestampValue = subBuilder;
            break;
          }
          case 50: {
            global::Google.Type.TimeOfDay subBuilder = new global::Google.Type.TimeOfDay();
            if (typeCase_ == TypeOneofCase.TimeValue) {
              subBuilder.MergeFrom(TimeValue);
            }
            input.ReadMessage(subBuilder);
            TimeValue = subBuilder;
            break;
          }
          case 58: {
            global::Google.Type.Date subBuilder = new global::Google.Type.Date();
            if (typeCase_ == TypeOneofCase.DateValue) {
              subBuilder.MergeFrom(DateValue);
            }
            input.ReadMessage(subBuilder);
            DateValue = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
