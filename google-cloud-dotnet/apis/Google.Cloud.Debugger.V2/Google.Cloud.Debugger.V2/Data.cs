// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/clouddebugger/v2/data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Debugger.V2 {

  /// <summary>Holder for reflection information generated from google/devtools/clouddebugger/v2/data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/clouddebugger/v2/data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Citnb29nbGUvZGV2dG9vbHMvY2xvdWRkZWJ1Z2dlci92Mi9kYXRhLnByb3Rv",
            "EiBnb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52MhocZ29vZ2xlL2Fw",
            "aS9hbm5vdGF0aW9ucy5wcm90bxouZ29vZ2xlL2RldnRvb2xzL3NvdXJjZS92",
            "MS9zb3VyY2VfY29udGV4dC5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVz",
            "dGFtcC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvIjMK",
            "DUZvcm1hdE1lc3NhZ2USDgoGZm9ybWF0GAEgASgJEhIKCnBhcmFtZXRlcnMY",
            "AiADKAki5AIKDVN0YXR1c01lc3NhZ2USEAoIaXNfZXJyb3IYASABKAgSTAoJ",
            "cmVmZXJzX3RvGAIgASgOMjkuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdn",
            "ZXIudjIuU3RhdHVzTWVzc2FnZS5SZWZlcmVuY2USRAoLZGVzY3JpcHRpb24Y",
            "AyABKAsyLy5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5Gb3Jt",
            "YXRNZXNzYWdlIqwBCglSZWZlcmVuY2USDwoLVU5TUEVDSUZJRUQQABIeChpC",
            "UkVBS1BPSU5UX1NPVVJDRV9MT0NBVElPThADEhgKFEJSRUFLUE9JTlRfQ09O",
            "RElUSU9OEAQSGQoVQlJFQUtQT0lOVF9FWFBSRVNTSU9OEAcSEgoOQlJFQUtQ",
            "T0lOVF9BR0UQCBIRCg1WQVJJQUJMRV9OQU1FEAUSEgoOVkFSSUFCTEVfVkFM",
            "VUUQBiIsCg5Tb3VyY2VMb2NhdGlvbhIMCgRwYXRoGAEgASgJEgwKBGxpbmUY",
            "AiABKAUi6QEKCFZhcmlhYmxlEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiAB",
            "KAkSDAoEdHlwZRgGIAEoCRI7CgdtZW1iZXJzGAMgAygLMiouZ29vZ2xlLmRl",
            "dnRvb2xzLmNsb3VkZGVidWdnZXIudjIuVmFyaWFibGUSNAoPdmFyX3RhYmxl",
            "X2luZGV4GAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSPwoG",
            "c3RhdHVzGAUgASgLMi8uZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIu",
            "djIuU3RhdHVzTWVzc2FnZSLdAQoKU3RhY2tGcmFtZRIQCghmdW5jdGlvbhgB",
            "IAEoCRJCCghsb2NhdGlvbhgCIAEoCzIwLmdvb2dsZS5kZXZ0b29scy5jbG91",
            "ZGRlYnVnZ2VyLnYyLlNvdXJjZUxvY2F0aW9uEj0KCWFyZ3VtZW50cxgDIAMo",
            "CzIqLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLlZhcmlhYmxl",
            "EjoKBmxvY2FscxgEIAMoCzIqLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVn",
            "Z2VyLnYyLlZhcmlhYmxlIpcHCgpCcmVha3BvaW50EgoKAmlkGAEgASgJEkMK",
            "BmFjdGlvbhgNIAEoDjIzLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2Vy",
            "LnYyLkJyZWFrcG9pbnQuQWN0aW9uEkIKCGxvY2F0aW9uGAIgASgLMjAuZ29v",
            "Z2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuU291cmNlTG9jYXRpb24S",
            "EQoJY29uZGl0aW9uGAMgASgJEhMKC2V4cHJlc3Npb25zGAQgAygJEhoKEmxv",
            "Z19tZXNzYWdlX2Zvcm1hdBgOIAEoCRJICglsb2dfbGV2ZWwYDyABKA4yNS5n",
            "b29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5CcmVha3BvaW50Lkxv",
            "Z0xldmVsEhYKDmlzX2ZpbmFsX3N0YXRlGAUgASgIEi8KC2NyZWF0ZV90aW1l",
            "GAsgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgpmaW5hbF90",
            "aW1lGAwgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBISCgp1c2Vy",
            "X2VtYWlsGBAgASgJEj8KBnN0YXR1cxgKIAEoCzIvLmdvb2dsZS5kZXZ0b29s",
            "cy5jbG91ZGRlYnVnZ2VyLnYyLlN0YXR1c01lc3NhZ2USQgoMc3RhY2tfZnJh",
            "bWVzGAcgAygLMiwuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIu",
            "U3RhY2tGcmFtZRJJChVldmFsdWF0ZWRfZXhwcmVzc2lvbnMYCCADKAsyKi5n",
            "b29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5WYXJpYWJsZRJCCg52",
            "YXJpYWJsZV90YWJsZRgJIAMoCzIqLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRl",
            "YnVnZ2VyLnYyLlZhcmlhYmxlEkgKBmxhYmVscxgRIAMoCzI4Lmdvb2dsZS5k",
            "ZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkJyZWFrcG9pbnQuTGFiZWxzRW50",
            "cnkaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJ",
            "OgI4ASIeCgZBY3Rpb24SCwoHQ0FQVFVSRRAAEgcKA0xPRxABIiwKCExvZ0xl",
            "dmVsEggKBElORk8QABILCgdXQVJOSU5HEAESCQoFRVJST1IQAiLbAwoIRGVi",
            "dWdnZWUSCgoCaWQYASABKAkSDwoHcHJvamVjdBgCIAEoCRISCgp1bmlxdWlm",
            "aWVyGAMgASgJEhMKC2Rlc2NyaXB0aW9uGAQgASgJEhMKC2lzX2luYWN0aXZl",
            "GAUgASgIEhUKDWFnZW50X3ZlcnNpb24YBiABKAkSEwoLaXNfZGlzYWJsZWQY",
            "ByABKAgSPwoGc3RhdHVzGAggASgLMi8uZ29vZ2xlLmRldnRvb2xzLmNsb3Vk",
            "ZGVidWdnZXIudjIuU3RhdHVzTWVzc2FnZRJBCg9zb3VyY2VfY29udGV4dHMY",
            "CSADKAsyKC5nb29nbGUuZGV2dG9vbHMuc291cmNlLnYxLlNvdXJjZUNvbnRl",
            "eHQSTQoTZXh0X3NvdXJjZV9jb250ZXh0cxgNIAMoCzIwLmdvb2dsZS5kZXZ0",
            "b29scy5zb3VyY2UudjEuRXh0ZW5kZWRTb3VyY2VDb250ZXh0EkYKBmxhYmVs",
            "cxgLIAMoCzI2Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkRl",
            "YnVnZ2VlLkxhYmVsc0VudHJ5Gi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCToCOAFCnQEKJGNvbS5nb29nbGUuZGV2dG9vbHMu",
            "Y2xvdWRkZWJ1Z2dlci52MkIJRGF0YVByb3RvUAFaTWdvb2dsZS5nb2xhbmcu",
            "b3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZGV2dG9vbHMvY2xvdWRkZWJ1Z2dl",
            "ci92MjtjbG91ZGRlYnVnZ2VyqgIYR29vZ2xlLkNsb3VkLkRlYnVnZ2VyLlYy",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.FormatMessage), global::Google.Cloud.Debugger.V2.FormatMessage.Parser, new[]{ "Format", "Parameters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.StatusMessage), global::Google.Cloud.Debugger.V2.StatusMessage.Parser, new[]{ "IsError", "RefersTo", "Description" }, null, new[]{ typeof(global::Google.Cloud.Debugger.V2.StatusMessage.Types.Reference) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.SourceLocation), global::Google.Cloud.Debugger.V2.SourceLocation.Parser, new[]{ "Path", "Line" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.Variable), global::Google.Cloud.Debugger.V2.Variable.Parser, new[]{ "Name", "Value", "Type", "Members", "VarTableIndex", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.StackFrame), global::Google.Cloud.Debugger.V2.StackFrame.Parser, new[]{ "Function", "Location", "Arguments", "Locals" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.Breakpoint), global::Google.Cloud.Debugger.V2.Breakpoint.Parser, new[]{ "Id", "Action", "Location", "Condition", "Expressions", "LogMessageFormat", "LogLevel", "IsFinalState", "CreateTime", "FinalTime", "UserEmail", "Status", "StackFrames", "EvaluatedExpressions", "VariableTable", "Labels" }, null, new[]{ typeof(global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action), typeof(global::Google.Cloud.Debugger.V2.Breakpoint.Types.LogLevel) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.Debuggee), global::Google.Cloud.Debugger.V2.Debuggee.Parser, new[]{ "Id", "Project", "Uniquifier", "Description", "IsInactive", "AgentVersion", "IsDisabled", "Status", "SourceContexts", "ExtSourceContexts", "Labels" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Represents a message with parameters.
  /// </summary>
  public sealed partial class FormatMessage : pb::IMessage<FormatMessage> {
    private static readonly pb::MessageParser<FormatMessage> _parser = new pb::MessageParser<FormatMessage>(() => new FormatMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatMessage(FormatMessage other) : this() {
      format_ = other.format_;
      parameters_ = other.parameters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormatMessage Clone() {
      return new FormatMessage(this);
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 1;
    private string format_ = "";
    /// <summary>
    /// Format template for the message. The `format` uses placeholders `$0`,
    /// `$1`, etc. to reference parameters. `$$` can be used to denote the `$`
    /// character.
    ///
    /// Examples:
    ///
    /// *   `Failed to load '$0' which helps debug $1 the first time it
    ///     is loaded.  Again, $0 is very important.`
    /// *   `Please pay $$10 to use $0 instead of $1.`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_parameters_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> parameters_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optional parameters to be embedded into the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FormatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FormatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Format != other.Format) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      hash ^= parameters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Format.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Format);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FormatMessage other) {
      if (other == null) {
        return;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      parameters_.Add(other.parameters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Format = input.ReadString();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a contextual status message.
  /// The message can indicate an error or informational status, and refer to
  /// specific parts of the containing object.
  /// For example, the `Breakpoint.status` field can indicate an error referring
  /// to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
  /// </summary>
  public sealed partial class StatusMessage : pb::IMessage<StatusMessage> {
    private static readonly pb::MessageParser<StatusMessage> _parser = new pb::MessageParser<StatusMessage>(() => new StatusMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage(StatusMessage other) : this() {
      isError_ = other.isError_;
      refersTo_ = other.refersTo_;
      Description = other.description_ != null ? other.Description.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage Clone() {
      return new StatusMessage(this);
    }

    /// <summary>Field number for the "is_error" field.</summary>
    public const int IsErrorFieldNumber = 1;
    private bool isError_;
    /// <summary>
    /// Distinguishes errors from informational messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    /// <summary>Field number for the "refers_to" field.</summary>
    public const int RefersToFieldNumber = 2;
    private global::Google.Cloud.Debugger.V2.StatusMessage.Types.Reference refersTo_ = 0;
    /// <summary>
    /// Reference to which the message applies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.StatusMessage.Types.Reference RefersTo {
      get { return refersTo_; }
      set {
        refersTo_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private global::Google.Cloud.Debugger.V2.FormatMessage description_;
    /// <summary>
    /// Status message text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.FormatMessage Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsError != other.IsError) return false;
      if (RefersTo != other.RefersTo) return false;
      if (!object.Equals(Description, other.Description)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsError != false) hash ^= IsError.GetHashCode();
      if (RefersTo != 0) hash ^= RefersTo.GetHashCode();
      if (description_ != null) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsError != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsError);
      }
      if (RefersTo != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RefersTo);
      }
      if (description_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsError != false) {
        size += 1 + 1;
      }
      if (RefersTo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RefersTo);
      }
      if (description_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusMessage other) {
      if (other == null) {
        return;
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
      if (other.RefersTo != 0) {
        RefersTo = other.RefersTo;
      }
      if (other.description_ != null) {
        if (description_ == null) {
          description_ = new global::Google.Cloud.Debugger.V2.FormatMessage();
        }
        Description.MergeFrom(other.Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsError = input.ReadBool();
            break;
          }
          case 16: {
            refersTo_ = (global::Google.Cloud.Debugger.V2.StatusMessage.Types.Reference) input.ReadEnum();
            break;
          }
          case 26: {
            if (description_ == null) {
              description_ = new global::Google.Cloud.Debugger.V2.FormatMessage();
            }
            input.ReadMessage(description_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StatusMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Enumerates references to which the message applies.
      /// </summary>
      public enum Reference {
        /// <summary>
        /// Status doesn't refer to any particular input.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Status applies to the breakpoint and is related to its location.
        /// </summary>
        [pbr::OriginalName("BREAKPOINT_SOURCE_LOCATION")] BreakpointSourceLocation = 3,
        /// <summary>
        /// Status applies to the breakpoint and is related to its condition.
        /// </summary>
        [pbr::OriginalName("BREAKPOINT_CONDITION")] BreakpointCondition = 4,
        /// <summary>
        /// Status applies to the breakpoint and is related to its expressions.
        /// </summary>
        [pbr::OriginalName("BREAKPOINT_EXPRESSION")] BreakpointExpression = 7,
        /// <summary>
        /// Status applies to the breakpoint and is related to its age.
        /// </summary>
        [pbr::OriginalName("BREAKPOINT_AGE")] BreakpointAge = 8,
        /// <summary>
        /// Status applies to the entire variable.
        /// </summary>
        [pbr::OriginalName("VARIABLE_NAME")] VariableName = 5,
        /// <summary>
        /// Status applies to variable value (variable name is valid).
        /// </summary>
        [pbr::OriginalName("VARIABLE_VALUE")] VariableValue = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// Represents a location in the source code.
  /// </summary>
  public sealed partial class SourceLocation : pb::IMessage<SourceLocation> {
    private static readonly pb::MessageParser<SourceLocation> _parser = new pb::MessageParser<SourceLocation>(() => new SourceLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourceLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceLocation(SourceLocation other) : this() {
      path_ = other.path_;
      line_ = other.line_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceLocation Clone() {
      return new SourceLocation(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// Path to the source file within the source context of the target binary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 2;
    private int line_;
    /// <summary>
    /// Line inside the file. The first line in the file has the value `1`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourceLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourceLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (Line != other.Line) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Line != 0) hash ^= Line.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (Line != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Line);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourceLocation other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 16: {
            Line = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a variable or an argument possibly of a compound object type.
  /// Note how the following variables are represented:
  ///
  /// 1) A simple variable:
  ///
  ///     int x = 5
  ///
  ///     { name: "x", value: "5", type: "int" }  // Captured variable
  ///
  /// 2) A compound object:
  ///
  ///     struct T {
  ///         int m1;
  ///         int m2;
  ///     };
  ///     T x = { 3, 7 };
  ///
  ///     {  // Captured variable
  ///         name: "x",
  ///         type: "T",
  ///         members { name: "m1", value: "3", type: "int" },
  ///         members { name: "m2", value: "7", type: "int" }
  ///     }
  ///
  /// 3) A pointer where the pointee was captured:
  ///
  ///     T x = { 3, 7 };
  ///     T* p = &amp;x;
  ///
  ///     {   // Captured variable
  ///         name: "p",
  ///         type: "T*",
  ///         value: "0x00500500",
  ///         members { name: "m1", value: "3", type: "int" },
  ///         members { name: "m2", value: "7", type: "int" }
  ///     }
  ///
  /// 4) A pointer where the pointee was not captured:
  ///
  ///     T* p = new T;
  ///
  ///     {   // Captured variable
  ///         name: "p",
  ///         type: "T*",
  ///         value: "0x00400400"
  ///         status { is_error: true, description { format: "unavailable" } }
  ///     }
  ///
  /// The status should describe the reason for the missing value,
  /// such as `&lt;optimized out>`, `&lt;inaccessible>`, `&lt;pointers limit reached>`.
  ///
  /// Note that a null pointer should not have members.
  ///
  /// 5) An unnamed value:
  ///
  ///     int* p = new int(7);
  ///
  ///     {   // Captured variable
  ///         name: "p",
  ///         value: "0x00500500",
  ///         type: "int*",
  ///         members { value: "7", type: "int" } }
  ///
  /// 6) An unnamed pointer where the pointee was not captured:
  ///
  ///     int* p = new int(7);
  ///     int** pp = &amp;p;
  ///
  ///     {  // Captured variable
  ///         name: "pp",
  ///         value: "0x00500500",
  ///         type: "int**",
  ///         members {
  ///             value: "0x00400400",
  ///             type: "int*"
  ///             status {
  ///                 is_error: true,
  ///                 description: { format: "unavailable" } }
  ///             }
  ///         }
  ///     }
  ///
  /// To optimize computation, memory and network traffic, variables that
  /// repeat in the output multiple times can be stored once in a shared
  /// variable table and be referenced using the `var_table_index` field.  The
  /// variables stored in the shared table are nameless and are essentially
  /// a partition of the complete variable. To reconstruct the complete
  /// variable, merge the referencing variable with the referenced variable.
  ///
  /// When using the shared variable table, the following variables:
  ///
  ///     T x = { 3, 7 };
  ///     T* p = &amp;x;
  ///     T&amp; r = x;
  ///
  ///     { name: "x", var_table_index: 3, type: "T" }  // Captured variables
  ///     { name: "p", value "0x00500500", type="T*", var_table_index: 3 }
  ///     { name: "r", type="T&amp;", var_table_index: 3 }
  ///
  ///     {  // Shared variable table entry #3:
  ///         members { name: "m1", value: "3", type: "int" },
  ///         members { name: "m2", value: "7", type: "int" }
  ///     }
  ///
  /// Note that the pointer address is stored with the referencing variable
  /// and not with the referenced variable. This allows the referenced variable
  /// to be shared between pointers and references.
  ///
  /// The type field is optional. The debugger agent may or may not support it.
  /// </summary>
  public sealed partial class Variable : pb::IMessage<Variable> {
    private static readonly pb::MessageParser<Variable> _parser = new pb::MessageParser<Variable>(() => new Variable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable(Variable other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      type_ = other.type_;
      members_ = other.members_.Clone();
      VarTableIndex = other.VarTableIndex;
      Status = other.status_ != null ? other.Status.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable Clone() {
      return new Variable(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the variable, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Simple value of the variable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private string type_ = "";
    /// <summary>
    /// Variable type (e.g. `MyClass`). If the variable is split with
    /// `var_table_index`, `type` goes next to `value`. The interpretation of
    /// a type is agent specific. It is recommended to include the dynamic type
    /// rather than a static type of an object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Debugger.V2.Variable> _repeated_members_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Debugger.V2.Variable.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable> members_ = new pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable>();
    /// <summary>
    /// Members contained or pointed to by the variable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "var_table_index" field.</summary>
    public const int VarTableIndexFieldNumber = 4;
    private static readonly pb::FieldCodec<int?> _single_varTableIndex_codec = pb::FieldCodec.ForStructWrapper<int>(34);
    private int? varTableIndex_;
    /// <summary>
    /// Reference to a variable in the shared variable table. More than
    /// one variable can reference the same variable in the table. The
    /// `var_table_index` field is an index into `variable_table` in Breakpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? VarTableIndex {
      get { return varTableIndex_; }
      set {
        varTableIndex_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::Google.Cloud.Debugger.V2.StatusMessage status_;
    /// <summary>
    /// Status associated with the variable. This field will usually stay
    /// unset. A status of a single variable only applies to that variable or
    /// expression. The rest of breakpoint data still remains valid. Variables
    /// might be reported in error state even when breakpoint is not in final
    /// state.
    ///
    /// The message may refer to variable name with `refers_to` set to
    /// `VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`.
    /// In either case variable value and members will be unset.
    ///
    /// Example of error message applied to name: `Invalid expression syntax`.
    ///
    /// Example of information message applied to value: `Not captured`.
    ///
    /// Examples of error message applied to value:
    ///
    /// *   `Malformed string`,
    /// *   `Field f not found in class C`
    /// *   `Null pointer dereference`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.StatusMessage Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      if (Type != other.Type) return false;
      if(!members_.Equals(other.members_)) return false;
      if (VarTableIndex != other.VarTableIndex) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= members_.GetHashCode();
      if (varTableIndex_ != null) hash ^= VarTableIndex.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (varTableIndex_ != null) {
        _single_varTableIndex_codec.WriteTagAndValue(output, VarTableIndex);
      }
      if (status_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Status);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (varTableIndex_ != null) {
        size += _single_varTableIndex_codec.CalculateSizeWithTag(VarTableIndex);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variable other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      members_.Add(other.members_);
      if (other.varTableIndex_ != null) {
        if (varTableIndex_ == null || other.VarTableIndex != 0) {
          VarTableIndex = other.VarTableIndex;
        }
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Google.Cloud.Debugger.V2.StatusMessage();
        }
        Status.MergeFrom(other.Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 34: {
            int? value = _single_varTableIndex_codec.Read(input);
            if (varTableIndex_ == null || value != 0) {
              VarTableIndex = value;
            }
            break;
          }
          case 42: {
            if (status_ == null) {
              status_ = new global::Google.Cloud.Debugger.V2.StatusMessage();
            }
            input.ReadMessage(status_);
            break;
          }
          case 50: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a stack frame context.
  /// </summary>
  public sealed partial class StackFrame : pb::IMessage<StackFrame> {
    private static readonly pb::MessageParser<StackFrame> _parser = new pb::MessageParser<StackFrame>(() => new StackFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StackFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackFrame(StackFrame other) : this() {
      function_ = other.function_;
      Location = other.location_ != null ? other.Location.Clone() : null;
      arguments_ = other.arguments_.Clone();
      locals_ = other.locals_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackFrame Clone() {
      return new StackFrame(this);
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 1;
    private string function_ = "";
    /// <summary>
    /// Demangled function name at the call site.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Function {
      get { return function_; }
      set {
        function_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 2;
    private global::Google.Cloud.Debugger.V2.SourceLocation location_;
    /// <summary>
    /// Source location of the call site.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.SourceLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Debugger.V2.Variable> _repeated_arguments_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Debugger.V2.Variable.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable> arguments_ = new pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable>();
    /// <summary>
    /// Set of arguments passed to this function.
    /// Note that this might not be populated for all stack frames.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable> Arguments {
      get { return arguments_; }
    }

    /// <summary>Field number for the "locals" field.</summary>
    public const int LocalsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Debugger.V2.Variable> _repeated_locals_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Debugger.V2.Variable.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable> locals_ = new pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable>();
    /// <summary>
    /// Set of local variables at the stack frame location.
    /// Note that this might not be populated for all stack frames.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable> Locals {
      get { return locals_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StackFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StackFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Function != other.Function) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if(!arguments_.Equals(other.arguments_)) return false;
      if(!locals_.Equals(other.locals_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Function.Length != 0) hash ^= Function.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      hash ^= arguments_.GetHashCode();
      hash ^= locals_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Function.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Function);
      }
      if (location_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Location);
      }
      arguments_.WriteTo(output, _repeated_arguments_codec);
      locals_.WriteTo(output, _repeated_locals_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Function.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Function);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      size += locals_.CalculateSize(_repeated_locals_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StackFrame other) {
      if (other == null) {
        return;
      }
      if (other.Function.Length != 0) {
        Function = other.Function;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Google.Cloud.Debugger.V2.SourceLocation();
        }
        Location.MergeFrom(other.Location);
      }
      arguments_.Add(other.arguments_);
      locals_.Add(other.locals_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Function = input.ReadString();
            break;
          }
          case 18: {
            if (location_ == null) {
              location_ = new global::Google.Cloud.Debugger.V2.SourceLocation();
            }
            input.ReadMessage(location_);
            break;
          }
          case 26: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
          case 34: {
            locals_.AddEntriesFrom(input, _repeated_locals_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents the breakpoint specification, status and results.
  /// </summary>
  public sealed partial class Breakpoint : pb::IMessage<Breakpoint> {
    private static readonly pb::MessageParser<Breakpoint> _parser = new pb::MessageParser<Breakpoint>(() => new Breakpoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Breakpoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Breakpoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Breakpoint(Breakpoint other) : this() {
      id_ = other.id_;
      action_ = other.action_;
      Location = other.location_ != null ? other.Location.Clone() : null;
      condition_ = other.condition_;
      expressions_ = other.expressions_.Clone();
      logMessageFormat_ = other.logMessageFormat_;
      logLevel_ = other.logLevel_;
      isFinalState_ = other.isFinalState_;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      FinalTime = other.finalTime_ != null ? other.FinalTime.Clone() : null;
      userEmail_ = other.userEmail_;
      Status = other.status_ != null ? other.Status.Clone() : null;
      stackFrames_ = other.stackFrames_.Clone();
      evaluatedExpressions_ = other.evaluatedExpressions_.Clone();
      variableTable_ = other.variableTable_.Clone();
      labels_ = other.labels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Breakpoint Clone() {
      return new Breakpoint(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Breakpoint identifier, unique in the scope of the debuggee.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 13;
    private global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action action_ = 0;
    /// <summary>
    /// Action that the agent should perform when the code at the
    /// breakpoint location is hit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 2;
    private global::Google.Cloud.Debugger.V2.SourceLocation location_;
    /// <summary>
    /// Breakpoint source location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.SourceLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 3;
    private string condition_ = "";
    /// <summary>
    /// Condition that triggers the breakpoint.
    /// The condition is a compound boolean expression composed using expressions
    /// in a programming language at the source location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Condition {
      get { return condition_; }
      set {
        condition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expressions" field.</summary>
    public const int ExpressionsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_expressions_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> expressions_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of read-only expressions to evaluate at the breakpoint location.
    /// The expressions are composed using expressions in the programming language
    /// at the source location. If the breakpoint action is `LOG`, the evaluated
    /// expressions are included in log statements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Expressions {
      get { return expressions_; }
    }

    /// <summary>Field number for the "log_message_format" field.</summary>
    public const int LogMessageFormatFieldNumber = 14;
    private string logMessageFormat_ = "";
    /// <summary>
    /// Only relevant when action is `LOG`. Defines the message to log when
    /// the breakpoint hits. The message may include parameter placeholders `$0`,
    /// `$1`, etc. These placeholders are replaced with the evaluated value
    /// of the appropriate expression. Expressions not referenced in
    /// `log_message_format` are not logged.
    ///
    /// Example: `Message received, id = $0, count = $1` with
    /// `expressions` = `[ message.id, message.count ]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogMessageFormat {
      get { return logMessageFormat_; }
      set {
        logMessageFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "log_level" field.</summary>
    public const int LogLevelFieldNumber = 15;
    private global::Google.Cloud.Debugger.V2.Breakpoint.Types.LogLevel logLevel_ = 0;
    /// <summary>
    /// Indicates the severity of the log. Only relevant when action is `LOG`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.Breakpoint.Types.LogLevel LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = value;
      }
    }

    /// <summary>Field number for the "is_final_state" field.</summary>
    public const int IsFinalStateFieldNumber = 5;
    private bool isFinalState_;
    /// <summary>
    /// When true, indicates that this is a final result and the
    /// breakpoint state will not change from here on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinalState {
      get { return isFinalState_; }
      set {
        isFinalState_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Time this breakpoint was created by the server in seconds resolution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "final_time" field.</summary>
    public const int FinalTimeFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp finalTime_;
    /// <summary>
    /// Time this breakpoint was finalized as seen by the server in seconds
    /// resolution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FinalTime {
      get { return finalTime_; }
      set {
        finalTime_ = value;
      }
    }

    /// <summary>Field number for the "user_email" field.</summary>
    public const int UserEmailFieldNumber = 16;
    private string userEmail_ = "";
    /// <summary>
    /// E-mail address of the user that created this breakpoint
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserEmail {
      get { return userEmail_; }
      set {
        userEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private global::Google.Cloud.Debugger.V2.StatusMessage status_;
    /// <summary>
    /// Breakpoint status.
    ///
    /// The status includes an error flag and a human readable message.
    /// This field is usually unset. The message can be either
    /// informational or an error message. Regardless, clients should always
    /// display the text message back to the user.
    ///
    /// Error status indicates complete failure of the breakpoint.
    ///
    /// Example (non-final state): `Still loading symbols...`
    ///
    /// Examples (final state):
    ///
    /// *   `Invalid line number` referring to location
    /// *   `Field f not found in class C` referring to condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.StatusMessage Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "stack_frames" field.</summary>
    public const int StackFramesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Cloud.Debugger.V2.StackFrame> _repeated_stackFrames_codec
        = pb::FieldCodec.ForMessage(58, global::Google.Cloud.Debugger.V2.StackFrame.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Debugger.V2.StackFrame> stackFrames_ = new pbc::RepeatedField<global::Google.Cloud.Debugger.V2.StackFrame>();
    /// <summary>
    /// The stack at breakpoint time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Debugger.V2.StackFrame> StackFrames {
      get { return stackFrames_; }
    }

    /// <summary>Field number for the "evaluated_expressions" field.</summary>
    public const int EvaluatedExpressionsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Google.Cloud.Debugger.V2.Variable> _repeated_evaluatedExpressions_codec
        = pb::FieldCodec.ForMessage(66, global::Google.Cloud.Debugger.V2.Variable.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable> evaluatedExpressions_ = new pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable>();
    /// <summary>
    /// Values of evaluated expressions at breakpoint time.
    /// The evaluated expressions appear in exactly the same order they
    /// are listed in the `expressions` field.
    /// The `name` field holds the original expression text, the `value` or
    /// `members` field holds the result of the evaluated expression.
    /// If the expression cannot be evaluated, the `status` inside the `Variable`
    /// will indicate an error and contain the error text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable> EvaluatedExpressions {
      get { return evaluatedExpressions_; }
    }

    /// <summary>Field number for the "variable_table" field.</summary>
    public const int VariableTableFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Google.Cloud.Debugger.V2.Variable> _repeated_variableTable_codec
        = pb::FieldCodec.ForMessage(74, global::Google.Cloud.Debugger.V2.Variable.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable> variableTable_ = new pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable>();
    /// <summary>
    /// The `variable_table` exists to aid with computation, memory and network
    /// traffic optimization.  It enables storing a variable once and reference
    /// it from multiple variables, including variables stored in the
    /// `variable_table` itself.
    /// For example, the same `this` object, which may appear at many levels of
    /// the stack, can have all of its data stored once in this table.  The
    /// stack frame variables then would hold only a reference to it.
    ///
    /// The variable `var_table_index` field is an index into this repeated field.
    /// The stored objects are nameless and get their name from the referencing
    /// variable. The effective variable is a merge of the referencing variable
    /// and the referenced variable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Variable> VariableTable {
      get { return variableTable_; }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 17;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 138);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// A set of custom breakpoint properties, populated by the agent, to be
    /// displayed to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Breakpoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Breakpoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Action != other.Action) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (Condition != other.Condition) return false;
      if(!expressions_.Equals(other.expressions_)) return false;
      if (LogMessageFormat != other.LogMessageFormat) return false;
      if (LogLevel != other.LogLevel) return false;
      if (IsFinalState != other.IsFinalState) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(FinalTime, other.FinalTime)) return false;
      if (UserEmail != other.UserEmail) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if(!stackFrames_.Equals(other.stackFrames_)) return false;
      if(!evaluatedExpressions_.Equals(other.evaluatedExpressions_)) return false;
      if(!variableTable_.Equals(other.variableTable_)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (Condition.Length != 0) hash ^= Condition.GetHashCode();
      hash ^= expressions_.GetHashCode();
      if (LogMessageFormat.Length != 0) hash ^= LogMessageFormat.GetHashCode();
      if (LogLevel != 0) hash ^= LogLevel.GetHashCode();
      if (IsFinalState != false) hash ^= IsFinalState.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (finalTime_ != null) hash ^= FinalTime.GetHashCode();
      if (UserEmail.Length != 0) hash ^= UserEmail.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= stackFrames_.GetHashCode();
      hash ^= evaluatedExpressions_.GetHashCode();
      hash ^= variableTable_.GetHashCode();
      hash ^= Labels.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (location_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Location);
      }
      if (Condition.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Condition);
      }
      expressions_.WriteTo(output, _repeated_expressions_codec);
      if (IsFinalState != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsFinalState);
      }
      stackFrames_.WriteTo(output, _repeated_stackFrames_codec);
      evaluatedExpressions_.WriteTo(output, _repeated_evaluatedExpressions_codec);
      variableTable_.WriteTo(output, _repeated_variableTable_codec);
      if (status_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Status);
      }
      if (createTime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CreateTime);
      }
      if (finalTime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FinalTime);
      }
      if (Action != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Action);
      }
      if (LogMessageFormat.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(LogMessageFormat);
      }
      if (LogLevel != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) LogLevel);
      }
      if (UserEmail.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(UserEmail);
      }
      labels_.WriteTo(output, _map_labels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (Condition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Condition);
      }
      size += expressions_.CalculateSize(_repeated_expressions_codec);
      if (LogMessageFormat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogMessageFormat);
      }
      if (LogLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogLevel);
      }
      if (IsFinalState != false) {
        size += 1 + 1;
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (finalTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FinalTime);
      }
      if (UserEmail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserEmail);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += stackFrames_.CalculateSize(_repeated_stackFrames_codec);
      size += evaluatedExpressions_.CalculateSize(_repeated_evaluatedExpressions_codec);
      size += variableTable_.CalculateSize(_repeated_variableTable_codec);
      size += labels_.CalculateSize(_map_labels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Breakpoint other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Google.Cloud.Debugger.V2.SourceLocation();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.Condition.Length != 0) {
        Condition = other.Condition;
      }
      expressions_.Add(other.expressions_);
      if (other.LogMessageFormat.Length != 0) {
        LogMessageFormat = other.LogMessageFormat;
      }
      if (other.LogLevel != 0) {
        LogLevel = other.LogLevel;
      }
      if (other.IsFinalState != false) {
        IsFinalState = other.IsFinalState;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.finalTime_ != null) {
        if (finalTime_ == null) {
          finalTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FinalTime.MergeFrom(other.FinalTime);
      }
      if (other.UserEmail.Length != 0) {
        UserEmail = other.UserEmail;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Google.Cloud.Debugger.V2.StatusMessage();
        }
        Status.MergeFrom(other.Status);
      }
      stackFrames_.Add(other.stackFrames_);
      evaluatedExpressions_.Add(other.evaluatedExpressions_);
      variableTable_.Add(other.variableTable_);
      labels_.Add(other.labels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (location_ == null) {
              location_ = new global::Google.Cloud.Debugger.V2.SourceLocation();
            }
            input.ReadMessage(location_);
            break;
          }
          case 26: {
            Condition = input.ReadString();
            break;
          }
          case 34: {
            expressions_.AddEntriesFrom(input, _repeated_expressions_codec);
            break;
          }
          case 40: {
            IsFinalState = input.ReadBool();
            break;
          }
          case 58: {
            stackFrames_.AddEntriesFrom(input, _repeated_stackFrames_codec);
            break;
          }
          case 66: {
            evaluatedExpressions_.AddEntriesFrom(input, _repeated_evaluatedExpressions_codec);
            break;
          }
          case 74: {
            variableTable_.AddEntriesFrom(input, _repeated_variableTable_codec);
            break;
          }
          case 82: {
            if (status_ == null) {
              status_ = new global::Google.Cloud.Debugger.V2.StatusMessage();
            }
            input.ReadMessage(status_);
            break;
          }
          case 90: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 98: {
            if (finalTime_ == null) {
              finalTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(finalTime_);
            break;
          }
          case 104: {
            action_ = (global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action) input.ReadEnum();
            break;
          }
          case 114: {
            LogMessageFormat = input.ReadString();
            break;
          }
          case 120: {
            logLevel_ = (global::Google.Cloud.Debugger.V2.Breakpoint.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 130: {
            UserEmail = input.ReadString();
            break;
          }
          case 138: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Breakpoint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Actions that can be taken when a breakpoint hits.
      /// Agents should reject breakpoints with unsupported or unknown action values.
      /// </summary>
      public enum Action {
        /// <summary>
        /// Capture stack frame and variables and update the breakpoint.
        /// The data is only captured once. After that the breakpoint is set
        /// in a final state.
        /// </summary>
        [pbr::OriginalName("CAPTURE")] Capture = 0,
        /// <summary>
        /// Log each breakpoint hit. The breakpoint remains active until
        /// deleted or expired.
        /// </summary>
        [pbr::OriginalName("LOG")] Log = 1,
      }

      /// <summary>
      /// Log severity levels.
      /// </summary>
      public enum LogLevel {
        /// <summary>
        /// Information log message.
        /// </summary>
        [pbr::OriginalName("INFO")] Info = 0,
        /// <summary>
        /// Warning log message.
        /// </summary>
        [pbr::OriginalName("WARNING")] Warning = 1,
        /// <summary>
        /// Error log message.
        /// </summary>
        [pbr::OriginalName("ERROR")] Error = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Represents the debugged application. The application may include one or more
  /// replicated processes executing the same code. Each of these processes is
  /// attached with a debugger agent, carrying out the debugging commands.
  /// Agents attached to the same debuggee identify themselves as such by using
  /// exactly the same Debuggee message value when registering.
  /// </summary>
  public sealed partial class Debuggee : pb::IMessage<Debuggee> {
    private static readonly pb::MessageParser<Debuggee> _parser = new pb::MessageParser<Debuggee>(() => new Debuggee());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Debuggee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debuggee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debuggee(Debuggee other) : this() {
      id_ = other.id_;
      project_ = other.project_;
      uniquifier_ = other.uniquifier_;
      description_ = other.description_;
      isInactive_ = other.isInactive_;
      agentVersion_ = other.agentVersion_;
      isDisabled_ = other.isDisabled_;
      Status = other.status_ != null ? other.Status.Clone() : null;
      sourceContexts_ = other.sourceContexts_.Clone();
      extSourceContexts_ = other.extSourceContexts_.Clone();
      labels_ = other.labels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Debuggee Clone() {
      return new Debuggee(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Unique identifier for the debuggee generated by the controller service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project" field.</summary>
    public const int ProjectFieldNumber = 2;
    private string project_ = "";
    /// <summary>
    /// Project the debuggee is associated with.
    /// Use project number or id when registering a Google Cloud Platform project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Project {
      get { return project_; }
      set {
        project_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uniquifier" field.</summary>
    public const int UniquifierFieldNumber = 3;
    private string uniquifier_ = "";
    /// <summary>
    /// Uniquifier to further distiguish the application.
    /// It is possible that different applications might have identical values in
    /// the debuggee message, thus, incorrectly identified as a single application
    /// by the Controller service. This field adds salt to further distiguish the
    /// application. Agents should consider seeding this field with value that
    /// identifies the code, binary, configuration and environment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uniquifier {
      get { return uniquifier_; }
      set {
        uniquifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// Human readable description of the debuggee.
    /// Including a human-readable project name, environment name and version
    /// information is recommended.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_inactive" field.</summary>
    public const int IsInactiveFieldNumber = 5;
    private bool isInactive_;
    /// <summary>
    /// If set to `true`, indicates that Controller service does not detect any
    /// activity from the debuggee agents and the application is possibly stopped.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInactive {
      get { return isInactive_; }
      set {
        isInactive_ = value;
      }
    }

    /// <summary>Field number for the "agent_version" field.</summary>
    public const int AgentVersionFieldNumber = 6;
    private string agentVersion_ = "";
    /// <summary>
    /// Version ID of the agent.
    /// Schema: `domain/language-platform/vmajor.minor` (for example
    /// `google.com/java-gcp/v1.1`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AgentVersion {
      get { return agentVersion_; }
      set {
        agentVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_disabled" field.</summary>
    public const int IsDisabledFieldNumber = 7;
    private bool isDisabled_;
    /// <summary>
    /// If set to `true`, indicates that the agent should disable itself and
    /// detach from the debuggee.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDisabled {
      get { return isDisabled_; }
      set {
        isDisabled_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private global::Google.Cloud.Debugger.V2.StatusMessage status_;
    /// <summary>
    /// Human readable message to be displayed to the user about this debuggee.
    /// Absence of this field indicates no status. The message can be either
    /// informational or an error status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.StatusMessage Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "source_contexts" field.</summary>
    public const int SourceContextsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Google.Cloud.DevTools.Source.V1.SourceContext> _repeated_sourceContexts_codec
        = pb::FieldCodec.ForMessage(74, global::Google.Cloud.DevTools.Source.V1.SourceContext.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.DevTools.Source.V1.SourceContext> sourceContexts_ = new pbc::RepeatedField<global::Google.Cloud.DevTools.Source.V1.SourceContext>();
    /// <summary>
    /// References to the locations and revisions of the source code used in the
    /// deployed application.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.DevTools.Source.V1.SourceContext> SourceContexts {
      get { return sourceContexts_; }
    }

    /// <summary>Field number for the "ext_source_contexts" field.</summary>
    public const int ExtSourceContextsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext> _repeated_extSourceContexts_codec
        = pb::FieldCodec.ForMessage(106, global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext> extSourceContexts_ = new pbc::RepeatedField<global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext>();
    /// <summary>
    /// References to the locations and revisions of the source code used in the
    /// deployed application.
    ///
    /// NOTE: this field is experimental and can be ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext> ExtSourceContexts {
      get { return extSourceContexts_; }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 11;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 90);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// A set of custom debuggee properties, populated by the agent, to be
    /// displayed to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Debuggee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Debuggee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Project != other.Project) return false;
      if (Uniquifier != other.Uniquifier) return false;
      if (Description != other.Description) return false;
      if (IsInactive != other.IsInactive) return false;
      if (AgentVersion != other.AgentVersion) return false;
      if (IsDisabled != other.IsDisabled) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if(!sourceContexts_.Equals(other.sourceContexts_)) return false;
      if(!extSourceContexts_.Equals(other.extSourceContexts_)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Project.Length != 0) hash ^= Project.GetHashCode();
      if (Uniquifier.Length != 0) hash ^= Uniquifier.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (IsInactive != false) hash ^= IsInactive.GetHashCode();
      if (AgentVersion.Length != 0) hash ^= AgentVersion.GetHashCode();
      if (IsDisabled != false) hash ^= IsDisabled.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= sourceContexts_.GetHashCode();
      hash ^= extSourceContexts_.GetHashCode();
      hash ^= Labels.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Project.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Project);
      }
      if (Uniquifier.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Uniquifier);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (IsInactive != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsInactive);
      }
      if (AgentVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AgentVersion);
      }
      if (IsDisabled != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsDisabled);
      }
      if (status_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Status);
      }
      sourceContexts_.WriteTo(output, _repeated_sourceContexts_codec);
      labels_.WriteTo(output, _map_labels_codec);
      extSourceContexts_.WriteTo(output, _repeated_extSourceContexts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Project.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Project);
      }
      if (Uniquifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uniquifier);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (IsInactive != false) {
        size += 1 + 1;
      }
      if (AgentVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AgentVersion);
      }
      if (IsDisabled != false) {
        size += 1 + 1;
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += sourceContexts_.CalculateSize(_repeated_sourceContexts_codec);
      size += extSourceContexts_.CalculateSize(_repeated_extSourceContexts_codec);
      size += labels_.CalculateSize(_map_labels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Debuggee other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Project.Length != 0) {
        Project = other.Project;
      }
      if (other.Uniquifier.Length != 0) {
        Uniquifier = other.Uniquifier;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.IsInactive != false) {
        IsInactive = other.IsInactive;
      }
      if (other.AgentVersion.Length != 0) {
        AgentVersion = other.AgentVersion;
      }
      if (other.IsDisabled != false) {
        IsDisabled = other.IsDisabled;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Google.Cloud.Debugger.V2.StatusMessage();
        }
        Status.MergeFrom(other.Status);
      }
      sourceContexts_.Add(other.sourceContexts_);
      extSourceContexts_.Add(other.extSourceContexts_);
      labels_.Add(other.labels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Project = input.ReadString();
            break;
          }
          case 26: {
            Uniquifier = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 40: {
            IsInactive = input.ReadBool();
            break;
          }
          case 50: {
            AgentVersion = input.ReadString();
            break;
          }
          case 56: {
            IsDisabled = input.ReadBool();
            break;
          }
          case 66: {
            if (status_ == null) {
              status_ = new global::Google.Cloud.Debugger.V2.StatusMessage();
            }
            input.ReadMessage(status_);
            break;
          }
          case 74: {
            sourceContexts_.AddEntriesFrom(input, _repeated_sourceContexts_codec);
            break;
          }
          case 90: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 106: {
            extSourceContexts_.AddEntriesFrom(input, _repeated_extSourceContexts_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
