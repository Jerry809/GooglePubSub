// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/clouddebugger/v2/controller.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Debugger.V2 {

  /// <summary>Holder for reflection information generated from google/devtools/clouddebugger/v2/controller.proto</summary>
  public static partial class ControllerReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/clouddebugger/v2/controller.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFnb29nbGUvZGV2dG9vbHMvY2xvdWRkZWJ1Z2dlci92Mi9jb250cm9sbGVy",
            "LnByb3RvEiBnb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52MhocZ29v",
            "Z2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxorZ29vZ2xlL2RldnRvb2xzL2Ns",
            "b3VkZGVidWdnZXIvdjIvZGF0YS5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL2Vt",
            "cHR5LnByb3RvIlcKF1JlZ2lzdGVyRGVidWdnZWVSZXF1ZXN0EjwKCGRlYnVn",
            "Z2VlGAEgASgLMiouZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIu",
            "RGVidWdnZWUiWAoYUmVnaXN0ZXJEZWJ1Z2dlZVJlc3BvbnNlEjwKCGRlYnVn",
            "Z2VlGAEgASgLMiouZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIu",
            "RGVidWdnZWUiYwocTGlzdEFjdGl2ZUJyZWFrcG9pbnRzUmVxdWVzdBITCgtk",
            "ZWJ1Z2dlZV9pZBgBIAEoCRISCgp3YWl0X3Rva2VuGAIgASgJEhoKEnN1Y2Nl",
            "c3Nfb25fdGltZW91dBgDIAEoCCKRAQodTGlzdEFjdGl2ZUJyZWFrcG9pbnRz",
            "UmVzcG9uc2USQQoLYnJlYWtwb2ludHMYASADKAsyLC5nb29nbGUuZGV2dG9v",
            "bHMuY2xvdWRkZWJ1Z2dlci52Mi5CcmVha3BvaW50EhcKD25leHRfd2FpdF90",
            "b2tlbhgCIAEoCRIUCgx3YWl0X2V4cGlyZWQYAyABKAgidgodVXBkYXRlQWN0",
            "aXZlQnJlYWtwb2ludFJlcXVlc3QSEwoLZGVidWdnZWVfaWQYASABKAkSQAoK",
            "YnJlYWtwb2ludBgCIAEoCzIsLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVn",
            "Z2VyLnYyLkJyZWFrcG9pbnQiIAoeVXBkYXRlQWN0aXZlQnJlYWtwb2ludFJl",
            "c3BvbnNlMosFCgtDb250cm9sbGVyMhK3AQoQUmVnaXN0ZXJEZWJ1Z2dlZRI5",
            "Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLlJlZ2lzdGVyRGVi",
            "dWdnZWVSZXF1ZXN0GjouZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIu",
            "djIuUmVnaXN0ZXJEZWJ1Z2dlZVJlc3BvbnNlIiyC0+STAiYiIS92Mi9jb250",
            "cm9sbGVyL2RlYnVnZ2Vlcy9yZWdpc3RlcjoBKhLUAQoVTGlzdEFjdGl2ZUJy",
            "ZWFrcG9pbnRzEj4uZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIu",
            "TGlzdEFjdGl2ZUJyZWFrcG9pbnRzUmVxdWVzdBo/Lmdvb2dsZS5kZXZ0b29s",
            "cy5jbG91ZGRlYnVnZ2VyLnYyLkxpc3RBY3RpdmVCcmVha3BvaW50c1Jlc3Bv",
            "bnNlIjqC0+STAjQSMi92Mi9jb250cm9sbGVyL2RlYnVnZ2Vlcy97ZGVidWdn",
            "ZWVfaWR9L2JyZWFrcG9pbnRzEuoBChZVcGRhdGVBY3RpdmVCcmVha3BvaW50",
            "Ej8uZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuVXBkYXRlQWN0",
            "aXZlQnJlYWtwb2ludFJlcXVlc3QaQC5nb29nbGUuZGV2dG9vbHMuY2xvdWRk",
            "ZWJ1Z2dlci52Mi5VcGRhdGVBY3RpdmVCcmVha3BvaW50UmVzcG9uc2UiTYLT",
            "5JMCRxpCL3YyL2NvbnRyb2xsZXIvZGVidWdnZWVzL3tkZWJ1Z2dlZV9pZH0v",
            "YnJlYWtwb2ludHMve2JyZWFrcG9pbnQuaWR9OgEqQqMBCiRjb20uZ29vZ2xl",
            "LmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjJCD0NvbnRyb2xsZXJQcm90b1AB",
            "Wk1nb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2RldnRv",
            "b2xzL2Nsb3VkZGVidWdnZXIvdjI7Y2xvdWRkZWJ1Z2dlcqoCGEdvb2dsZS5D",
            "bG91ZC5EZWJ1Z2dlci5WMmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.Debugger.V2.DataReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.RegisterDebuggeeRequest), global::Google.Cloud.Debugger.V2.RegisterDebuggeeRequest.Parser, new[]{ "Debuggee" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.RegisterDebuggeeResponse), global::Google.Cloud.Debugger.V2.RegisterDebuggeeResponse.Parser, new[]{ "Debuggee" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListActiveBreakpointsRequest), global::Google.Cloud.Debugger.V2.ListActiveBreakpointsRequest.Parser, new[]{ "DebuggeeId", "WaitToken", "SuccessOnTimeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListActiveBreakpointsResponse), global::Google.Cloud.Debugger.V2.ListActiveBreakpointsResponse.Parser, new[]{ "Breakpoints", "NextWaitToken", "WaitExpired" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.UpdateActiveBreakpointRequest), global::Google.Cloud.Debugger.V2.UpdateActiveBreakpointRequest.Parser, new[]{ "DebuggeeId", "Breakpoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.UpdateActiveBreakpointResponse), global::Google.Cloud.Debugger.V2.UpdateActiveBreakpointResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request to register a debuggee.
  /// </summary>
  public sealed partial class RegisterDebuggeeRequest : pb::IMessage<RegisterDebuggeeRequest> {
    private static readonly pb::MessageParser<RegisterDebuggeeRequest> _parser = new pb::MessageParser<RegisterDebuggeeRequest>(() => new RegisterDebuggeeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterDebuggeeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.ControllerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDebuggeeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDebuggeeRequest(RegisterDebuggeeRequest other) : this() {
      Debuggee = other.debuggee_ != null ? other.Debuggee.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDebuggeeRequest Clone() {
      return new RegisterDebuggeeRequest(this);
    }

    /// <summary>Field number for the "debuggee" field.</summary>
    public const int DebuggeeFieldNumber = 1;
    private global::Google.Cloud.Debugger.V2.Debuggee debuggee_;
    /// <summary>
    /// Debuggee information to register.
    /// The fields `project`, `uniquifier`, `description` and `agent_version`
    /// of the debuggee must be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.Debuggee Debuggee {
      get { return debuggee_; }
      set {
        debuggee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterDebuggeeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterDebuggeeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Debuggee, other.Debuggee)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (debuggee_ != null) hash ^= Debuggee.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (debuggee_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Debuggee);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (debuggee_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Debuggee);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterDebuggeeRequest other) {
      if (other == null) {
        return;
      }
      if (other.debuggee_ != null) {
        if (debuggee_ == null) {
          debuggee_ = new global::Google.Cloud.Debugger.V2.Debuggee();
        }
        Debuggee.MergeFrom(other.Debuggee);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (debuggee_ == null) {
              debuggee_ = new global::Google.Cloud.Debugger.V2.Debuggee();
            }
            input.ReadMessage(debuggee_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for registering a debuggee.
  /// </summary>
  public sealed partial class RegisterDebuggeeResponse : pb::IMessage<RegisterDebuggeeResponse> {
    private static readonly pb::MessageParser<RegisterDebuggeeResponse> _parser = new pb::MessageParser<RegisterDebuggeeResponse>(() => new RegisterDebuggeeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterDebuggeeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.ControllerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDebuggeeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDebuggeeResponse(RegisterDebuggeeResponse other) : this() {
      Debuggee = other.debuggee_ != null ? other.Debuggee.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterDebuggeeResponse Clone() {
      return new RegisterDebuggeeResponse(this);
    }

    /// <summary>Field number for the "debuggee" field.</summary>
    public const int DebuggeeFieldNumber = 1;
    private global::Google.Cloud.Debugger.V2.Debuggee debuggee_;
    /// <summary>
    /// Debuggee resource.
    /// The field `id` is guranteed to be set (in addition to the echoed fields).
    /// If the field `is_disabled` is set to `true`, the agent should disable
    /// itself by removing all breakpoints and detaching from the application.
    /// It should however continue to poll `RegisterDebuggee` until reenabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.Debuggee Debuggee {
      get { return debuggee_; }
      set {
        debuggee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterDebuggeeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterDebuggeeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Debuggee, other.Debuggee)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (debuggee_ != null) hash ^= Debuggee.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (debuggee_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Debuggee);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (debuggee_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Debuggee);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterDebuggeeResponse other) {
      if (other == null) {
        return;
      }
      if (other.debuggee_ != null) {
        if (debuggee_ == null) {
          debuggee_ = new global::Google.Cloud.Debugger.V2.Debuggee();
        }
        Debuggee.MergeFrom(other.Debuggee);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (debuggee_ == null) {
              debuggee_ = new global::Google.Cloud.Debugger.V2.Debuggee();
            }
            input.ReadMessage(debuggee_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list active breakpoints.
  /// </summary>
  public sealed partial class ListActiveBreakpointsRequest : pb::IMessage<ListActiveBreakpointsRequest> {
    private static readonly pb::MessageParser<ListActiveBreakpointsRequest> _parser = new pb::MessageParser<ListActiveBreakpointsRequest>(() => new ListActiveBreakpointsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListActiveBreakpointsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.ControllerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListActiveBreakpointsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListActiveBreakpointsRequest(ListActiveBreakpointsRequest other) : this() {
      debuggeeId_ = other.debuggeeId_;
      waitToken_ = other.waitToken_;
      successOnTimeout_ = other.successOnTimeout_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListActiveBreakpointsRequest Clone() {
      return new ListActiveBreakpointsRequest(this);
    }

    /// <summary>Field number for the "debuggee_id" field.</summary>
    public const int DebuggeeIdFieldNumber = 1;
    private string debuggeeId_ = "";
    /// <summary>
    /// Identifies the debuggee.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebuggeeId {
      get { return debuggeeId_; }
      set {
        debuggeeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wait_token" field.</summary>
    public const int WaitTokenFieldNumber = 2;
    private string waitToken_ = "";
    /// <summary>
    /// A token that, if specified, blocks the method call until the list
    /// of active breakpoints has changed, or a server-selected timeout has
    /// expired. The value should be set from the `next_wait_token` field in
    /// the last response. The initial value should be set to `"init"`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WaitToken {
      get { return waitToken_; }
      set {
        waitToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "success_on_timeout" field.</summary>
    public const int SuccessOnTimeoutFieldNumber = 3;
    private bool successOnTimeout_;
    /// <summary>
    /// If set to `true` (recommended), returns `google.rpc.Code.OK` status and
    /// sets the `wait_expired` response field to `true` when the server-selected
    /// timeout has expired.
    ///
    /// If set to `false` (deprecated), returns `google.rpc.Code.ABORTED` status
    /// when the server-selected timeout has expired.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SuccessOnTimeout {
      get { return successOnTimeout_; }
      set {
        successOnTimeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListActiveBreakpointsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListActiveBreakpointsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DebuggeeId != other.DebuggeeId) return false;
      if (WaitToken != other.WaitToken) return false;
      if (SuccessOnTimeout != other.SuccessOnTimeout) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DebuggeeId.Length != 0) hash ^= DebuggeeId.GetHashCode();
      if (WaitToken.Length != 0) hash ^= WaitToken.GetHashCode();
      if (SuccessOnTimeout != false) hash ^= SuccessOnTimeout.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (WaitToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WaitToken);
      }
      if (SuccessOnTimeout != false) {
        output.WriteRawTag(24);
        output.WriteBool(SuccessOnTimeout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DebuggeeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebuggeeId);
      }
      if (WaitToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WaitToken);
      }
      if (SuccessOnTimeout != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListActiveBreakpointsRequest other) {
      if (other == null) {
        return;
      }
      if (other.DebuggeeId.Length != 0) {
        DebuggeeId = other.DebuggeeId;
      }
      if (other.WaitToken.Length != 0) {
        WaitToken = other.WaitToken;
      }
      if (other.SuccessOnTimeout != false) {
        SuccessOnTimeout = other.SuccessOnTimeout;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 18: {
            WaitToken = input.ReadString();
            break;
          }
          case 24: {
            SuccessOnTimeout = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for listing active breakpoints.
  /// </summary>
  public sealed partial class ListActiveBreakpointsResponse : pb::IMessage<ListActiveBreakpointsResponse> {
    private static readonly pb::MessageParser<ListActiveBreakpointsResponse> _parser = new pb::MessageParser<ListActiveBreakpointsResponse>(() => new ListActiveBreakpointsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListActiveBreakpointsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.ControllerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListActiveBreakpointsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListActiveBreakpointsResponse(ListActiveBreakpointsResponse other) : this() {
      breakpoints_ = other.breakpoints_.Clone();
      nextWaitToken_ = other.nextWaitToken_;
      waitExpired_ = other.waitExpired_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListActiveBreakpointsResponse Clone() {
      return new ListActiveBreakpointsResponse(this);
    }

    /// <summary>Field number for the "breakpoints" field.</summary>
    public const int BreakpointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Debugger.V2.Breakpoint> _repeated_breakpoints_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Debugger.V2.Breakpoint.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Breakpoint> breakpoints_ = new pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Breakpoint>();
    /// <summary>
    /// List of all active breakpoints.
    /// The fields `id` and `location` are guaranteed to be set on each breakpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Breakpoint> Breakpoints {
      get { return breakpoints_; }
    }

    /// <summary>Field number for the "next_wait_token" field.</summary>
    public const int NextWaitTokenFieldNumber = 2;
    private string nextWaitToken_ = "";
    /// <summary>
    /// A token that can be used in the next method call to block until
    /// the list of breakpoints changes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextWaitToken {
      get { return nextWaitToken_; }
      set {
        nextWaitToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wait_expired" field.</summary>
    public const int WaitExpiredFieldNumber = 3;
    private bool waitExpired_;
    /// <summary>
    /// If set to `true`, indicates that there is no change to the
    /// list of active breakpoints and the server-selected timeout has expired.
    /// The `breakpoints` field would be empty and should be ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WaitExpired {
      get { return waitExpired_; }
      set {
        waitExpired_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListActiveBreakpointsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListActiveBreakpointsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!breakpoints_.Equals(other.breakpoints_)) return false;
      if (NextWaitToken != other.NextWaitToken) return false;
      if (WaitExpired != other.WaitExpired) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= breakpoints_.GetHashCode();
      if (NextWaitToken.Length != 0) hash ^= NextWaitToken.GetHashCode();
      if (WaitExpired != false) hash ^= WaitExpired.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      breakpoints_.WriteTo(output, _repeated_breakpoints_codec);
      if (NextWaitToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextWaitToken);
      }
      if (WaitExpired != false) {
        output.WriteRawTag(24);
        output.WriteBool(WaitExpired);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += breakpoints_.CalculateSize(_repeated_breakpoints_codec);
      if (NextWaitToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextWaitToken);
      }
      if (WaitExpired != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListActiveBreakpointsResponse other) {
      if (other == null) {
        return;
      }
      breakpoints_.Add(other.breakpoints_);
      if (other.NextWaitToken.Length != 0) {
        NextWaitToken = other.NextWaitToken;
      }
      if (other.WaitExpired != false) {
        WaitExpired = other.WaitExpired;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            breakpoints_.AddEntriesFrom(input, _repeated_breakpoints_codec);
            break;
          }
          case 18: {
            NextWaitToken = input.ReadString();
            break;
          }
          case 24: {
            WaitExpired = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to update an active breakpoint.
  /// </summary>
  public sealed partial class UpdateActiveBreakpointRequest : pb::IMessage<UpdateActiveBreakpointRequest> {
    private static readonly pb::MessageParser<UpdateActiveBreakpointRequest> _parser = new pb::MessageParser<UpdateActiveBreakpointRequest>(() => new UpdateActiveBreakpointRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateActiveBreakpointRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.ControllerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateActiveBreakpointRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateActiveBreakpointRequest(UpdateActiveBreakpointRequest other) : this() {
      debuggeeId_ = other.debuggeeId_;
      Breakpoint = other.breakpoint_ != null ? other.Breakpoint.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateActiveBreakpointRequest Clone() {
      return new UpdateActiveBreakpointRequest(this);
    }

    /// <summary>Field number for the "debuggee_id" field.</summary>
    public const int DebuggeeIdFieldNumber = 1;
    private string debuggeeId_ = "";
    /// <summary>
    /// Identifies the debuggee being debugged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebuggeeId {
      get { return debuggeeId_; }
      set {
        debuggeeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "breakpoint" field.</summary>
    public const int BreakpointFieldNumber = 2;
    private global::Google.Cloud.Debugger.V2.Breakpoint breakpoint_;
    /// <summary>
    /// Updated breakpoint information.
    /// The field `id` must be set.
    /// The agent must echo all Breakpoint specification fields in the update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.Breakpoint Breakpoint {
      get { return breakpoint_; }
      set {
        breakpoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateActiveBreakpointRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateActiveBreakpointRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DebuggeeId != other.DebuggeeId) return false;
      if (!object.Equals(Breakpoint, other.Breakpoint)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DebuggeeId.Length != 0) hash ^= DebuggeeId.GetHashCode();
      if (breakpoint_ != null) hash ^= Breakpoint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (breakpoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Breakpoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DebuggeeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebuggeeId);
      }
      if (breakpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Breakpoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateActiveBreakpointRequest other) {
      if (other == null) {
        return;
      }
      if (other.DebuggeeId.Length != 0) {
        DebuggeeId = other.DebuggeeId;
      }
      if (other.breakpoint_ != null) {
        if (breakpoint_ == null) {
          breakpoint_ = new global::Google.Cloud.Debugger.V2.Breakpoint();
        }
        Breakpoint.MergeFrom(other.Breakpoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 18: {
            if (breakpoint_ == null) {
              breakpoint_ = new global::Google.Cloud.Debugger.V2.Breakpoint();
            }
            input.ReadMessage(breakpoint_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for updating an active breakpoint.
  /// The message is defined to allow future extensions.
  /// </summary>
  public sealed partial class UpdateActiveBreakpointResponse : pb::IMessage<UpdateActiveBreakpointResponse> {
    private static readonly pb::MessageParser<UpdateActiveBreakpointResponse> _parser = new pb::MessageParser<UpdateActiveBreakpointResponse>(() => new UpdateActiveBreakpointResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateActiveBreakpointResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.ControllerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateActiveBreakpointResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateActiveBreakpointResponse(UpdateActiveBreakpointResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateActiveBreakpointResponse Clone() {
      return new UpdateActiveBreakpointResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateActiveBreakpointResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateActiveBreakpointResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateActiveBreakpointResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
