// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/clouddebugger/v2/debugger.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Debugger.V2 {

  /// <summary>Holder for reflection information generated from google/devtools/clouddebugger/v2/debugger.proto</summary>
  public static partial class DebuggerReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/clouddebugger/v2/debugger.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DebuggerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9nb29nbGUvZGV2dG9vbHMvY2xvdWRkZWJ1Z2dlci92Mi9kZWJ1Z2dlci5w",
            "cm90bxIgZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIaHGdvb2ds",
            "ZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aK2dvb2dsZS9kZXZ0b29scy9jbG91",
            "ZGRlYnVnZ2VyL3YyL2RhdGEucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0",
            "eS5wcm90byKFAQoUU2V0QnJlYWtwb2ludFJlcXVlc3QSEwoLZGVidWdnZWVf",
            "aWQYASABKAkSQAoKYnJlYWtwb2ludBgCIAEoCzIsLmdvb2dsZS5kZXZ0b29s",
            "cy5jbG91ZGRlYnVnZ2VyLnYyLkJyZWFrcG9pbnQSFgoOY2xpZW50X3ZlcnNp",
            "b24YBCABKAkiWQoVU2V0QnJlYWtwb2ludFJlc3BvbnNlEkAKCmJyZWFrcG9p",
            "bnQYASABKAsyLC5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5C",
            "cmVha3BvaW50IloKFEdldEJyZWFrcG9pbnRSZXF1ZXN0EhMKC2RlYnVnZ2Vl",
            "X2lkGAEgASgJEhUKDWJyZWFrcG9pbnRfaWQYAiABKAkSFgoOY2xpZW50X3Zl",
            "cnNpb24YBCABKAkiWQoVR2V0QnJlYWtwb2ludFJlc3BvbnNlEkAKCmJyZWFr",
            "cG9pbnQYASABKAsyLC5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52",
            "Mi5CcmVha3BvaW50Il0KF0RlbGV0ZUJyZWFrcG9pbnRSZXF1ZXN0EhMKC2Rl",
            "YnVnZ2VlX2lkGAEgASgJEhUKDWJyZWFrcG9pbnRfaWQYAiABKAkSFgoOY2xp",
            "ZW50X3ZlcnNpb24YAyABKAki4gIKFkxpc3RCcmVha3BvaW50c1JlcXVlc3QS",
            "EwoLZGVidWdnZWVfaWQYASABKAkSGQoRaW5jbHVkZV9hbGxfdXNlcnMYAiAB",
            "KAgSGAoQaW5jbHVkZV9pbmFjdGl2ZRgDIAEoCBJeCgZhY3Rpb24YBCABKAsy",
            "Ti5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5MaXN0QnJlYWtw",
            "b2ludHNSZXF1ZXN0LkJyZWFrcG9pbnRBY3Rpb25WYWx1ZRIVCg1zdHJpcF9y",
            "ZXN1bHRzGAUgASgIEhIKCndhaXRfdG9rZW4YBiABKAkSFgoOY2xpZW50X3Zl",
            "cnNpb24YCCABKAkaWwoVQnJlYWtwb2ludEFjdGlvblZhbHVlEkIKBXZhbHVl",
            "GAEgASgOMjMuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuQnJl",
            "YWtwb2ludC5BY3Rpb24idQoXTGlzdEJyZWFrcG9pbnRzUmVzcG9uc2USQQoL",
            "YnJlYWtwb2ludHMYASADKAsyLC5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1",
            "Z2dlci52Mi5CcmVha3BvaW50EhcKD25leHRfd2FpdF90b2tlbhgCIAEoCSJZ",
            "ChRMaXN0RGVidWdnZWVzUmVxdWVzdBIPCgdwcm9qZWN0GAIgASgJEhgKEGlu",
            "Y2x1ZGVfaW5hY3RpdmUYAyABKAgSFgoOY2xpZW50X3ZlcnNpb24YBCABKAki",
            "VgoVTGlzdERlYnVnZ2Vlc1Jlc3BvbnNlEj0KCWRlYnVnZ2VlcxgBIAMoCzIq",
            "Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkRlYnVnZ2VlMr0H",
            "CglEZWJ1Z2dlcjISygEKDVNldEJyZWFrcG9pbnQSNi5nb29nbGUuZGV2dG9v",
            "bHMuY2xvdWRkZWJ1Z2dlci52Mi5TZXRCcmVha3BvaW50UmVxdWVzdBo3Lmdv",
            "b2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLlNldEJyZWFrcG9pbnRS",
            "ZXNwb25zZSJIgtPkkwJCIjQvdjIvZGVidWdnZXIvZGVidWdnZWVzL3tkZWJ1",
            "Z2dlZV9pZH0vYnJlYWtwb2ludHMvc2V0OgpicmVha3BvaW50EsoBCg1HZXRC",
            "cmVha3BvaW50EjYuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIu",
            "R2V0QnJlYWtwb2ludFJlcXVlc3QaNy5nb29nbGUuZGV2dG9vbHMuY2xvdWRk",
            "ZWJ1Z2dlci52Mi5HZXRCcmVha3BvaW50UmVzcG9uc2UiSILT5JMCQhJAL3Yy",
            "L2RlYnVnZ2VyL2RlYnVnZ2Vlcy97ZGVidWdnZWVfaWR9L2JyZWFrcG9pbnRz",
            "L3ticmVha3BvaW50X2lkfRKvAQoQRGVsZXRlQnJlYWtwb2ludBI5Lmdvb2ds",
            "ZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkRlbGV0ZUJyZWFrcG9pbnRS",
            "ZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IkiC0+STAkIqQC92Mi9k",
            "ZWJ1Z2dlci9kZWJ1Z2dlZXMve2RlYnVnZ2VlX2lkfS9icmVha3BvaW50cy97",
            "YnJlYWtwb2ludF9pZH0SwAEKD0xpc3RCcmVha3BvaW50cxI4Lmdvb2dsZS5k",
            "ZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkxpc3RCcmVha3BvaW50c1JlcXVl",
            "c3QaOS5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5MaXN0QnJl",
            "YWtwb2ludHNSZXNwb25zZSI4gtPkkwIyEjAvdjIvZGVidWdnZXIvZGVidWdn",
            "ZWVzL3tkZWJ1Z2dlZV9pZH0vYnJlYWtwb2ludHMSoAEKDUxpc3REZWJ1Z2dl",
            "ZXMSNi5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5MaXN0RGVi",
            "dWdnZWVzUmVxdWVzdBo3Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2Vy",
            "LnYyLkxpc3REZWJ1Z2dlZXNSZXNwb25zZSIegtPkkwIYEhYvdjIvZGVidWdn",
            "ZXIvZGVidWdnZWVzQqEBCiRjb20uZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVi",
            "dWdnZXIudjJCDURlYnVnZ2VyUHJvdG9QAVpNZ29vZ2xlLmdvbGFuZy5vcmcv",
            "Z2VucHJvdG8vZ29vZ2xlYXBpcy9kZXZ0b29scy9jbG91ZGRlYnVnZ2VyL3Yy",
            "O2Nsb3VkZGVidWdnZXKqAhhHb29nbGUuQ2xvdWQuRGVidWdnZXIuVjJiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.Debugger.V2.DataReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.SetBreakpointRequest), global::Google.Cloud.Debugger.V2.SetBreakpointRequest.Parser, new[]{ "DebuggeeId", "Breakpoint", "ClientVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.SetBreakpointResponse), global::Google.Cloud.Debugger.V2.SetBreakpointResponse.Parser, new[]{ "Breakpoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.GetBreakpointRequest), global::Google.Cloud.Debugger.V2.GetBreakpointRequest.Parser, new[]{ "DebuggeeId", "BreakpointId", "ClientVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.GetBreakpointResponse), global::Google.Cloud.Debugger.V2.GetBreakpointResponse.Parser, new[]{ "Breakpoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.DeleteBreakpointRequest), global::Google.Cloud.Debugger.V2.DeleteBreakpointRequest.Parser, new[]{ "DebuggeeId", "BreakpointId", "ClientVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListBreakpointsRequest), global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Parser, new[]{ "DebuggeeId", "IncludeAllUsers", "IncludeInactive", "Action", "StripResults", "WaitToken", "ClientVersion" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue), global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue.Parser, new[]{ "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListBreakpointsResponse), global::Google.Cloud.Debugger.V2.ListBreakpointsResponse.Parser, new[]{ "Breakpoints", "NextWaitToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListDebuggeesRequest), global::Google.Cloud.Debugger.V2.ListDebuggeesRequest.Parser, new[]{ "Project", "IncludeInactive", "ClientVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Debugger.V2.ListDebuggeesResponse), global::Google.Cloud.Debugger.V2.ListDebuggeesResponse.Parser, new[]{ "Debuggees" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request to set a breakpoint
  /// </summary>
  public sealed partial class SetBreakpointRequest : pb::IMessage<SetBreakpointRequest> {
    private static readonly pb::MessageParser<SetBreakpointRequest> _parser = new pb::MessageParser<SetBreakpointRequest>(() => new SetBreakpointRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBreakpointRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointRequest(SetBreakpointRequest other) : this() {
      debuggeeId_ = other.debuggeeId_;
      Breakpoint = other.breakpoint_ != null ? other.Breakpoint.Clone() : null;
      clientVersion_ = other.clientVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointRequest Clone() {
      return new SetBreakpointRequest(this);
    }

    /// <summary>Field number for the "debuggee_id" field.</summary>
    public const int DebuggeeIdFieldNumber = 1;
    private string debuggeeId_ = "";
    /// <summary>
    /// ID of the debuggee where the breakpoint is to be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebuggeeId {
      get { return debuggeeId_; }
      set {
        debuggeeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "breakpoint" field.</summary>
    public const int BreakpointFieldNumber = 2;
    private global::Google.Cloud.Debugger.V2.Breakpoint breakpoint_;
    /// <summary>
    /// Breakpoint specification to set.
    /// The field `location` of the breakpoint must be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.Breakpoint Breakpoint {
      get { return breakpoint_; }
      set {
        breakpoint_ = value;
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 4;
    private string clientVersion_ = "";
    /// <summary>
    /// The client version making the call.
    /// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBreakpointRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBreakpointRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DebuggeeId != other.DebuggeeId) return false;
      if (!object.Equals(Breakpoint, other.Breakpoint)) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DebuggeeId.Length != 0) hash ^= DebuggeeId.GetHashCode();
      if (breakpoint_ != null) hash ^= Breakpoint.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (breakpoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Breakpoint);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DebuggeeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebuggeeId);
      }
      if (breakpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Breakpoint);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBreakpointRequest other) {
      if (other == null) {
        return;
      }
      if (other.DebuggeeId.Length != 0) {
        DebuggeeId = other.DebuggeeId;
      }
      if (other.breakpoint_ != null) {
        if (breakpoint_ == null) {
          breakpoint_ = new global::Google.Cloud.Debugger.V2.Breakpoint();
        }
        Breakpoint.MergeFrom(other.Breakpoint);
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 18: {
            if (breakpoint_ == null) {
              breakpoint_ = new global::Google.Cloud.Debugger.V2.Breakpoint();
            }
            input.ReadMessage(breakpoint_);
            break;
          }
          case 34: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for setting a breakpoint.
  /// </summary>
  public sealed partial class SetBreakpointResponse : pb::IMessage<SetBreakpointResponse> {
    private static readonly pb::MessageParser<SetBreakpointResponse> _parser = new pb::MessageParser<SetBreakpointResponse>(() => new SetBreakpointResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBreakpointResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointResponse(SetBreakpointResponse other) : this() {
      Breakpoint = other.breakpoint_ != null ? other.Breakpoint.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBreakpointResponse Clone() {
      return new SetBreakpointResponse(this);
    }

    /// <summary>Field number for the "breakpoint" field.</summary>
    public const int BreakpointFieldNumber = 1;
    private global::Google.Cloud.Debugger.V2.Breakpoint breakpoint_;
    /// <summary>
    /// Breakpoint resource.
    /// The field `id` is guaranteed to be set (in addition to the echoed fileds).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.Breakpoint Breakpoint {
      get { return breakpoint_; }
      set {
        breakpoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBreakpointResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBreakpointResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Breakpoint, other.Breakpoint)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (breakpoint_ != null) hash ^= Breakpoint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (breakpoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Breakpoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (breakpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Breakpoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBreakpointResponse other) {
      if (other == null) {
        return;
      }
      if (other.breakpoint_ != null) {
        if (breakpoint_ == null) {
          breakpoint_ = new global::Google.Cloud.Debugger.V2.Breakpoint();
        }
        Breakpoint.MergeFrom(other.Breakpoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (breakpoint_ == null) {
              breakpoint_ = new global::Google.Cloud.Debugger.V2.Breakpoint();
            }
            input.ReadMessage(breakpoint_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to get breakpoint information.
  /// </summary>
  public sealed partial class GetBreakpointRequest : pb::IMessage<GetBreakpointRequest> {
    private static readonly pb::MessageParser<GetBreakpointRequest> _parser = new pb::MessageParser<GetBreakpointRequest>(() => new GetBreakpointRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBreakpointRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointRequest(GetBreakpointRequest other) : this() {
      debuggeeId_ = other.debuggeeId_;
      breakpointId_ = other.breakpointId_;
      clientVersion_ = other.clientVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointRequest Clone() {
      return new GetBreakpointRequest(this);
    }

    /// <summary>Field number for the "debuggee_id" field.</summary>
    public const int DebuggeeIdFieldNumber = 1;
    private string debuggeeId_ = "";
    /// <summary>
    /// ID of the debuggee whose breakpoint to get.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebuggeeId {
      get { return debuggeeId_; }
      set {
        debuggeeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "breakpoint_id" field.</summary>
    public const int BreakpointIdFieldNumber = 2;
    private string breakpointId_ = "";
    /// <summary>
    /// ID of the breakpoint to get.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BreakpointId {
      get { return breakpointId_; }
      set {
        breakpointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 4;
    private string clientVersion_ = "";
    /// <summary>
    /// The client version making the call.
    /// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBreakpointRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBreakpointRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DebuggeeId != other.DebuggeeId) return false;
      if (BreakpointId != other.BreakpointId) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DebuggeeId.Length != 0) hash ^= DebuggeeId.GetHashCode();
      if (BreakpointId.Length != 0) hash ^= BreakpointId.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (BreakpointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BreakpointId);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DebuggeeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebuggeeId);
      }
      if (BreakpointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BreakpointId);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBreakpointRequest other) {
      if (other == null) {
        return;
      }
      if (other.DebuggeeId.Length != 0) {
        DebuggeeId = other.DebuggeeId;
      }
      if (other.BreakpointId.Length != 0) {
        BreakpointId = other.BreakpointId;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 18: {
            BreakpointId = input.ReadString();
            break;
          }
          case 34: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for getting breakpoint information.
  /// </summary>
  public sealed partial class GetBreakpointResponse : pb::IMessage<GetBreakpointResponse> {
    private static readonly pb::MessageParser<GetBreakpointResponse> _parser = new pb::MessageParser<GetBreakpointResponse>(() => new GetBreakpointResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBreakpointResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointResponse(GetBreakpointResponse other) : this() {
      Breakpoint = other.breakpoint_ != null ? other.Breakpoint.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpointResponse Clone() {
      return new GetBreakpointResponse(this);
    }

    /// <summary>Field number for the "breakpoint" field.</summary>
    public const int BreakpointFieldNumber = 1;
    private global::Google.Cloud.Debugger.V2.Breakpoint breakpoint_;
    /// <summary>
    /// Complete breakpoint state.
    /// The fields `id` and `location` are guaranteed to be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.Breakpoint Breakpoint {
      get { return breakpoint_; }
      set {
        breakpoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBreakpointResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBreakpointResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Breakpoint, other.Breakpoint)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (breakpoint_ != null) hash ^= Breakpoint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (breakpoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Breakpoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (breakpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Breakpoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBreakpointResponse other) {
      if (other == null) {
        return;
      }
      if (other.breakpoint_ != null) {
        if (breakpoint_ == null) {
          breakpoint_ = new global::Google.Cloud.Debugger.V2.Breakpoint();
        }
        Breakpoint.MergeFrom(other.Breakpoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (breakpoint_ == null) {
              breakpoint_ = new global::Google.Cloud.Debugger.V2.Breakpoint();
            }
            input.ReadMessage(breakpoint_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to delete a breakpoint.
  /// </summary>
  public sealed partial class DeleteBreakpointRequest : pb::IMessage<DeleteBreakpointRequest> {
    private static readonly pb::MessageParser<DeleteBreakpointRequest> _parser = new pb::MessageParser<DeleteBreakpointRequest>(() => new DeleteBreakpointRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteBreakpointRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteBreakpointRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteBreakpointRequest(DeleteBreakpointRequest other) : this() {
      debuggeeId_ = other.debuggeeId_;
      breakpointId_ = other.breakpointId_;
      clientVersion_ = other.clientVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteBreakpointRequest Clone() {
      return new DeleteBreakpointRequest(this);
    }

    /// <summary>Field number for the "debuggee_id" field.</summary>
    public const int DebuggeeIdFieldNumber = 1;
    private string debuggeeId_ = "";
    /// <summary>
    /// ID of the debuggee whose breakpoint to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebuggeeId {
      get { return debuggeeId_; }
      set {
        debuggeeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "breakpoint_id" field.</summary>
    public const int BreakpointIdFieldNumber = 2;
    private string breakpointId_ = "";
    /// <summary>
    /// ID of the breakpoint to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BreakpointId {
      get { return breakpointId_; }
      set {
        breakpointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 3;
    private string clientVersion_ = "";
    /// <summary>
    /// The client version making the call.
    /// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteBreakpointRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteBreakpointRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DebuggeeId != other.DebuggeeId) return false;
      if (BreakpointId != other.BreakpointId) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DebuggeeId.Length != 0) hash ^= DebuggeeId.GetHashCode();
      if (BreakpointId.Length != 0) hash ^= BreakpointId.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (BreakpointId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BreakpointId);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DebuggeeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebuggeeId);
      }
      if (BreakpointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BreakpointId);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteBreakpointRequest other) {
      if (other == null) {
        return;
      }
      if (other.DebuggeeId.Length != 0) {
        DebuggeeId = other.DebuggeeId;
      }
      if (other.BreakpointId.Length != 0) {
        BreakpointId = other.BreakpointId;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 18: {
            BreakpointId = input.ReadString();
            break;
          }
          case 26: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list breakpoints.
  /// </summary>
  public sealed partial class ListBreakpointsRequest : pb::IMessage<ListBreakpointsRequest> {
    private static readonly pb::MessageParser<ListBreakpointsRequest> _parser = new pb::MessageParser<ListBreakpointsRequest>(() => new ListBreakpointsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBreakpointsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsRequest(ListBreakpointsRequest other) : this() {
      debuggeeId_ = other.debuggeeId_;
      includeAllUsers_ = other.includeAllUsers_;
      includeInactive_ = other.includeInactive_;
      Action = other.action_ != null ? other.Action.Clone() : null;
      stripResults_ = other.stripResults_;
      waitToken_ = other.waitToken_;
      clientVersion_ = other.clientVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsRequest Clone() {
      return new ListBreakpointsRequest(this);
    }

    /// <summary>Field number for the "debuggee_id" field.</summary>
    public const int DebuggeeIdFieldNumber = 1;
    private string debuggeeId_ = "";
    /// <summary>
    /// ID of the debuggee whose breakpoints to list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebuggeeId {
      get { return debuggeeId_; }
      set {
        debuggeeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include_all_users" field.</summary>
    public const int IncludeAllUsersFieldNumber = 2;
    private bool includeAllUsers_;
    /// <summary>
    /// When set to `true`, the response includes the list of breakpoints set by
    /// any user. Otherwise, it includes only breakpoints set by the caller.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeAllUsers {
      get { return includeAllUsers_; }
      set {
        includeAllUsers_ = value;
      }
    }

    /// <summary>Field number for the "include_inactive" field.</summary>
    public const int IncludeInactiveFieldNumber = 3;
    private bool includeInactive_;
    /// <summary>
    /// When set to `true`, the response includes active and inactive
    /// breakpoints. Otherwise, it includes only active breakpoints.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeInactive {
      get { return includeInactive_; }
      set {
        includeInactive_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue action_;
    /// <summary>
    /// When set, the response includes only breakpoints with the specified action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "strip_results" field.</summary>
    public const int StripResultsFieldNumber = 5;
    private bool stripResults_;
    /// <summary>
    /// This field is deprecated. The following fields are always stripped out of
    /// the result: `stack_frames`, `evaluated_expressions` and `variable_table`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StripResults {
      get { return stripResults_; }
      set {
        stripResults_ = value;
      }
    }

    /// <summary>Field number for the "wait_token" field.</summary>
    public const int WaitTokenFieldNumber = 6;
    private string waitToken_ = "";
    /// <summary>
    /// A wait token that, if specified, blocks the call until the breakpoints
    /// list has changed, or a server selected timeout has expired.  The value
    /// should be set from the last response. The error code
    /// `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which
    /// should be called again with the same `wait_token`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WaitToken {
      get { return waitToken_; }
      set {
        waitToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 8;
    private string clientVersion_ = "";
    /// <summary>
    /// The client version making the call.
    /// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBreakpointsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBreakpointsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DebuggeeId != other.DebuggeeId) return false;
      if (IncludeAllUsers != other.IncludeAllUsers) return false;
      if (IncludeInactive != other.IncludeInactive) return false;
      if (!object.Equals(Action, other.Action)) return false;
      if (StripResults != other.StripResults) return false;
      if (WaitToken != other.WaitToken) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DebuggeeId.Length != 0) hash ^= DebuggeeId.GetHashCode();
      if (IncludeAllUsers != false) hash ^= IncludeAllUsers.GetHashCode();
      if (IncludeInactive != false) hash ^= IncludeInactive.GetHashCode();
      if (action_ != null) hash ^= Action.GetHashCode();
      if (StripResults != false) hash ^= StripResults.GetHashCode();
      if (WaitToken.Length != 0) hash ^= WaitToken.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DebuggeeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DebuggeeId);
      }
      if (IncludeAllUsers != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeAllUsers);
      }
      if (IncludeInactive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeInactive);
      }
      if (action_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Action);
      }
      if (StripResults != false) {
        output.WriteRawTag(40);
        output.WriteBool(StripResults);
      }
      if (WaitToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WaitToken);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ClientVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DebuggeeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebuggeeId);
      }
      if (IncludeAllUsers != false) {
        size += 1 + 1;
      }
      if (IncludeInactive != false) {
        size += 1 + 1;
      }
      if (action_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
      }
      if (StripResults != false) {
        size += 1 + 1;
      }
      if (WaitToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WaitToken);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBreakpointsRequest other) {
      if (other == null) {
        return;
      }
      if (other.DebuggeeId.Length != 0) {
        DebuggeeId = other.DebuggeeId;
      }
      if (other.IncludeAllUsers != false) {
        IncludeAllUsers = other.IncludeAllUsers;
      }
      if (other.IncludeInactive != false) {
        IncludeInactive = other.IncludeInactive;
      }
      if (other.action_ != null) {
        if (action_ == null) {
          action_ = new global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue();
        }
        Action.MergeFrom(other.Action);
      }
      if (other.StripResults != false) {
        StripResults = other.StripResults;
      }
      if (other.WaitToken.Length != 0) {
        WaitToken = other.WaitToken;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DebuggeeId = input.ReadString();
            break;
          }
          case 16: {
            IncludeAllUsers = input.ReadBool();
            break;
          }
          case 24: {
            IncludeInactive = input.ReadBool();
            break;
          }
          case 34: {
            if (action_ == null) {
              action_ = new global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Types.BreakpointActionValue();
            }
            input.ReadMessage(action_);
            break;
          }
          case 40: {
            StripResults = input.ReadBool();
            break;
          }
          case 50: {
            WaitToken = input.ReadString();
            break;
          }
          case 66: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ListBreakpointsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Wrapper message for `Breakpoint.Action`. Defines a filter on the action
      /// field of breakpoints.
      /// </summary>
      public sealed partial class BreakpointActionValue : pb::IMessage<BreakpointActionValue> {
        private static readonly pb::MessageParser<BreakpointActionValue> _parser = new pb::MessageParser<BreakpointActionValue>(() => new BreakpointActionValue());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BreakpointActionValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Debugger.V2.ListBreakpointsRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BreakpointActionValue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BreakpointActionValue(BreakpointActionValue other) : this() {
          value_ = other.value_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BreakpointActionValue Clone() {
          return new BreakpointActionValue(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action value_ = 0;
        /// <summary>
        /// Only breakpoints with the specified action will pass the filter.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BreakpointActionValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BreakpointActionValue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Value != other.Value) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Value != 0) hash ^= Value.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Value != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Value);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BreakpointActionValue other) {
          if (other == null) {
            return;
          }
          if (other.Value != 0) {
            Value = other.Value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                value_ = (global::Google.Cloud.Debugger.V2.Breakpoint.Types.Action) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Response for listing breakpoints.
  /// </summary>
  public sealed partial class ListBreakpointsResponse : pb::IMessage<ListBreakpointsResponse> {
    private static readonly pb::MessageParser<ListBreakpointsResponse> _parser = new pb::MessageParser<ListBreakpointsResponse>(() => new ListBreakpointsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBreakpointsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsResponse(ListBreakpointsResponse other) : this() {
      breakpoints_ = other.breakpoints_.Clone();
      nextWaitToken_ = other.nextWaitToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBreakpointsResponse Clone() {
      return new ListBreakpointsResponse(this);
    }

    /// <summary>Field number for the "breakpoints" field.</summary>
    public const int BreakpointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Debugger.V2.Breakpoint> _repeated_breakpoints_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Debugger.V2.Breakpoint.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Breakpoint> breakpoints_ = new pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Breakpoint>();
    /// <summary>
    /// List of breakpoints matching the request.
    /// The fields `id` and `location` are guaranteed to be set on each breakpoint.
    /// The fields: `stack_frames`, `evaluated_expressions` and `variable_table`
    /// are cleared on each breakpoint regardless of its status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Breakpoint> Breakpoints {
      get { return breakpoints_; }
    }

    /// <summary>Field number for the "next_wait_token" field.</summary>
    public const int NextWaitTokenFieldNumber = 2;
    private string nextWaitToken_ = "";
    /// <summary>
    /// A wait token that can be used in the next call to `list` (REST) or
    /// `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextWaitToken {
      get { return nextWaitToken_; }
      set {
        nextWaitToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBreakpointsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBreakpointsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!breakpoints_.Equals(other.breakpoints_)) return false;
      if (NextWaitToken != other.NextWaitToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= breakpoints_.GetHashCode();
      if (NextWaitToken.Length != 0) hash ^= NextWaitToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      breakpoints_.WriteTo(output, _repeated_breakpoints_codec);
      if (NextWaitToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextWaitToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += breakpoints_.CalculateSize(_repeated_breakpoints_codec);
      if (NextWaitToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextWaitToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBreakpointsResponse other) {
      if (other == null) {
        return;
      }
      breakpoints_.Add(other.breakpoints_);
      if (other.NextWaitToken.Length != 0) {
        NextWaitToken = other.NextWaitToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            breakpoints_.AddEntriesFrom(input, _repeated_breakpoints_codec);
            break;
          }
          case 18: {
            NextWaitToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list debuggees.
  /// </summary>
  public sealed partial class ListDebuggeesRequest : pb::IMessage<ListDebuggeesRequest> {
    private static readonly pb::MessageParser<ListDebuggeesRequest> _parser = new pb::MessageParser<ListDebuggeesRequest>(() => new ListDebuggeesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDebuggeesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesRequest(ListDebuggeesRequest other) : this() {
      project_ = other.project_;
      includeInactive_ = other.includeInactive_;
      clientVersion_ = other.clientVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesRequest Clone() {
      return new ListDebuggeesRequest(this);
    }

    /// <summary>Field number for the "project" field.</summary>
    public const int ProjectFieldNumber = 2;
    private string project_ = "";
    /// <summary>
    /// Project number of a Google Cloud project whose debuggees to list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Project {
      get { return project_; }
      set {
        project_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include_inactive" field.</summary>
    public const int IncludeInactiveFieldNumber = 3;
    private bool includeInactive_;
    /// <summary>
    /// When set to `true`, the result includes all debuggees. Otherwise, the
    /// result includes only debuggees that are active.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeInactive {
      get { return includeInactive_; }
      set {
        includeInactive_ = value;
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 4;
    private string clientVersion_ = "";
    /// <summary>
    /// The client version making the call.
    /// Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDebuggeesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDebuggeesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Project != other.Project) return false;
      if (IncludeInactive != other.IncludeInactive) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Project.Length != 0) hash ^= Project.GetHashCode();
      if (IncludeInactive != false) hash ^= IncludeInactive.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Project.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Project);
      }
      if (IncludeInactive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeInactive);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Project.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Project);
      }
      if (IncludeInactive != false) {
        size += 1 + 1;
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDebuggeesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Project.Length != 0) {
        Project = other.Project;
      }
      if (other.IncludeInactive != false) {
        IncludeInactive = other.IncludeInactive;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Project = input.ReadString();
            break;
          }
          case 24: {
            IncludeInactive = input.ReadBool();
            break;
          }
          case 34: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for listing debuggees.
  /// </summary>
  public sealed partial class ListDebuggeesResponse : pb::IMessage<ListDebuggeesResponse> {
    private static readonly pb::MessageParser<ListDebuggeesResponse> _parser = new pb::MessageParser<ListDebuggeesResponse>(() => new ListDebuggeesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDebuggeesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Debugger.V2.DebuggerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesResponse(ListDebuggeesResponse other) : this() {
      debuggees_ = other.debuggees_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDebuggeesResponse Clone() {
      return new ListDebuggeesResponse(this);
    }

    /// <summary>Field number for the "debuggees" field.</summary>
    public const int DebuggeesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Debugger.V2.Debuggee> _repeated_debuggees_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Debugger.V2.Debuggee.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Debuggee> debuggees_ = new pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Debuggee>();
    /// <summary>
    /// List of debuggees accessible to the calling user.
    /// The fields `debuggee.id` and `description` are guaranteed to be set.
    /// The `description` field is a human readable field provided by agents and
    /// can be displayed to users.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Debugger.V2.Debuggee> Debuggees {
      get { return debuggees_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDebuggeesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDebuggeesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!debuggees_.Equals(other.debuggees_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= debuggees_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      debuggees_.WriteTo(output, _repeated_debuggees_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += debuggees_.CalculateSize(_repeated_debuggees_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDebuggeesResponse other) {
      if (other == null) {
        return;
      }
      debuggees_.Add(other.debuggees_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            debuggees_.AddEntriesFrom(input, _repeated_debuggees_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
