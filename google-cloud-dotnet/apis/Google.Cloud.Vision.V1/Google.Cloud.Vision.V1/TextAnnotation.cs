// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/vision/v1/text_annotation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Vision.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/vision/v1/text_annotation.proto</summary>
  public static partial class TextAnnotationReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/vision/v1/text_annotation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TextAnnotationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvY2xvdWQvdmlzaW9uL3YxL3RleHRfYW5ub3RhdGlvbi5wcm90",
            "bxIWZ29vZ2xlLmNsb3VkLnZpc2lvbi52MRocZ29vZ2xlL2FwaS9hbm5vdGF0",
            "aW9ucy5wcm90bxolZ29vZ2xlL2Nsb3VkL3Zpc2lvbi92MS9nZW9tZXRyeS5w",
            "cm90byKWBAoOVGV4dEFubm90YXRpb24SKwoFcGFnZXMYASADKAsyHC5nb29n",
            "bGUuY2xvdWQudmlzaW9uLnYxLlBhZ2USDAoEdGV4dBgCIAEoCRo9ChBEZXRl",
            "Y3RlZExhbmd1YWdlEhUKDWxhbmd1YWdlX2NvZGUYASABKAkSEgoKY29uZmlk",
            "ZW5jZRgCIAEoAhrVAQoNRGV0ZWN0ZWRCcmVhaxJMCgR0eXBlGAEgASgOMj4u",
            "Z29vZ2xlLmNsb3VkLnZpc2lvbi52MS5UZXh0QW5ub3RhdGlvbi5EZXRlY3Rl",
            "ZEJyZWFrLkJyZWFrVHlwZRIRCglpc19wcmVmaXgYAiABKAgiYwoJQnJlYWtU",
            "eXBlEgsKB1VOS05PV04QABIJCgVTUEFDRRABEg4KClNVUkVfU1BBQ0UQAhIS",
            "Cg5FT0xfU1VSRV9TUEFDRRADEgoKBkhZUEhFThAEEg4KCkxJTkVfQlJFQUsQ",
            "BRqxAQoMVGV4dFByb3BlcnR5ElMKEmRldGVjdGVkX2xhbmd1YWdlcxgBIAMo",
            "CzI3Lmdvb2dsZS5jbG91ZC52aXNpb24udjEuVGV4dEFubm90YXRpb24uRGV0",
            "ZWN0ZWRMYW5ndWFnZRJMCg5kZXRlY3RlZF9icmVhaxgCIAEoCzI0Lmdvb2ds",
            "ZS5jbG91ZC52aXNpb24udjEuVGV4dEFubm90YXRpb24uRGV0ZWN0ZWRCcmVh",
            "ayKbAQoEUGFnZRJFCghwcm9wZXJ0eRgBIAEoCzIzLmdvb2dsZS5jbG91ZC52",
            "aXNpb24udjEuVGV4dEFubm90YXRpb24uVGV4dFByb3BlcnR5Eg0KBXdpZHRo",
            "GAIgASgFEg4KBmhlaWdodBgDIAEoBRItCgZibG9ja3MYBCADKAsyHS5nb29n",
            "bGUuY2xvdWQudmlzaW9uLnYxLkJsb2NrItICCgVCbG9jaxJFCghwcm9wZXJ0",
            "eRgBIAEoCzIzLmdvb2dsZS5jbG91ZC52aXNpb24udjEuVGV4dEFubm90YXRp",
            "b24uVGV4dFByb3BlcnR5EjoKDGJvdW5kaW5nX2JveBgCIAEoCzIkLmdvb2ds",
            "ZS5jbG91ZC52aXNpb24udjEuQm91bmRpbmdQb2x5EjUKCnBhcmFncmFwaHMY",
            "AyADKAsyIS5nb29nbGUuY2xvdWQudmlzaW9uLnYxLlBhcmFncmFwaBI7Cgpi",
            "bG9ja190eXBlGAQgASgOMicuZ29vZ2xlLmNsb3VkLnZpc2lvbi52MS5CbG9j",
            "ay5CbG9ja1R5cGUiUgoJQmxvY2tUeXBlEgsKB1VOS05PV04QABIICgRURVhU",
            "EAESCQoFVEFCTEUQAhILCgdQSUNUVVJFEAMSCQoFUlVMRVIQBBILCgdCQVJD",
            "T0RFEAUiuwEKCVBhcmFncmFwaBJFCghwcm9wZXJ0eRgBIAEoCzIzLmdvb2ds",
            "ZS5jbG91ZC52aXNpb24udjEuVGV4dEFubm90YXRpb24uVGV4dFByb3BlcnR5",
            "EjoKDGJvdW5kaW5nX2JveBgCIAEoCzIkLmdvb2dsZS5jbG91ZC52aXNpb24u",
            "djEuQm91bmRpbmdQb2x5EisKBXdvcmRzGAMgAygLMhwuZ29vZ2xlLmNsb3Vk",
            "LnZpc2lvbi52MS5Xb3JkIroBCgRXb3JkEkUKCHByb3BlcnR5GAEgASgLMjMu",
            "Z29vZ2xlLmNsb3VkLnZpc2lvbi52MS5UZXh0QW5ub3RhdGlvbi5UZXh0UHJv",
            "cGVydHkSOgoMYm91bmRpbmdfYm94GAIgASgLMiQuZ29vZ2xlLmNsb3VkLnZp",
            "c2lvbi52MS5Cb3VuZGluZ1BvbHkSLwoHc3ltYm9scxgDIAMoCzIeLmdvb2ds",
            "ZS5jbG91ZC52aXNpb24udjEuU3ltYm9sIpkBCgZTeW1ib2wSRQoIcHJvcGVy",
            "dHkYASABKAsyMy5nb29nbGUuY2xvdWQudmlzaW9uLnYxLlRleHRBbm5vdGF0",
            "aW9uLlRleHRQcm9wZXJ0eRI6Cgxib3VuZGluZ19ib3gYAiABKAsyJC5nb29n",
            "bGUuY2xvdWQudmlzaW9uLnYxLkJvdW5kaW5nUG9seRIMCgR0ZXh0GAMgASgJ",
            "QnQKGmNvbS5nb29nbGUuY2xvdWQudmlzaW9uLnYxQhNUZXh0QW5ub3RhdGlv",
            "blByb3RvUAFaPGdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFw",
            "aXMvY2xvdWQvdmlzaW9uL3YxO3Zpc2lvbvgBAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.Vision.V1.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.TextAnnotation), global::Google.Cloud.Vision.V1.TextAnnotation.Parser, new[]{ "Pages", "Text" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedLanguage), global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedLanguage.Parser, new[]{ "LanguageCode", "Confidence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedBreak), global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedBreak.Parser, new[]{ "Type", "IsPrefix" }, null, new[]{ typeof(global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedBreak.Types.BreakType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty), global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty.Parser, new[]{ "DetectedLanguages", "DetectedBreak" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.Page), global::Google.Cloud.Vision.V1.Page.Parser, new[]{ "Property", "Width", "Height", "Blocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.Block), global::Google.Cloud.Vision.V1.Block.Parser, new[]{ "Property", "BoundingBox", "Paragraphs", "BlockType" }, null, new[]{ typeof(global::Google.Cloud.Vision.V1.Block.Types.BlockType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.Paragraph), global::Google.Cloud.Vision.V1.Paragraph.Parser, new[]{ "Property", "BoundingBox", "Words" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.Word), global::Google.Cloud.Vision.V1.Word.Parser, new[]{ "Property", "BoundingBox", "Symbols" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.Symbol), global::Google.Cloud.Vision.V1.Symbol.Parser, new[]{ "Property", "BoundingBox", "Text" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// TextAnnotation contains a structured representation of OCR extracted text.
  /// The hierarchy of an OCR extracted text structure is like this:
  ///     TextAnnotation -> Page -> Block -> Paragraph -> Word -> Symbol
  /// Each structural component, starting from Page, may further have their own
  /// properties. Properties describe detected languages, breaks etc.. Please
  /// refer to the [google.cloud.vision.v1.TextAnnotation.TextProperty][google.cloud.vision.v1.TextAnnotation.TextProperty] message
  /// definition below for more detail.
  /// </summary>
  public sealed partial class TextAnnotation : pb::IMessage<TextAnnotation> {
    private static readonly pb::MessageParser<TextAnnotation> _parser = new pb::MessageParser<TextAnnotation>(() => new TextAnnotation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextAnnotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.TextAnnotationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextAnnotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextAnnotation(TextAnnotation other) : this() {
      pages_ = other.pages_.Clone();
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextAnnotation Clone() {
      return new TextAnnotation(this);
    }

    /// <summary>Field number for the "pages" field.</summary>
    public const int PagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.Page> _repeated_pages_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Vision.V1.Page.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.Page> pages_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.Page>();
    /// <summary>
    /// List of pages detected by OCR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.Page> Pages {
      get { return pages_; }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    /// <summary>
    /// UTF-8 text detected on the pages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextAnnotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextAnnotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pages_.Equals(other.pages_)) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pages_.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pages_.WriteTo(output, _repeated_pages_codec);
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pages_.CalculateSize(_repeated_pages_codec);
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextAnnotation other) {
      if (other == null) {
        return;
      }
      pages_.Add(other.pages_);
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pages_.AddEntriesFrom(input, _repeated_pages_codec);
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TextAnnotation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Detected language for a structural component.
      /// </summary>
      public sealed partial class DetectedLanguage : pb::IMessage<DetectedLanguage> {
        private static readonly pb::MessageParser<DetectedLanguage> _parser = new pb::MessageParser<DetectedLanguage>(() => new DetectedLanguage());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DetectedLanguage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Vision.V1.TextAnnotation.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DetectedLanguage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DetectedLanguage(DetectedLanguage other) : this() {
          languageCode_ = other.languageCode_;
          confidence_ = other.confidence_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DetectedLanguage Clone() {
          return new DetectedLanguage(this);
        }

        /// <summary>Field number for the "language_code" field.</summary>
        public const int LanguageCodeFieldNumber = 1;
        private string languageCode_ = "";
        /// <summary>
        /// The BCP-47 language code, such as "en-US" or "sr-Latn". For more
        /// information, see
        /// http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LanguageCode {
          get { return languageCode_; }
          set {
            languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "confidence" field.</summary>
        public const int ConfidenceFieldNumber = 2;
        private float confidence_;
        /// <summary>
        /// Confidence of detected language. Range [0, 1].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Confidence {
          get { return confidence_; }
          set {
            confidence_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DetectedLanguage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DetectedLanguage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LanguageCode != other.LanguageCode) return false;
          if (Confidence != other.Confidence) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
          if (Confidence != 0F) hash ^= Confidence.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LanguageCode.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(LanguageCode);
          }
          if (Confidence != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Confidence);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LanguageCode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
          }
          if (Confidence != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DetectedLanguage other) {
          if (other == null) {
            return;
          }
          if (other.LanguageCode.Length != 0) {
            LanguageCode = other.LanguageCode;
          }
          if (other.Confidence != 0F) {
            Confidence = other.Confidence;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                LanguageCode = input.ReadString();
                break;
              }
              case 21: {
                Confidence = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Detected start or end of a structural component.
      /// </summary>
      public sealed partial class DetectedBreak : pb::IMessage<DetectedBreak> {
        private static readonly pb::MessageParser<DetectedBreak> _parser = new pb::MessageParser<DetectedBreak>(() => new DetectedBreak());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DetectedBreak> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Vision.V1.TextAnnotation.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DetectedBreak() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DetectedBreak(DetectedBreak other) : this() {
          type_ = other.type_;
          isPrefix_ = other.isPrefix_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DetectedBreak Clone() {
          return new DetectedBreak(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedBreak.Types.BreakType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedBreak.Types.BreakType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "is_prefix" field.</summary>
        public const int IsPrefixFieldNumber = 2;
        private bool isPrefix_;
        /// <summary>
        /// True if break prepends the element.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsPrefix {
          get { return isPrefix_; }
          set {
            isPrefix_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DetectedBreak);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DetectedBreak other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (IsPrefix != other.IsPrefix) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (IsPrefix != false) hash ^= IsPrefix.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (IsPrefix != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsPrefix);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (IsPrefix != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DetectedBreak other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.IsPrefix != false) {
            IsPrefix = other.IsPrefix;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                type_ = (global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedBreak.Types.BreakType) input.ReadEnum();
                break;
              }
              case 16: {
                IsPrefix = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the DetectedBreak message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Enum to denote the type of break found. New line, space etc.
          /// </summary>
          public enum BreakType {
            /// <summary>
            /// Unknown break label type.
            /// </summary>
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
            /// <summary>
            /// Regular space.
            /// </summary>
            [pbr::OriginalName("SPACE")] Space = 1,
            /// <summary>
            /// Sure space (very wide).
            /// </summary>
            [pbr::OriginalName("SURE_SPACE")] SureSpace = 2,
            /// <summary>
            /// Line-wrapping break.
            /// </summary>
            [pbr::OriginalName("EOL_SURE_SPACE")] EolSureSpace = 3,
            /// <summary>
            /// End-line hyphen that is not present in text; does
            /// </summary>
            [pbr::OriginalName("HYPHEN")] Hyphen = 4,
            /// <summary>
            /// not co-occur with SPACE, LEADER_SPACE, or
            /// LINE_BREAK.
            /// Line break that ends a paragraph.
            /// </summary>
            [pbr::OriginalName("LINE_BREAK")] LineBreak = 5,
          }

        }
        #endregion

      }

      /// <summary>
      /// Additional information detected on the structural component.
      /// </summary>
      public sealed partial class TextProperty : pb::IMessage<TextProperty> {
        private static readonly pb::MessageParser<TextProperty> _parser = new pb::MessageParser<TextProperty>(() => new TextProperty());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TextProperty> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Vision.V1.TextAnnotation.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextProperty() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextProperty(TextProperty other) : this() {
          detectedLanguages_ = other.detectedLanguages_.Clone();
          DetectedBreak = other.detectedBreak_ != null ? other.DetectedBreak.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TextProperty Clone() {
          return new TextProperty(this);
        }

        /// <summary>Field number for the "detected_languages" field.</summary>
        public const int DetectedLanguagesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedLanguage> _repeated_detectedLanguages_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedLanguage.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedLanguage> detectedLanguages_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedLanguage>();
        /// <summary>
        /// A list of detected languages together with confidence.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedLanguage> DetectedLanguages {
          get { return detectedLanguages_; }
        }

        /// <summary>Field number for the "detected_break" field.</summary>
        public const int DetectedBreakFieldNumber = 2;
        private global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedBreak detectedBreak_;
        /// <summary>
        /// Detected start or end of a text segment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedBreak DetectedBreak {
          get { return detectedBreak_; }
          set {
            detectedBreak_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TextProperty);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TextProperty other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!detectedLanguages_.Equals(other.detectedLanguages_)) return false;
          if (!object.Equals(DetectedBreak, other.DetectedBreak)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= detectedLanguages_.GetHashCode();
          if (detectedBreak_ != null) hash ^= DetectedBreak.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          detectedLanguages_.WriteTo(output, _repeated_detectedLanguages_codec);
          if (detectedBreak_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(DetectedBreak);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += detectedLanguages_.CalculateSize(_repeated_detectedLanguages_codec);
          if (detectedBreak_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DetectedBreak);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TextProperty other) {
          if (other == null) {
            return;
          }
          detectedLanguages_.Add(other.detectedLanguages_);
          if (other.detectedBreak_ != null) {
            if (detectedBreak_ == null) {
              detectedBreak_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedBreak();
            }
            DetectedBreak.MergeFrom(other.DetectedBreak);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                detectedLanguages_.AddEntriesFrom(input, _repeated_detectedLanguages_codec);
                break;
              }
              case 18: {
                if (detectedBreak_ == null) {
                  detectedBreak_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.DetectedBreak();
                }
                input.ReadMessage(detectedBreak_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Detected page from OCR.
  /// </summary>
  public sealed partial class Page : pb::IMessage<Page> {
    private static readonly pb::MessageParser<Page> _parser = new pb::MessageParser<Page>(() => new Page());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Page> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.TextAnnotationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Page() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Page(Page other) : this() {
      Property = other.property_ != null ? other.Property.Clone() : null;
      width_ = other.width_;
      height_ = other.height_;
      blocks_ = other.blocks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Page Clone() {
      return new Page(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty property_;
    /// <summary>
    /// Additional information detected on the page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private int width_;
    /// <summary>
    /// Page width in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private int height_;
    /// <summary>
    /// Page height in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.Block> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Vision.V1.Block.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.Block> blocks_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.Block>();
    /// <summary>
    /// List of blocks of text, images etc on this page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.Block> Blocks {
      get { return blocks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Page);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Page other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Property, other.Property)) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if(!blocks_.Equals(other.blocks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (property_ != null) hash ^= Property.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= blocks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Height);
      }
      blocks_.WriteTo(output, _repeated_blocks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Page other) {
      if (other == null) {
        return;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          property_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty();
        }
        Property.MergeFrom(other.Property);
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      blocks_.Add(other.blocks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (property_ == null) {
              property_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty();
            }
            input.ReadMessage(property_);
            break;
          }
          case 16: {
            Width = input.ReadInt32();
            break;
          }
          case 24: {
            Height = input.ReadInt32();
            break;
          }
          case 34: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Logical element on the page.
  /// </summary>
  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.TextAnnotationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      Property = other.property_ != null ? other.Property.Clone() : null;
      BoundingBox = other.boundingBox_ != null ? other.BoundingBox.Clone() : null;
      paragraphs_ = other.paragraphs_.Clone();
      blockType_ = other.blockType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty property_;
    /// <summary>
    /// Additional information detected for the block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "bounding_box" field.</summary>
    public const int BoundingBoxFieldNumber = 2;
    private global::Google.Cloud.Vision.V1.BoundingPoly boundingBox_;
    /// <summary>
    /// The bounding box for the block.
    /// The vertices are in the order of top-left, top-right, bottom-right,
    /// bottom-left. When a rotation of the bounding box is detected the rotation
    /// is represented as around the top-left corner as defined when the text is
    /// read in the 'natural' orientation.
    /// For example:
    ///   * when the text is horizontal it might look like:
    ///      0----1
    ///      |    |
    ///      3----2
    ///   * when it's rotated 180 degrees around the top-left corner it becomes:
    ///      2----3
    ///      |    |
    ///      1----0
    ///   and the vertice order will still be (0, 1, 2, 3).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.BoundingPoly BoundingBox {
      get { return boundingBox_; }
      set {
        boundingBox_ = value;
      }
    }

    /// <summary>Field number for the "paragraphs" field.</summary>
    public const int ParagraphsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.Paragraph> _repeated_paragraphs_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Vision.V1.Paragraph.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.Paragraph> paragraphs_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.Paragraph>();
    /// <summary>
    /// List of paragraphs in this block (if this blocks is of type text).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.Paragraph> Paragraphs {
      get { return paragraphs_; }
    }

    /// <summary>Field number for the "block_type" field.</summary>
    public const int BlockTypeFieldNumber = 4;
    private global::Google.Cloud.Vision.V1.Block.Types.BlockType blockType_ = 0;
    /// <summary>
    /// Detected block type (text, image etc) for this block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Block.Types.BlockType BlockType {
      get { return blockType_; }
      set {
        blockType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Property, other.Property)) return false;
      if (!object.Equals(BoundingBox, other.BoundingBox)) return false;
      if(!paragraphs_.Equals(other.paragraphs_)) return false;
      if (BlockType != other.BlockType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (property_ != null) hash ^= Property.GetHashCode();
      if (boundingBox_ != null) hash ^= BoundingBox.GetHashCode();
      hash ^= paragraphs_.GetHashCode();
      if (BlockType != 0) hash ^= BlockType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
      if (boundingBox_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BoundingBox);
      }
      paragraphs_.WriteTo(output, _repeated_paragraphs_codec);
      if (BlockType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) BlockType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      if (boundingBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBox);
      }
      size += paragraphs_.CalculateSize(_repeated_paragraphs_codec);
      if (BlockType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlockType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          property_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty();
        }
        Property.MergeFrom(other.Property);
      }
      if (other.boundingBox_ != null) {
        if (boundingBox_ == null) {
          boundingBox_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
        }
        BoundingBox.MergeFrom(other.BoundingBox);
      }
      paragraphs_.Add(other.paragraphs_);
      if (other.BlockType != 0) {
        BlockType = other.BlockType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (property_ == null) {
              property_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty();
            }
            input.ReadMessage(property_);
            break;
          }
          case 18: {
            if (boundingBox_ == null) {
              boundingBox_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
            }
            input.ReadMessage(boundingBox_);
            break;
          }
          case 26: {
            paragraphs_.AddEntriesFrom(input, _repeated_paragraphs_codec);
            break;
          }
          case 32: {
            blockType_ = (global::Google.Cloud.Vision.V1.Block.Types.BlockType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Block message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type of a block (text, image etc) as identified by OCR.
      /// </summary>
      public enum BlockType {
        /// <summary>
        /// Unknown block type.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Regular text block.
        /// </summary>
        [pbr::OriginalName("TEXT")] Text = 1,
        /// <summary>
        /// Table block.
        /// </summary>
        [pbr::OriginalName("TABLE")] Table = 2,
        /// <summary>
        /// Image block.
        /// </summary>
        [pbr::OriginalName("PICTURE")] Picture = 3,
        /// <summary>
        /// Horizontal/vertical line box.
        /// </summary>
        [pbr::OriginalName("RULER")] Ruler = 4,
        /// <summary>
        /// Barcode block.
        /// </summary>
        [pbr::OriginalName("BARCODE")] Barcode = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// Structural unit of text representing a number of words in certain order.
  /// </summary>
  public sealed partial class Paragraph : pb::IMessage<Paragraph> {
    private static readonly pb::MessageParser<Paragraph> _parser = new pb::MessageParser<Paragraph>(() => new Paragraph());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Paragraph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.TextAnnotationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paragraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paragraph(Paragraph other) : this() {
      Property = other.property_ != null ? other.Property.Clone() : null;
      BoundingBox = other.boundingBox_ != null ? other.BoundingBox.Clone() : null;
      words_ = other.words_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paragraph Clone() {
      return new Paragraph(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty property_;
    /// <summary>
    /// Additional information detected for the paragraph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "bounding_box" field.</summary>
    public const int BoundingBoxFieldNumber = 2;
    private global::Google.Cloud.Vision.V1.BoundingPoly boundingBox_;
    /// <summary>
    /// The bounding box for the paragraph.
    /// The vertices are in the order of top-left, top-right, bottom-right,
    /// bottom-left. When a rotation of the bounding box is detected the rotation
    /// is represented as around the top-left corner as defined when the text is
    /// read in the 'natural' orientation.
    /// For example:
    ///   * when the text is horizontal it might look like:
    ///      0----1
    ///      |    |
    ///      3----2
    ///   * when it's rotated 180 degrees around the top-left corner it becomes:
    ///      2----3
    ///      |    |
    ///      1----0
    ///   and the vertice order will still be (0, 1, 2, 3).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.BoundingPoly BoundingBox {
      get { return boundingBox_; }
      set {
        boundingBox_ = value;
      }
    }

    /// <summary>Field number for the "words" field.</summary>
    public const int WordsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.Word> _repeated_words_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Vision.V1.Word.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.Word> words_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.Word>();
    /// <summary>
    /// List of words in this paragraph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.Word> Words {
      get { return words_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Paragraph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Paragraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Property, other.Property)) return false;
      if (!object.Equals(BoundingBox, other.BoundingBox)) return false;
      if(!words_.Equals(other.words_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (property_ != null) hash ^= Property.GetHashCode();
      if (boundingBox_ != null) hash ^= BoundingBox.GetHashCode();
      hash ^= words_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
      if (boundingBox_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BoundingBox);
      }
      words_.WriteTo(output, _repeated_words_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      if (boundingBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBox);
      }
      size += words_.CalculateSize(_repeated_words_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Paragraph other) {
      if (other == null) {
        return;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          property_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty();
        }
        Property.MergeFrom(other.Property);
      }
      if (other.boundingBox_ != null) {
        if (boundingBox_ == null) {
          boundingBox_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
        }
        BoundingBox.MergeFrom(other.BoundingBox);
      }
      words_.Add(other.words_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (property_ == null) {
              property_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty();
            }
            input.ReadMessage(property_);
            break;
          }
          case 18: {
            if (boundingBox_ == null) {
              boundingBox_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
            }
            input.ReadMessage(boundingBox_);
            break;
          }
          case 26: {
            words_.AddEntriesFrom(input, _repeated_words_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A word representation.
  /// </summary>
  public sealed partial class Word : pb::IMessage<Word> {
    private static readonly pb::MessageParser<Word> _parser = new pb::MessageParser<Word>(() => new Word());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Word> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.TextAnnotationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Word() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Word(Word other) : this() {
      Property = other.property_ != null ? other.Property.Clone() : null;
      BoundingBox = other.boundingBox_ != null ? other.BoundingBox.Clone() : null;
      symbols_ = other.symbols_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Word Clone() {
      return new Word(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty property_;
    /// <summary>
    /// Additional information detected for the word.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "bounding_box" field.</summary>
    public const int BoundingBoxFieldNumber = 2;
    private global::Google.Cloud.Vision.V1.BoundingPoly boundingBox_;
    /// <summary>
    /// The bounding box for the word.
    /// The vertices are in the order of top-left, top-right, bottom-right,
    /// bottom-left. When a rotation of the bounding box is detected the rotation
    /// is represented as around the top-left corner as defined when the text is
    /// read in the 'natural' orientation.
    /// For example:
    ///   * when the text is horizontal it might look like:
    ///      0----1
    ///      |    |
    ///      3----2
    ///   * when it's rotated 180 degrees around the top-left corner it becomes:
    ///      2----3
    ///      |    |
    ///      1----0
    ///   and the vertice order will still be (0, 1, 2, 3).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.BoundingPoly BoundingBox {
      get { return boundingBox_; }
      set {
        boundingBox_ = value;
      }
    }

    /// <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.Symbol> _repeated_symbols_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Vision.V1.Symbol.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.Symbol> symbols_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.Symbol>();
    /// <summary>
    /// List of symbols in the word.
    /// The order of the symbols follows the natural reading order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.Symbol> Symbols {
      get { return symbols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Word);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Word other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Property, other.Property)) return false;
      if (!object.Equals(BoundingBox, other.BoundingBox)) return false;
      if(!symbols_.Equals(other.symbols_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (property_ != null) hash ^= Property.GetHashCode();
      if (boundingBox_ != null) hash ^= BoundingBox.GetHashCode();
      hash ^= symbols_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
      if (boundingBox_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BoundingBox);
      }
      symbols_.WriteTo(output, _repeated_symbols_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      if (boundingBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBox);
      }
      size += symbols_.CalculateSize(_repeated_symbols_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Word other) {
      if (other == null) {
        return;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          property_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty();
        }
        Property.MergeFrom(other.Property);
      }
      if (other.boundingBox_ != null) {
        if (boundingBox_ == null) {
          boundingBox_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
        }
        BoundingBox.MergeFrom(other.BoundingBox);
      }
      symbols_.Add(other.symbols_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (property_ == null) {
              property_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty();
            }
            input.ReadMessage(property_);
            break;
          }
          case 18: {
            if (boundingBox_ == null) {
              boundingBox_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
            }
            input.ReadMessage(boundingBox_);
            break;
          }
          case 26: {
            symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A single symbol representation.
  /// </summary>
  public sealed partial class Symbol : pb::IMessage<Symbol> {
    private static readonly pb::MessageParser<Symbol> _parser = new pb::MessageParser<Symbol>(() => new Symbol());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Symbol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.TextAnnotationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Symbol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Symbol(Symbol other) : this() {
      Property = other.property_ != null ? other.Property.Clone() : null;
      BoundingBox = other.boundingBox_ != null ? other.BoundingBox.Clone() : null;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Symbol Clone() {
      return new Symbol(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty property_;
    /// <summary>
    /// Additional information detected for the symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "bounding_box" field.</summary>
    public const int BoundingBoxFieldNumber = 2;
    private global::Google.Cloud.Vision.V1.BoundingPoly boundingBox_;
    /// <summary>
    /// The bounding box for the symbol.
    /// The vertices are in the order of top-left, top-right, bottom-right,
    /// bottom-left. When a rotation of the bounding box is detected the rotation
    /// is represented as around the top-left corner as defined when the text is
    /// read in the 'natural' orientation.
    /// For example:
    ///   * when the text is horizontal it might look like:
    ///      0----1
    ///      |    |
    ///      3----2
    ///   * when it's rotated 180 degrees around the top-left corner it becomes:
    ///      2----3
    ///      |    |
    ///      1----0
    ///   and the vertice order will still be (0, 1, 2, 3).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.BoundingPoly BoundingBox {
      get { return boundingBox_; }
      set {
        boundingBox_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    /// <summary>
    /// The actual UTF-8 representation of the symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Symbol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Symbol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Property, other.Property)) return false;
      if (!object.Equals(BoundingBox, other.BoundingBox)) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (property_ != null) hash ^= Property.GetHashCode();
      if (boundingBox_ != null) hash ^= BoundingBox.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
      if (boundingBox_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BoundingBox);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      if (boundingBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBox);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Symbol other) {
      if (other == null) {
        return;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          property_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty();
        }
        Property.MergeFrom(other.Property);
      }
      if (other.boundingBox_ != null) {
        if (boundingBox_ == null) {
          boundingBox_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
        }
        BoundingBox.MergeFrom(other.BoundingBox);
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (property_ == null) {
              property_ = new global::Google.Cloud.Vision.V1.TextAnnotation.Types.TextProperty();
            }
            input.ReadMessage(property_);
            break;
          }
          case 18: {
            if (boundingBox_ == null) {
              boundingBox_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
            }
            input.ReadMessage(boundingBox_);
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
