// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Google.Cloud.PubSub.V1 {
  /// <summary>
  /// The service that an application uses to manipulate subscriptions and to
  /// consume messages from a subscription via the `Pull` method.
  /// </summary>
  public static partial class Subscriber
  {
    static readonly string __ServiceName = "google.pubsub.v1.Subscriber";

    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.Subscription> __Marshaller_Subscription = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.Subscription.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.GetSubscriptionRequest> __Marshaller_GetSubscriptionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.GetSubscriptionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.UpdateSubscriptionRequest> __Marshaller_UpdateSubscriptionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.UpdateSubscriptionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.ListSubscriptionsRequest> __Marshaller_ListSubscriptionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.ListSubscriptionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.ListSubscriptionsResponse> __Marshaller_ListSubscriptionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.ListSubscriptionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.DeleteSubscriptionRequest> __Marshaller_DeleteSubscriptionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.DeleteSubscriptionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.ModifyAckDeadlineRequest> __Marshaller_ModifyAckDeadlineRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.ModifyAckDeadlineRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.AcknowledgeRequest> __Marshaller_AcknowledgeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.AcknowledgeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.PullRequest> __Marshaller_PullRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.PullRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.PullResponse> __Marshaller_PullResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.PullResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.StreamingPullRequest> __Marshaller_StreamingPullRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.StreamingPullRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.StreamingPullResponse> __Marshaller_StreamingPullResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.StreamingPullResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.ModifyPushConfigRequest> __Marshaller_ModifyPushConfigRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.ModifyPushConfigRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.ListSnapshotsRequest> __Marshaller_ListSnapshotsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.ListSnapshotsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.ListSnapshotsResponse> __Marshaller_ListSnapshotsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.ListSnapshotsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.CreateSnapshotRequest> __Marshaller_CreateSnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.CreateSnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.Snapshot> __Marshaller_Snapshot = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.Snapshot.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.UpdateSnapshotRequest> __Marshaller_UpdateSnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.UpdateSnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.DeleteSnapshotRequest> __Marshaller_DeleteSnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.DeleteSnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.SeekRequest> __Marshaller_SeekRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.SeekRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.SeekResponse> __Marshaller_SeekResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.SeekResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.Subscription, global::Google.Cloud.PubSub.V1.Subscription> __Method_CreateSubscription = new grpc::Method<global::Google.Cloud.PubSub.V1.Subscription, global::Google.Cloud.PubSub.V1.Subscription>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSubscription",
        __Marshaller_Subscription,
        __Marshaller_Subscription);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.GetSubscriptionRequest, global::Google.Cloud.PubSub.V1.Subscription> __Method_GetSubscription = new grpc::Method<global::Google.Cloud.PubSub.V1.GetSubscriptionRequest, global::Google.Cloud.PubSub.V1.Subscription>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSubscription",
        __Marshaller_GetSubscriptionRequest,
        __Marshaller_Subscription);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.UpdateSubscriptionRequest, global::Google.Cloud.PubSub.V1.Subscription> __Method_UpdateSubscription = new grpc::Method<global::Google.Cloud.PubSub.V1.UpdateSubscriptionRequest, global::Google.Cloud.PubSub.V1.Subscription>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSubscription",
        __Marshaller_UpdateSubscriptionRequest,
        __Marshaller_Subscription);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.ListSubscriptionsRequest, global::Google.Cloud.PubSub.V1.ListSubscriptionsResponse> __Method_ListSubscriptions = new grpc::Method<global::Google.Cloud.PubSub.V1.ListSubscriptionsRequest, global::Google.Cloud.PubSub.V1.ListSubscriptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSubscriptions",
        __Marshaller_ListSubscriptionsRequest,
        __Marshaller_ListSubscriptionsResponse);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.DeleteSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSubscription = new grpc::Method<global::Google.Cloud.PubSub.V1.DeleteSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSubscription",
        __Marshaller_DeleteSubscriptionRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.ModifyAckDeadlineRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ModifyAckDeadline = new grpc::Method<global::Google.Cloud.PubSub.V1.ModifyAckDeadlineRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyAckDeadline",
        __Marshaller_ModifyAckDeadlineRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.AcknowledgeRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Acknowledge = new grpc::Method<global::Google.Cloud.PubSub.V1.AcknowledgeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Acknowledge",
        __Marshaller_AcknowledgeRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.PullRequest, global::Google.Cloud.PubSub.V1.PullResponse> __Method_Pull = new grpc::Method<global::Google.Cloud.PubSub.V1.PullRequest, global::Google.Cloud.PubSub.V1.PullResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Pull",
        __Marshaller_PullRequest,
        __Marshaller_PullResponse);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.StreamingPullRequest, global::Google.Cloud.PubSub.V1.StreamingPullResponse> __Method_StreamingPull = new grpc::Method<global::Google.Cloud.PubSub.V1.StreamingPullRequest, global::Google.Cloud.PubSub.V1.StreamingPullResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamingPull",
        __Marshaller_StreamingPullRequest,
        __Marshaller_StreamingPullResponse);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.ModifyPushConfigRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ModifyPushConfig = new grpc::Method<global::Google.Cloud.PubSub.V1.ModifyPushConfigRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyPushConfig",
        __Marshaller_ModifyPushConfigRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.ListSnapshotsRequest, global::Google.Cloud.PubSub.V1.ListSnapshotsResponse> __Method_ListSnapshots = new grpc::Method<global::Google.Cloud.PubSub.V1.ListSnapshotsRequest, global::Google.Cloud.PubSub.V1.ListSnapshotsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSnapshots",
        __Marshaller_ListSnapshotsRequest,
        __Marshaller_ListSnapshotsResponse);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.CreateSnapshotRequest, global::Google.Cloud.PubSub.V1.Snapshot> __Method_CreateSnapshot = new grpc::Method<global::Google.Cloud.PubSub.V1.CreateSnapshotRequest, global::Google.Cloud.PubSub.V1.Snapshot>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSnapshot",
        __Marshaller_CreateSnapshotRequest,
        __Marshaller_Snapshot);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.UpdateSnapshotRequest, global::Google.Cloud.PubSub.V1.Snapshot> __Method_UpdateSnapshot = new grpc::Method<global::Google.Cloud.PubSub.V1.UpdateSnapshotRequest, global::Google.Cloud.PubSub.V1.Snapshot>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSnapshot",
        __Marshaller_UpdateSnapshotRequest,
        __Marshaller_Snapshot);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.DeleteSnapshotRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSnapshot = new grpc::Method<global::Google.Cloud.PubSub.V1.DeleteSnapshotRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSnapshot",
        __Marshaller_DeleteSnapshotRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.SeekRequest, global::Google.Cloud.PubSub.V1.SeekResponse> __Method_Seek = new grpc::Method<global::Google.Cloud.PubSub.V1.SeekRequest, global::Google.Cloud.PubSub.V1.SeekResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Seek",
        __Marshaller_SeekRequest,
        __Marshaller_SeekResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.PubSub.V1.PubsubReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Subscriber</summary>
    public abstract partial class SubscriberBase
    {
      /// <summary>
      /// Creates a subscription to a given topic.
      /// If the subscription already exists, returns `ALREADY_EXISTS`.
      /// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
      ///
      /// If the name is not provided in the request, the server will assign a random
      /// name for this subscription on the same project as the topic, conforming
      /// to the
      /// [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
      /// The generated name is populated in the returned Subscription object.
      /// Note that for REST API requests, you must specify a name in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.Subscription> CreateSubscription(global::Google.Cloud.PubSub.V1.Subscription request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the configuration details of a subscription.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.Subscription> GetSubscription(global::Google.Cloud.PubSub.V1.GetSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing subscription. Note that certain properties of a
      /// subscription, such as its topic, are not modifiable.
      /// NOTE:  The style guide requires body: "subscription" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.Subscription> UpdateSubscription(global::Google.Cloud.PubSub.V1.UpdateSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists matching subscriptions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.ListSubscriptionsResponse> ListSubscriptions(global::Google.Cloud.PubSub.V1.ListSubscriptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an existing subscription. All messages retained in the subscription
      /// are immediately dropped. Calls to `Pull` after deletion will return
      /// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
      /// the same name, but the new one has no association with the old
      /// subscription or its topic unless the same topic is specified.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSubscription(global::Google.Cloud.PubSub.V1.DeleteSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Modifies the ack deadline for a specific message. This method is useful
      /// to indicate that more time is needed to process a message by the
      /// subscriber, or to make the message available for redelivery if the
      /// processing was interrupted. Note that this does not modify the
      /// subscription-level `ackDeadlineSeconds` used for subsequent messages.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ModifyAckDeadline(global::Google.Cloud.PubSub.V1.ModifyAckDeadlineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Acknowledges the messages associated with the `ack_ids` in the
      /// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
      /// from the subscription.
      ///
      /// Acknowledging a message whose ack deadline has expired may succeed,
      /// but such a message may be redelivered later. Acknowledging a message more
      /// than once will not result in an error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Acknowledge(global::Google.Cloud.PubSub.V1.AcknowledgeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Pulls messages from the server. Returns an empty list if there are no
      /// messages available in the backlog. The server may return `UNAVAILABLE` if
      /// there are too many concurrent pull requests pending for the given
      /// subscription.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.PullResponse> Pull(global::Google.Cloud.PubSub.V1.PullRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// (EXPERIMENTAL) StreamingPull is an experimental feature. This RPC will
      /// respond with UNIMPLEMENTED errors unless you have been invited to test
      /// this feature. Contact cloud-pubsub@google.com with any questions.
      ///
      /// Establishes a stream with the server, which sends messages down to the
      /// client. The client streams acknowledgements and ack deadline modifications
      /// back to the server. The server will close the stream and return the status
      /// on any error. The server may close the stream with status `OK` to reassign
      /// server-side resources, in which case, the client should re-establish the
      /// stream. `UNAVAILABLE` may also be returned in the case of a transient error
      /// (e.g., a server restart). These should also be retried by the client. Flow
      /// control can be achieved by configuring the underlying RPC channel.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task StreamingPull(grpc::IAsyncStreamReader<global::Google.Cloud.PubSub.V1.StreamingPullRequest> requestStream, grpc::IServerStreamWriter<global::Google.Cloud.PubSub.V1.StreamingPullResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Modifies the `PushConfig` for a specified subscription.
      ///
      /// This may be used to change a push subscription to a pull one (signified by
      /// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
      /// attributes of a push subscription. Messages will accumulate for delivery
      /// continuously through the call regardless of changes to the `PushConfig`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ModifyPushConfig(global::Google.Cloud.PubSub.V1.ModifyPushConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the existing snapshots.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.ListSnapshotsResponse> ListSnapshots(global::Google.Cloud.PubSub.V1.ListSnapshotsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a snapshot from the requested subscription.
      /// If the snapshot already exists, returns `ALREADY_EXISTS`.
      /// If the requested subscription doesn't exist, returns `NOT_FOUND`.
      ///
      /// If the name is not provided in the request, the server will assign a random
      /// name for this snapshot on the same project as the subscription, conforming
      /// to the
      /// [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
      /// The generated name is populated in the returned Snapshot object.
      /// Note that for REST API requests, you must specify a name in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.Snapshot> CreateSnapshot(global::Google.Cloud.PubSub.V1.CreateSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing snapshot. Note that certain properties of a snapshot
      /// are not modifiable.
      /// NOTE:  The style guide requires body: "snapshot" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.Snapshot> UpdateSnapshot(global::Google.Cloud.PubSub.V1.UpdateSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes an existing snapshot. All messages retained in the snapshot
      /// are immediately dropped. After a snapshot is deleted, a new one may be
      /// created with the same name, but the new one has no association with the old
      /// snapshot or its subscription, unless the same subscription is specified.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshot(global::Google.Cloud.PubSub.V1.DeleteSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Seeks an existing subscription to a point in time or to a given snapshot,
      /// whichever is provided in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.SeekResponse> Seek(global::Google.Cloud.PubSub.V1.SeekRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Subscriber</summary>
    public partial class SubscriberClient : grpc::ClientBase<SubscriberClient>
    {
      /// <summary>Creates a new client for Subscriber</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SubscriberClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Subscriber that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SubscriberClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SubscriberClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SubscriberClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a subscription to a given topic.
      /// If the subscription already exists, returns `ALREADY_EXISTS`.
      /// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
      ///
      /// If the name is not provided in the request, the server will assign a random
      /// name for this subscription on the same project as the topic, conforming
      /// to the
      /// [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
      /// The generated name is populated in the returned Subscription object.
      /// Note that for REST API requests, you must specify a name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Subscription CreateSubscription(global::Google.Cloud.PubSub.V1.Subscription request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a subscription to a given topic.
      /// If the subscription already exists, returns `ALREADY_EXISTS`.
      /// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
      ///
      /// If the name is not provided in the request, the server will assign a random
      /// name for this subscription on the same project as the topic, conforming
      /// to the
      /// [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
      /// The generated name is populated in the returned Subscription object.
      /// Note that for REST API requests, you must specify a name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Subscription CreateSubscription(global::Google.Cloud.PubSub.V1.Subscription request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSubscription, null, options, request);
      }
      /// <summary>
      /// Creates a subscription to a given topic.
      /// If the subscription already exists, returns `ALREADY_EXISTS`.
      /// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
      ///
      /// If the name is not provided in the request, the server will assign a random
      /// name for this subscription on the same project as the topic, conforming
      /// to the
      /// [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
      /// The generated name is populated in the returned Subscription object.
      /// Note that for REST API requests, you must specify a name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Subscription> CreateSubscriptionAsync(global::Google.Cloud.PubSub.V1.Subscription request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a subscription to a given topic.
      /// If the subscription already exists, returns `ALREADY_EXISTS`.
      /// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
      ///
      /// If the name is not provided in the request, the server will assign a random
      /// name for this subscription on the same project as the topic, conforming
      /// to the
      /// [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
      /// The generated name is populated in the returned Subscription object.
      /// Note that for REST API requests, you must specify a name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Subscription> CreateSubscriptionAsync(global::Google.Cloud.PubSub.V1.Subscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSubscription, null, options, request);
      }
      /// <summary>
      /// Gets the configuration details of a subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Subscription GetSubscription(global::Google.Cloud.PubSub.V1.GetSubscriptionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the configuration details of a subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Subscription GetSubscription(global::Google.Cloud.PubSub.V1.GetSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSubscription, null, options, request);
      }
      /// <summary>
      /// Gets the configuration details of a subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Subscription> GetSubscriptionAsync(global::Google.Cloud.PubSub.V1.GetSubscriptionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the configuration details of a subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Subscription> GetSubscriptionAsync(global::Google.Cloud.PubSub.V1.GetSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSubscription, null, options, request);
      }
      /// <summary>
      /// Updates an existing subscription. Note that certain properties of a
      /// subscription, such as its topic, are not modifiable.
      /// NOTE:  The style guide requires body: "subscription" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Subscription UpdateSubscription(global::Google.Cloud.PubSub.V1.UpdateSubscriptionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing subscription. Note that certain properties of a
      /// subscription, such as its topic, are not modifiable.
      /// NOTE:  The style guide requires body: "subscription" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Subscription UpdateSubscription(global::Google.Cloud.PubSub.V1.UpdateSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSubscription, null, options, request);
      }
      /// <summary>
      /// Updates an existing subscription. Note that certain properties of a
      /// subscription, such as its topic, are not modifiable.
      /// NOTE:  The style guide requires body: "subscription" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Subscription> UpdateSubscriptionAsync(global::Google.Cloud.PubSub.V1.UpdateSubscriptionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing subscription. Note that certain properties of a
      /// subscription, such as its topic, are not modifiable.
      /// NOTE:  The style guide requires body: "subscription" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Subscription> UpdateSubscriptionAsync(global::Google.Cloud.PubSub.V1.UpdateSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSubscription, null, options, request);
      }
      /// <summary>
      /// Lists matching subscriptions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.ListSubscriptionsResponse ListSubscriptions(global::Google.Cloud.PubSub.V1.ListSubscriptionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSubscriptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists matching subscriptions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.ListSubscriptionsResponse ListSubscriptions(global::Google.Cloud.PubSub.V1.ListSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSubscriptions, null, options, request);
      }
      /// <summary>
      /// Lists matching subscriptions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.ListSubscriptionsResponse> ListSubscriptionsAsync(global::Google.Cloud.PubSub.V1.ListSubscriptionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSubscriptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists matching subscriptions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.ListSubscriptionsResponse> ListSubscriptionsAsync(global::Google.Cloud.PubSub.V1.ListSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSubscriptions, null, options, request);
      }
      /// <summary>
      /// Deletes an existing subscription. All messages retained in the subscription
      /// are immediately dropped. Calls to `Pull` after deletion will return
      /// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
      /// the same name, but the new one has no association with the old
      /// subscription or its topic unless the same topic is specified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSubscription(global::Google.Cloud.PubSub.V1.DeleteSubscriptionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing subscription. All messages retained in the subscription
      /// are immediately dropped. Calls to `Pull` after deletion will return
      /// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
      /// the same name, but the new one has no association with the old
      /// subscription or its topic unless the same topic is specified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSubscription(global::Google.Cloud.PubSub.V1.DeleteSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSubscription, null, options, request);
      }
      /// <summary>
      /// Deletes an existing subscription. All messages retained in the subscription
      /// are immediately dropped. Calls to `Pull` after deletion will return
      /// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
      /// the same name, but the new one has no association with the old
      /// subscription or its topic unless the same topic is specified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSubscriptionAsync(global::Google.Cloud.PubSub.V1.DeleteSubscriptionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing subscription. All messages retained in the subscription
      /// are immediately dropped. Calls to `Pull` after deletion will return
      /// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
      /// the same name, but the new one has no association with the old
      /// subscription or its topic unless the same topic is specified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSubscriptionAsync(global::Google.Cloud.PubSub.V1.DeleteSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSubscription, null, options, request);
      }
      /// <summary>
      /// Modifies the ack deadline for a specific message. This method is useful
      /// to indicate that more time is needed to process a message by the
      /// subscriber, or to make the message available for redelivery if the
      /// processing was interrupted. Note that this does not modify the
      /// subscription-level `ackDeadlineSeconds` used for subsequent messages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ModifyAckDeadline(global::Google.Cloud.PubSub.V1.ModifyAckDeadlineRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ModifyAckDeadline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies the ack deadline for a specific message. This method is useful
      /// to indicate that more time is needed to process a message by the
      /// subscriber, or to make the message available for redelivery if the
      /// processing was interrupted. Note that this does not modify the
      /// subscription-level `ackDeadlineSeconds` used for subsequent messages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ModifyAckDeadline(global::Google.Cloud.PubSub.V1.ModifyAckDeadlineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyAckDeadline, null, options, request);
      }
      /// <summary>
      /// Modifies the ack deadline for a specific message. This method is useful
      /// to indicate that more time is needed to process a message by the
      /// subscriber, or to make the message available for redelivery if the
      /// processing was interrupted. Note that this does not modify the
      /// subscription-level `ackDeadlineSeconds` used for subsequent messages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ModifyAckDeadlineAsync(global::Google.Cloud.PubSub.V1.ModifyAckDeadlineRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ModifyAckDeadlineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies the ack deadline for a specific message. This method is useful
      /// to indicate that more time is needed to process a message by the
      /// subscriber, or to make the message available for redelivery if the
      /// processing was interrupted. Note that this does not modify the
      /// subscription-level `ackDeadlineSeconds` used for subsequent messages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ModifyAckDeadlineAsync(global::Google.Cloud.PubSub.V1.ModifyAckDeadlineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyAckDeadline, null, options, request);
      }
      /// <summary>
      /// Acknowledges the messages associated with the `ack_ids` in the
      /// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
      /// from the subscription.
      ///
      /// Acknowledging a message whose ack deadline has expired may succeed,
      /// but such a message may be redelivered later. Acknowledging a message more
      /// than once will not result in an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Acknowledge(global::Google.Cloud.PubSub.V1.AcknowledgeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Acknowledge(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Acknowledges the messages associated with the `ack_ids` in the
      /// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
      /// from the subscription.
      ///
      /// Acknowledging a message whose ack deadline has expired may succeed,
      /// but such a message may be redelivered later. Acknowledging a message more
      /// than once will not result in an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Acknowledge(global::Google.Cloud.PubSub.V1.AcknowledgeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Acknowledge, null, options, request);
      }
      /// <summary>
      /// Acknowledges the messages associated with the `ack_ids` in the
      /// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
      /// from the subscription.
      ///
      /// Acknowledging a message whose ack deadline has expired may succeed,
      /// but such a message may be redelivered later. Acknowledging a message more
      /// than once will not result in an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> AcknowledgeAsync(global::Google.Cloud.PubSub.V1.AcknowledgeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AcknowledgeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Acknowledges the messages associated with the `ack_ids` in the
      /// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
      /// from the subscription.
      ///
      /// Acknowledging a message whose ack deadline has expired may succeed,
      /// but such a message may be redelivered later. Acknowledging a message more
      /// than once will not result in an error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> AcknowledgeAsync(global::Google.Cloud.PubSub.V1.AcknowledgeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Acknowledge, null, options, request);
      }
      /// <summary>
      /// Pulls messages from the server. Returns an empty list if there are no
      /// messages available in the backlog. The server may return `UNAVAILABLE` if
      /// there are too many concurrent pull requests pending for the given
      /// subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.PullResponse Pull(global::Google.Cloud.PubSub.V1.PullRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Pull(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pulls messages from the server. Returns an empty list if there are no
      /// messages available in the backlog. The server may return `UNAVAILABLE` if
      /// there are too many concurrent pull requests pending for the given
      /// subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.PullResponse Pull(global::Google.Cloud.PubSub.V1.PullRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Pull, null, options, request);
      }
      /// <summary>
      /// Pulls messages from the server. Returns an empty list if there are no
      /// messages available in the backlog. The server may return `UNAVAILABLE` if
      /// there are too many concurrent pull requests pending for the given
      /// subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.PullResponse> PullAsync(global::Google.Cloud.PubSub.V1.PullRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PullAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pulls messages from the server. Returns an empty list if there are no
      /// messages available in the backlog. The server may return `UNAVAILABLE` if
      /// there are too many concurrent pull requests pending for the given
      /// subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.PullResponse> PullAsync(global::Google.Cloud.PubSub.V1.PullRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Pull, null, options, request);
      }
      /// <summary>
      /// (EXPERIMENTAL) StreamingPull is an experimental feature. This RPC will
      /// respond with UNIMPLEMENTED errors unless you have been invited to test
      /// this feature. Contact cloud-pubsub@google.com with any questions.
      ///
      /// Establishes a stream with the server, which sends messages down to the
      /// client. The client streams acknowledgements and ack deadline modifications
      /// back to the server. The server will close the stream and return the status
      /// on any error. The server may close the stream with status `OK` to reassign
      /// server-side resources, in which case, the client should re-establish the
      /// stream. `UNAVAILABLE` may also be returned in the case of a transient error
      /// (e.g., a server restart). These should also be retried by the client. Flow
      /// control can be achieved by configuring the underlying RPC channel.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.PubSub.V1.StreamingPullRequest, global::Google.Cloud.PubSub.V1.StreamingPullResponse> StreamingPull(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StreamingPull(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// (EXPERIMENTAL) StreamingPull is an experimental feature. This RPC will
      /// respond with UNIMPLEMENTED errors unless you have been invited to test
      /// this feature. Contact cloud-pubsub@google.com with any questions.
      ///
      /// Establishes a stream with the server, which sends messages down to the
      /// client. The client streams acknowledgements and ack deadline modifications
      /// back to the server. The server will close the stream and return the status
      /// on any error. The server may close the stream with status `OK` to reassign
      /// server-side resources, in which case, the client should re-establish the
      /// stream. `UNAVAILABLE` may also be returned in the case of a transient error
      /// (e.g., a server restart). These should also be retried by the client. Flow
      /// control can be achieved by configuring the underlying RPC channel.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.PubSub.V1.StreamingPullRequest, global::Google.Cloud.PubSub.V1.StreamingPullResponse> StreamingPull(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamingPull, null, options);
      }
      /// <summary>
      /// Modifies the `PushConfig` for a specified subscription.
      ///
      /// This may be used to change a push subscription to a pull one (signified by
      /// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
      /// attributes of a push subscription. Messages will accumulate for delivery
      /// continuously through the call regardless of changes to the `PushConfig`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ModifyPushConfig(global::Google.Cloud.PubSub.V1.ModifyPushConfigRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ModifyPushConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies the `PushConfig` for a specified subscription.
      ///
      /// This may be used to change a push subscription to a pull one (signified by
      /// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
      /// attributes of a push subscription. Messages will accumulate for delivery
      /// continuously through the call regardless of changes to the `PushConfig`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ModifyPushConfig(global::Google.Cloud.PubSub.V1.ModifyPushConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyPushConfig, null, options, request);
      }
      /// <summary>
      /// Modifies the `PushConfig` for a specified subscription.
      ///
      /// This may be used to change a push subscription to a pull one (signified by
      /// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
      /// attributes of a push subscription. Messages will accumulate for delivery
      /// continuously through the call regardless of changes to the `PushConfig`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ModifyPushConfigAsync(global::Google.Cloud.PubSub.V1.ModifyPushConfigRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ModifyPushConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies the `PushConfig` for a specified subscription.
      ///
      /// This may be used to change a push subscription to a pull one (signified by
      /// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
      /// attributes of a push subscription. Messages will accumulate for delivery
      /// continuously through the call regardless of changes to the `PushConfig`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ModifyPushConfigAsync(global::Google.Cloud.PubSub.V1.ModifyPushConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyPushConfig, null, options, request);
      }
      /// <summary>
      /// Lists the existing snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.ListSnapshotsResponse ListSnapshots(global::Google.Cloud.PubSub.V1.ListSnapshotsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSnapshots(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the existing snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.ListSnapshotsResponse ListSnapshots(global::Google.Cloud.PubSub.V1.ListSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSnapshots, null, options, request);
      }
      /// <summary>
      /// Lists the existing snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.ListSnapshotsResponse> ListSnapshotsAsync(global::Google.Cloud.PubSub.V1.ListSnapshotsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSnapshotsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the existing snapshots.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.ListSnapshotsResponse> ListSnapshotsAsync(global::Google.Cloud.PubSub.V1.ListSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSnapshots, null, options, request);
      }
      /// <summary>
      /// Creates a snapshot from the requested subscription.
      /// If the snapshot already exists, returns `ALREADY_EXISTS`.
      /// If the requested subscription doesn't exist, returns `NOT_FOUND`.
      ///
      /// If the name is not provided in the request, the server will assign a random
      /// name for this snapshot on the same project as the subscription, conforming
      /// to the
      /// [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
      /// The generated name is populated in the returned Snapshot object.
      /// Note that for REST API requests, you must specify a name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Snapshot CreateSnapshot(global::Google.Cloud.PubSub.V1.CreateSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a snapshot from the requested subscription.
      /// If the snapshot already exists, returns `ALREADY_EXISTS`.
      /// If the requested subscription doesn't exist, returns `NOT_FOUND`.
      ///
      /// If the name is not provided in the request, the server will assign a random
      /// name for this snapshot on the same project as the subscription, conforming
      /// to the
      /// [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
      /// The generated name is populated in the returned Snapshot object.
      /// Note that for REST API requests, you must specify a name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Snapshot CreateSnapshot(global::Google.Cloud.PubSub.V1.CreateSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSnapshot, null, options, request);
      }
      /// <summary>
      /// Creates a snapshot from the requested subscription.
      /// If the snapshot already exists, returns `ALREADY_EXISTS`.
      /// If the requested subscription doesn't exist, returns `NOT_FOUND`.
      ///
      /// If the name is not provided in the request, the server will assign a random
      /// name for this snapshot on the same project as the subscription, conforming
      /// to the
      /// [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
      /// The generated name is populated in the returned Snapshot object.
      /// Note that for REST API requests, you must specify a name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Snapshot> CreateSnapshotAsync(global::Google.Cloud.PubSub.V1.CreateSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a snapshot from the requested subscription.
      /// If the snapshot already exists, returns `ALREADY_EXISTS`.
      /// If the requested subscription doesn't exist, returns `NOT_FOUND`.
      ///
      /// If the name is not provided in the request, the server will assign a random
      /// name for this snapshot on the same project as the subscription, conforming
      /// to the
      /// [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
      /// The generated name is populated in the returned Snapshot object.
      /// Note that for REST API requests, you must specify a name in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Snapshot> CreateSnapshotAsync(global::Google.Cloud.PubSub.V1.CreateSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSnapshot, null, options, request);
      }
      /// <summary>
      /// Updates an existing snapshot. Note that certain properties of a snapshot
      /// are not modifiable.
      /// NOTE:  The style guide requires body: "snapshot" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Snapshot UpdateSnapshot(global::Google.Cloud.PubSub.V1.UpdateSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing snapshot. Note that certain properties of a snapshot
      /// are not modifiable.
      /// NOTE:  The style guide requires body: "snapshot" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Snapshot UpdateSnapshot(global::Google.Cloud.PubSub.V1.UpdateSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSnapshot, null, options, request);
      }
      /// <summary>
      /// Updates an existing snapshot. Note that certain properties of a snapshot
      /// are not modifiable.
      /// NOTE:  The style guide requires body: "snapshot" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Snapshot> UpdateSnapshotAsync(global::Google.Cloud.PubSub.V1.UpdateSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing snapshot. Note that certain properties of a snapshot
      /// are not modifiable.
      /// NOTE:  The style guide requires body: "snapshot" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Snapshot> UpdateSnapshotAsync(global::Google.Cloud.PubSub.V1.UpdateSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSnapshot, null, options, request);
      }
      /// <summary>
      /// Removes an existing snapshot. All messages retained in the snapshot
      /// are immediately dropped. After a snapshot is deleted, a new one may be
      /// created with the same name, but the new one has no association with the old
      /// snapshot or its subscription, unless the same subscription is specified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSnapshot(global::Google.Cloud.PubSub.V1.DeleteSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes an existing snapshot. All messages retained in the snapshot
      /// are immediately dropped. After a snapshot is deleted, a new one may be
      /// created with the same name, but the new one has no association with the old
      /// snapshot or its subscription, unless the same subscription is specified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSnapshot(global::Google.Cloud.PubSub.V1.DeleteSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSnapshot, null, options, request);
      }
      /// <summary>
      /// Removes an existing snapshot. All messages retained in the snapshot
      /// are immediately dropped. After a snapshot is deleted, a new one may be
      /// created with the same name, but the new one has no association with the old
      /// snapshot or its subscription, unless the same subscription is specified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshotAsync(global::Google.Cloud.PubSub.V1.DeleteSnapshotRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes an existing snapshot. All messages retained in the snapshot
      /// are immediately dropped. After a snapshot is deleted, a new one may be
      /// created with the same name, but the new one has no association with the old
      /// snapshot or its subscription, unless the same subscription is specified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshotAsync(global::Google.Cloud.PubSub.V1.DeleteSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSnapshot, null, options, request);
      }
      /// <summary>
      /// Seeks an existing subscription to a point in time or to a given snapshot,
      /// whichever is provided in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.SeekResponse Seek(global::Google.Cloud.PubSub.V1.SeekRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Seek(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Seeks an existing subscription to a point in time or to a given snapshot,
      /// whichever is provided in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.SeekResponse Seek(global::Google.Cloud.PubSub.V1.SeekRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Seek, null, options, request);
      }
      /// <summary>
      /// Seeks an existing subscription to a point in time or to a given snapshot,
      /// whichever is provided in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.SeekResponse> SeekAsync(global::Google.Cloud.PubSub.V1.SeekRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SeekAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Seeks an existing subscription to a point in time or to a given snapshot,
      /// whichever is provided in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.SeekResponse> SeekAsync(global::Google.Cloud.PubSub.V1.SeekRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Seek, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SubscriberClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SubscriberClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SubscriberBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateSubscription, serviceImpl.CreateSubscription)
          .AddMethod(__Method_GetSubscription, serviceImpl.GetSubscription)
          .AddMethod(__Method_UpdateSubscription, serviceImpl.UpdateSubscription)
          .AddMethod(__Method_ListSubscriptions, serviceImpl.ListSubscriptions)
          .AddMethod(__Method_DeleteSubscription, serviceImpl.DeleteSubscription)
          .AddMethod(__Method_ModifyAckDeadline, serviceImpl.ModifyAckDeadline)
          .AddMethod(__Method_Acknowledge, serviceImpl.Acknowledge)
          .AddMethod(__Method_Pull, serviceImpl.Pull)
          .AddMethod(__Method_StreamingPull, serviceImpl.StreamingPull)
          .AddMethod(__Method_ModifyPushConfig, serviceImpl.ModifyPushConfig)
          .AddMethod(__Method_ListSnapshots, serviceImpl.ListSnapshots)
          .AddMethod(__Method_CreateSnapshot, serviceImpl.CreateSnapshot)
          .AddMethod(__Method_UpdateSnapshot, serviceImpl.UpdateSnapshot)
          .AddMethod(__Method_DeleteSnapshot, serviceImpl.DeleteSnapshot)
          .AddMethod(__Method_Seek, serviceImpl.Seek).Build();
    }

  }
  /// <summary>
  /// The service that an application uses to manipulate topics, and to send
  /// messages to a topic.
  /// </summary>
  public static partial class Publisher
  {
    static readonly string __ServiceName = "google.pubsub.v1.Publisher";

    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.Topic> __Marshaller_Topic = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.Topic.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.UpdateTopicRequest> __Marshaller_UpdateTopicRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.UpdateTopicRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.PublishRequest> __Marshaller_PublishRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.PublishRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.PublishResponse> __Marshaller_PublishResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.PublishResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.GetTopicRequest> __Marshaller_GetTopicRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.GetTopicRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.ListTopicsRequest> __Marshaller_ListTopicsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.ListTopicsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.ListTopicsResponse> __Marshaller_ListTopicsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.ListTopicsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsRequest> __Marshaller_ListTopicSubscriptionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsResponse> __Marshaller_ListTopicSubscriptionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.PubSub.V1.DeleteTopicRequest> __Marshaller_DeleteTopicRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.PubSub.V1.DeleteTopicRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.Topic, global::Google.Cloud.PubSub.V1.Topic> __Method_CreateTopic = new grpc::Method<global::Google.Cloud.PubSub.V1.Topic, global::Google.Cloud.PubSub.V1.Topic>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTopic",
        __Marshaller_Topic,
        __Marshaller_Topic);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.UpdateTopicRequest, global::Google.Cloud.PubSub.V1.Topic> __Method_UpdateTopic = new grpc::Method<global::Google.Cloud.PubSub.V1.UpdateTopicRequest, global::Google.Cloud.PubSub.V1.Topic>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTopic",
        __Marshaller_UpdateTopicRequest,
        __Marshaller_Topic);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.PublishRequest, global::Google.Cloud.PubSub.V1.PublishResponse> __Method_Publish = new grpc::Method<global::Google.Cloud.PubSub.V1.PublishRequest, global::Google.Cloud.PubSub.V1.PublishResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Publish",
        __Marshaller_PublishRequest,
        __Marshaller_PublishResponse);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.GetTopicRequest, global::Google.Cloud.PubSub.V1.Topic> __Method_GetTopic = new grpc::Method<global::Google.Cloud.PubSub.V1.GetTopicRequest, global::Google.Cloud.PubSub.V1.Topic>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTopic",
        __Marshaller_GetTopicRequest,
        __Marshaller_Topic);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.ListTopicsRequest, global::Google.Cloud.PubSub.V1.ListTopicsResponse> __Method_ListTopics = new grpc::Method<global::Google.Cloud.PubSub.V1.ListTopicsRequest, global::Google.Cloud.PubSub.V1.ListTopicsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTopics",
        __Marshaller_ListTopicsRequest,
        __Marshaller_ListTopicsResponse);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsRequest, global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsResponse> __Method_ListTopicSubscriptions = new grpc::Method<global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsRequest, global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTopicSubscriptions",
        __Marshaller_ListTopicSubscriptionsRequest,
        __Marshaller_ListTopicSubscriptionsResponse);

    static readonly grpc::Method<global::Google.Cloud.PubSub.V1.DeleteTopicRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteTopic = new grpc::Method<global::Google.Cloud.PubSub.V1.DeleteTopicRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTopic",
        __Marshaller_DeleteTopicRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.PubSub.V1.PubsubReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Publisher</summary>
    public abstract partial class PublisherBase
    {
      /// <summary>
      /// Creates the given topic with the given name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.Topic> CreateTopic(global::Google.Cloud.PubSub.V1.Topic request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing topic. Note that certain properties of a topic are not
      /// modifiable.  Options settings follow the style guide:
      /// NOTE:  The style guide requires body: "topic" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.Topic> UpdateTopic(global::Google.Cloud.PubSub.V1.UpdateTopicRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
      /// does not exist. The message payload must not be empty; it must contain
      ///  either a non-empty data field, or at least one attribute.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.PublishResponse> Publish(global::Google.Cloud.PubSub.V1.PublishRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the configuration of a topic.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.Topic> GetTopic(global::Google.Cloud.PubSub.V1.GetTopicRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists matching topics.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.ListTopicsResponse> ListTopics(global::Google.Cloud.PubSub.V1.ListTopicsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the name of the subscriptions for this topic.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsResponse> ListTopicSubscriptions(global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
      /// does not exist. After a topic is deleted, a new topic may be created with
      /// the same name; this is an entirely new topic with none of the old
      /// configuration or subscriptions. Existing subscriptions to this topic are
      /// not deleted, but their `topic` field is set to `_deleted-topic_`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTopic(global::Google.Cloud.PubSub.V1.DeleteTopicRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Publisher</summary>
    public partial class PublisherClient : grpc::ClientBase<PublisherClient>
    {
      /// <summary>Creates a new client for Publisher</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PublisherClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Publisher that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PublisherClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PublisherClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PublisherClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates the given topic with the given name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Topic CreateTopic(global::Google.Cloud.PubSub.V1.Topic request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateTopic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates the given topic with the given name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Topic CreateTopic(global::Google.Cloud.PubSub.V1.Topic request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTopic, null, options, request);
      }
      /// <summary>
      /// Creates the given topic with the given name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Topic> CreateTopicAsync(global::Google.Cloud.PubSub.V1.Topic request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateTopicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates the given topic with the given name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Topic> CreateTopicAsync(global::Google.Cloud.PubSub.V1.Topic request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTopic, null, options, request);
      }
      /// <summary>
      /// Updates an existing topic. Note that certain properties of a topic are not
      /// modifiable.  Options settings follow the style guide:
      /// NOTE:  The style guide requires body: "topic" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Topic UpdateTopic(global::Google.Cloud.PubSub.V1.UpdateTopicRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateTopic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing topic. Note that certain properties of a topic are not
      /// modifiable.  Options settings follow the style guide:
      /// NOTE:  The style guide requires body: "topic" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Topic UpdateTopic(global::Google.Cloud.PubSub.V1.UpdateTopicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTopic, null, options, request);
      }
      /// <summary>
      /// Updates an existing topic. Note that certain properties of a topic are not
      /// modifiable.  Options settings follow the style guide:
      /// NOTE:  The style guide requires body: "topic" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Topic> UpdateTopicAsync(global::Google.Cloud.PubSub.V1.UpdateTopicRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateTopicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing topic. Note that certain properties of a topic are not
      /// modifiable.  Options settings follow the style guide:
      /// NOTE:  The style guide requires body: "topic" instead of body: "*".
      /// Keeping the latter for internal consistency in V1, however it should be
      /// corrected in V2.  See
      /// https://cloud.google.com/apis/design/standard_methods#update for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Topic> UpdateTopicAsync(global::Google.Cloud.PubSub.V1.UpdateTopicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTopic, null, options, request);
      }
      /// <summary>
      /// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
      /// does not exist. The message payload must not be empty; it must contain
      ///  either a non-empty data field, or at least one attribute.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.PublishResponse Publish(global::Google.Cloud.PubSub.V1.PublishRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Publish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
      /// does not exist. The message payload must not be empty; it must contain
      ///  either a non-empty data field, or at least one attribute.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.PublishResponse Publish(global::Google.Cloud.PubSub.V1.PublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Publish, null, options, request);
      }
      /// <summary>
      /// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
      /// does not exist. The message payload must not be empty; it must contain
      ///  either a non-empty data field, or at least one attribute.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.PublishResponse> PublishAsync(global::Google.Cloud.PubSub.V1.PublishRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PublishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
      /// does not exist. The message payload must not be empty; it must contain
      ///  either a non-empty data field, or at least one attribute.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.PublishResponse> PublishAsync(global::Google.Cloud.PubSub.V1.PublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Publish, null, options, request);
      }
      /// <summary>
      /// Gets the configuration of a topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Topic GetTopic(global::Google.Cloud.PubSub.V1.GetTopicRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTopic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the configuration of a topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.Topic GetTopic(global::Google.Cloud.PubSub.V1.GetTopicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTopic, null, options, request);
      }
      /// <summary>
      /// Gets the configuration of a topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Topic> GetTopicAsync(global::Google.Cloud.PubSub.V1.GetTopicRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTopicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the configuration of a topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.Topic> GetTopicAsync(global::Google.Cloud.PubSub.V1.GetTopicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTopic, null, options, request);
      }
      /// <summary>
      /// Lists matching topics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.ListTopicsResponse ListTopics(global::Google.Cloud.PubSub.V1.ListTopicsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTopics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists matching topics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.ListTopicsResponse ListTopics(global::Google.Cloud.PubSub.V1.ListTopicsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTopics, null, options, request);
      }
      /// <summary>
      /// Lists matching topics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.ListTopicsResponse> ListTopicsAsync(global::Google.Cloud.PubSub.V1.ListTopicsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTopicsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists matching topics.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.ListTopicsResponse> ListTopicsAsync(global::Google.Cloud.PubSub.V1.ListTopicsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTopics, null, options, request);
      }
      /// <summary>
      /// Lists the name of the subscriptions for this topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsResponse ListTopicSubscriptions(global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTopicSubscriptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the name of the subscriptions for this topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsResponse ListTopicSubscriptions(global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTopicSubscriptions, null, options, request);
      }
      /// <summary>
      /// Lists the name of the subscriptions for this topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsResponse> ListTopicSubscriptionsAsync(global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTopicSubscriptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the name of the subscriptions for this topic.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsResponse> ListTopicSubscriptionsAsync(global::Google.Cloud.PubSub.V1.ListTopicSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTopicSubscriptions, null, options, request);
      }
      /// <summary>
      /// Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
      /// does not exist. After a topic is deleted, a new topic may be created with
      /// the same name; this is an entirely new topic with none of the old
      /// configuration or subscriptions. Existing subscriptions to this topic are
      /// not deleted, but their `topic` field is set to `_deleted-topic_`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTopic(global::Google.Cloud.PubSub.V1.DeleteTopicRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteTopic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
      /// does not exist. After a topic is deleted, a new topic may be created with
      /// the same name; this is an entirely new topic with none of the old
      /// configuration or subscriptions. Existing subscriptions to this topic are
      /// not deleted, but their `topic` field is set to `_deleted-topic_`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTopic(global::Google.Cloud.PubSub.V1.DeleteTopicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTopic, null, options, request);
      }
      /// <summary>
      /// Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
      /// does not exist. After a topic is deleted, a new topic may be created with
      /// the same name; this is an entirely new topic with none of the old
      /// configuration or subscriptions. Existing subscriptions to this topic are
      /// not deleted, but their `topic` field is set to `_deleted-topic_`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTopicAsync(global::Google.Cloud.PubSub.V1.DeleteTopicRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteTopicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
      /// does not exist. After a topic is deleted, a new topic may be created with
      /// the same name; this is an entirely new topic with none of the old
      /// configuration or subscriptions. Existing subscriptions to this topic are
      /// not deleted, but their `topic` field is set to `_deleted-topic_`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTopicAsync(global::Google.Cloud.PubSub.V1.DeleteTopicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTopic, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PublisherClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PublisherClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PublisherBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateTopic, serviceImpl.CreateTopic)
          .AddMethod(__Method_UpdateTopic, serviceImpl.UpdateTopic)
          .AddMethod(__Method_Publish, serviceImpl.Publish)
          .AddMethod(__Method_GetTopic, serviceImpl.GetTopic)
          .AddMethod(__Method_ListTopics, serviceImpl.ListTopics)
          .AddMethod(__Method_ListTopicSubscriptions, serviceImpl.ListTopicSubscriptions)
          .AddMethod(__Method_DeleteTopic, serviceImpl.DeleteTopic).Build();
    }

  }
}
#endregion
