// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/mutation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Spanner.V1 {

  /// <summary>Holder for reflection information generated from google/spanner/v1/mutation.proto</summary>
  public static partial class MutationReflection {

    #region Descriptor
    /// <summary>File descriptor for google/spanner/v1/mutation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MutationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBnb29nbGUvc3Bhbm5lci92MS9tdXRhdGlvbi5wcm90bxIRZ29vZ2xlLnNw",
            "YW5uZXIudjEaHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aHGdvb2ds",
            "ZS9wcm90b2J1Zi9zdHJ1Y3QucHJvdG8aHGdvb2dsZS9zcGFubmVyL3YxL2tl",
            "eXMucHJvdG8ixgMKCE11dGF0aW9uEjMKBmluc2VydBgBIAEoCzIhLmdvb2ds",
            "ZS5zcGFubmVyLnYxLk11dGF0aW9uLldyaXRlSAASMwoGdXBkYXRlGAIgASgL",
            "MiEuZ29vZ2xlLnNwYW5uZXIudjEuTXV0YXRpb24uV3JpdGVIABI9ChBpbnNl",
            "cnRfb3JfdXBkYXRlGAMgASgLMiEuZ29vZ2xlLnNwYW5uZXIudjEuTXV0YXRp",
            "b24uV3JpdGVIABI0CgdyZXBsYWNlGAQgASgLMiEuZ29vZ2xlLnNwYW5uZXIu",
            "djEuTXV0YXRpb24uV3JpdGVIABI0CgZkZWxldGUYBSABKAsyIi5nb29nbGUu",
            "c3Bhbm5lci52MS5NdXRhdGlvbi5EZWxldGVIABpTCgVXcml0ZRINCgV0YWJs",
            "ZRgBIAEoCRIPCgdjb2x1bW5zGAIgAygJEioKBnZhbHVlcxgDIAMoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5MaXN0VmFsdWUaQwoGRGVsZXRlEg0KBXRhYmxlGAEg",
            "ASgJEioKB2tleV9zZXQYAiABKAsyGS5nb29nbGUuc3Bhbm5lci52MS5LZXlT",
            "ZXRCCwoJb3BlcmF0aW9uQnwKFWNvbS5nb29nbGUuc3Bhbm5lci52MUINTXV0",
            "YXRpb25Qcm90b1ABWjhnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29n",
            "bGVhcGlzL3NwYW5uZXIvdjE7c3Bhbm5lcqoCF0dvb2dsZS5DbG91ZC5TcGFu",
            "bmVyLlYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Cloud.Spanner.V1.KeysReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Spanner.V1.Mutation), global::Google.Cloud.Spanner.V1.Mutation.Parser, new[]{ "Insert", "Update", "InsertOrUpdate", "Replace", "Delete" }, new[]{ "Operation" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Spanner.V1.Mutation.Types.Write), global::Google.Cloud.Spanner.V1.Mutation.Types.Write.Parser, new[]{ "Table", "Columns", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Spanner.V1.Mutation.Types.Delete), global::Google.Cloud.Spanner.V1.Mutation.Types.Delete.Parser, new[]{ "Table", "KeySet" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A modification to one or more Cloud Spanner rows.  Mutations can be
  /// applied to a Cloud Spanner database by sending them in a
  /// [Commit][google.spanner.v1.Spanner.Commit] call.
  /// </summary>
  public sealed partial class Mutation : pb::IMessage<Mutation> {
    private static readonly pb::MessageParser<Mutation> _parser = new pb::MessageParser<Mutation>(() => new Mutation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mutation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Spanner.V1.MutationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mutation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mutation(Mutation other) : this() {
      switch (other.OperationCase) {
        case OperationOneofCase.Insert:
          Insert = other.Insert.Clone();
          break;
        case OperationOneofCase.Update:
          Update = other.Update.Clone();
          break;
        case OperationOneofCase.InsertOrUpdate:
          InsertOrUpdate = other.InsertOrUpdate.Clone();
          break;
        case OperationOneofCase.Replace:
          Replace = other.Replace.Clone();
          break;
        case OperationOneofCase.Delete:
          Delete = other.Delete.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mutation Clone() {
      return new Mutation(this);
    }

    /// <summary>Field number for the "insert" field.</summary>
    public const int InsertFieldNumber = 1;
    /// <summary>
    /// Insert new rows in a table. If any of the rows already exist,
    /// the write or transaction fails with error `ALREADY_EXISTS`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Spanner.V1.Mutation.Types.Write Insert {
      get { return operationCase_ == OperationOneofCase.Insert ? (global::Google.Cloud.Spanner.V1.Mutation.Types.Write) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Insert;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 2;
    /// <summary>
    /// Update existing rows in a table. If any of the rows does not
    /// already exist, the transaction fails with error `NOT_FOUND`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Spanner.V1.Mutation.Types.Write Update {
      get { return operationCase_ == OperationOneofCase.Update ? (global::Google.Cloud.Spanner.V1.Mutation.Types.Write) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Update;
      }
    }

    /// <summary>Field number for the "insert_or_update" field.</summary>
    public const int InsertOrUpdateFieldNumber = 3;
    /// <summary>
    /// Like [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, then
    /// its column values are overwritten with the ones provided. Any
    /// column values not explicitly written are preserved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Spanner.V1.Mutation.Types.Write InsertOrUpdate {
      get { return operationCase_ == OperationOneofCase.InsertOrUpdate ? (global::Google.Cloud.Spanner.V1.Mutation.Types.Write) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.InsertOrUpdate;
      }
    }

    /// <summary>Field number for the "replace" field.</summary>
    public const int ReplaceFieldNumber = 4;
    /// <summary>
    /// Like [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, it is
    /// deleted, and the column values provided are inserted
    /// instead. Unlike [insert_or_update][google.spanner.v1.Mutation.insert_or_update], this means any values not
    /// explicitly written become `NULL`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Spanner.V1.Mutation.Types.Write Replace {
      get { return operationCase_ == OperationOneofCase.Replace ? (global::Google.Cloud.Spanner.V1.Mutation.Types.Write) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Replace;
      }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 5;
    /// <summary>
    /// Delete rows from a table. Succeeds whether or not the named
    /// rows were present.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Spanner.V1.Mutation.Types.Delete Delete {
      get { return operationCase_ == OperationOneofCase.Delete ? (global::Google.Cloud.Spanner.V1.Mutation.Types.Delete) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Delete;
      }
    }

    private object operation_;
    /// <summary>Enum of possible cases for the "operation" oneof.</summary>
    public enum OperationOneofCase {
      None = 0,
      Insert = 1,
      Update = 2,
      InsertOrUpdate = 3,
      Replace = 4,
      Delete = 5,
    }
    private OperationOneofCase operationCase_ = OperationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationOneofCase OperationCase {
      get { return operationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOperation() {
      operationCase_ = OperationOneofCase.None;
      operation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mutation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mutation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Insert, other.Insert)) return false;
      if (!object.Equals(Update, other.Update)) return false;
      if (!object.Equals(InsertOrUpdate, other.InsertOrUpdate)) return false;
      if (!object.Equals(Replace, other.Replace)) return false;
      if (!object.Equals(Delete, other.Delete)) return false;
      if (OperationCase != other.OperationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (operationCase_ == OperationOneofCase.Insert) hash ^= Insert.GetHashCode();
      if (operationCase_ == OperationOneofCase.Update) hash ^= Update.GetHashCode();
      if (operationCase_ == OperationOneofCase.InsertOrUpdate) hash ^= InsertOrUpdate.GetHashCode();
      if (operationCase_ == OperationOneofCase.Replace) hash ^= Replace.GetHashCode();
      if (operationCase_ == OperationOneofCase.Delete) hash ^= Delete.GetHashCode();
      hash ^= (int) operationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (operationCase_ == OperationOneofCase.Insert) {
        output.WriteRawTag(10);
        output.WriteMessage(Insert);
      }
      if (operationCase_ == OperationOneofCase.Update) {
        output.WriteRawTag(18);
        output.WriteMessage(Update);
      }
      if (operationCase_ == OperationOneofCase.InsertOrUpdate) {
        output.WriteRawTag(26);
        output.WriteMessage(InsertOrUpdate);
      }
      if (operationCase_ == OperationOneofCase.Replace) {
        output.WriteRawTag(34);
        output.WriteMessage(Replace);
      }
      if (operationCase_ == OperationOneofCase.Delete) {
        output.WriteRawTag(42);
        output.WriteMessage(Delete);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (operationCase_ == OperationOneofCase.Insert) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Insert);
      }
      if (operationCase_ == OperationOneofCase.Update) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (operationCase_ == OperationOneofCase.InsertOrUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InsertOrUpdate);
      }
      if (operationCase_ == OperationOneofCase.Replace) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Replace);
      }
      if (operationCase_ == OperationOneofCase.Delete) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delete);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mutation other) {
      if (other == null) {
        return;
      }
      switch (other.OperationCase) {
        case OperationOneofCase.Insert:
          Insert = other.Insert;
          break;
        case OperationOneofCase.Update:
          Update = other.Update;
          break;
        case OperationOneofCase.InsertOrUpdate:
          InsertOrUpdate = other.InsertOrUpdate;
          break;
        case OperationOneofCase.Replace:
          Replace = other.Replace;
          break;
        case OperationOneofCase.Delete:
          Delete = other.Delete;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Spanner.V1.Mutation.Types.Write subBuilder = new global::Google.Cloud.Spanner.V1.Mutation.Types.Write();
            if (operationCase_ == OperationOneofCase.Insert) {
              subBuilder.MergeFrom(Insert);
            }
            input.ReadMessage(subBuilder);
            Insert = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.Spanner.V1.Mutation.Types.Write subBuilder = new global::Google.Cloud.Spanner.V1.Mutation.Types.Write();
            if (operationCase_ == OperationOneofCase.Update) {
              subBuilder.MergeFrom(Update);
            }
            input.ReadMessage(subBuilder);
            Update = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Spanner.V1.Mutation.Types.Write subBuilder = new global::Google.Cloud.Spanner.V1.Mutation.Types.Write();
            if (operationCase_ == OperationOneofCase.InsertOrUpdate) {
              subBuilder.MergeFrom(InsertOrUpdate);
            }
            input.ReadMessage(subBuilder);
            InsertOrUpdate = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Spanner.V1.Mutation.Types.Write subBuilder = new global::Google.Cloud.Spanner.V1.Mutation.Types.Write();
            if (operationCase_ == OperationOneofCase.Replace) {
              subBuilder.MergeFrom(Replace);
            }
            input.ReadMessage(subBuilder);
            Replace = subBuilder;
            break;
          }
          case 42: {
            global::Google.Cloud.Spanner.V1.Mutation.Types.Delete subBuilder = new global::Google.Cloud.Spanner.V1.Mutation.Types.Delete();
            if (operationCase_ == OperationOneofCase.Delete) {
              subBuilder.MergeFrom(Delete);
            }
            input.ReadMessage(subBuilder);
            Delete = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Mutation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Arguments to [insert][google.spanner.v1.Mutation.insert], [update][google.spanner.v1.Mutation.update], [insert_or_update][google.spanner.v1.Mutation.insert_or_update], and
      /// [replace][google.spanner.v1.Mutation.replace] operations.
      /// </summary>
      public sealed partial class Write : pb::IMessage<Write> {
        private static readonly pb::MessageParser<Write> _parser = new pb::MessageParser<Write>(() => new Write());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Write> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Spanner.V1.Mutation.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Write() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Write(Write other) : this() {
          table_ = other.table_;
          columns_ = other.columns_.Clone();
          values_ = other.values_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Write Clone() {
          return new Write(this);
        }

        /// <summary>Field number for the "table" field.</summary>
        public const int TableFieldNumber = 1;
        private string table_ = "";
        /// <summary>
        /// Required. The table whose rows will be written.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Table {
          get { return table_; }
          set {
            table_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "columns" field.</summary>
        public const int ColumnsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_columns_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// The names of the columns in [table][google.spanner.v1.Mutation.Write.table] to be written.
        ///
        /// The list of columns must contain enough columns to allow
        /// Cloud Spanner to derive values for all primary key columns in the
        /// row(s) to be modified.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Columns {
          get { return columns_; }
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.ListValue> _repeated_values_codec
            = pb::FieldCodec.ForMessage(26, global::Google.Protobuf.WellKnownTypes.ListValue.Parser);
        private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.ListValue> values_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.ListValue>();
        /// <summary>
        /// The values to be written. `values` can contain more than one
        /// list of values. If it does, then multiple rows are written, one
        /// for each entry in `values`. Each list in `values` must have
        /// exactly as many entries as there are entries in [columns][google.spanner.v1.Mutation.Write.columns]
        /// above. Sending multiple lists is equivalent to sending multiple
        /// `Mutation`s, each containing one `values` entry and repeating
        /// [table][google.spanner.v1.Mutation.Write.table] and [columns][google.spanner.v1.Mutation.Write.columns]. Individual values in each list are
        /// encoded as described [here][google.spanner.v1.TypeCode].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.ListValue> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Write);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Write other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Table != other.Table) return false;
          if(!columns_.Equals(other.columns_)) return false;
          if(!values_.Equals(other.values_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Table.Length != 0) hash ^= Table.GetHashCode();
          hash ^= columns_.GetHashCode();
          hash ^= values_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Table.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Table);
          }
          columns_.WriteTo(output, _repeated_columns_codec);
          values_.WriteTo(output, _repeated_values_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Table.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Table);
          }
          size += columns_.CalculateSize(_repeated_columns_codec);
          size += values_.CalculateSize(_repeated_values_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Write other) {
          if (other == null) {
            return;
          }
          if (other.Table.Length != 0) {
            Table = other.Table;
          }
          columns_.Add(other.columns_);
          values_.Add(other.values_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Table = input.ReadString();
                break;
              }
              case 18: {
                columns_.AddEntriesFrom(input, _repeated_columns_codec);
                break;
              }
              case 26: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Arguments to [delete][google.spanner.v1.Mutation.delete] operations.
      /// </summary>
      public sealed partial class Delete : pb::IMessage<Delete> {
        private static readonly pb::MessageParser<Delete> _parser = new pb::MessageParser<Delete>(() => new Delete());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Delete> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Spanner.V1.Mutation.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Delete() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Delete(Delete other) : this() {
          table_ = other.table_;
          KeySet = other.keySet_ != null ? other.KeySet.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Delete Clone() {
          return new Delete(this);
        }

        /// <summary>Field number for the "table" field.</summary>
        public const int TableFieldNumber = 1;
        private string table_ = "";
        /// <summary>
        /// Required. The table whose rows will be deleted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Table {
          get { return table_; }
          set {
            table_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "key_set" field.</summary>
        public const int KeySetFieldNumber = 2;
        private global::Google.Cloud.Spanner.V1.KeySet keySet_;
        /// <summary>
        /// Required. The primary keys of the rows within [table][google.spanner.v1.Mutation.Delete.table] to delete.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Spanner.V1.KeySet KeySet {
          get { return keySet_; }
          set {
            keySet_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Delete);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Delete other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Table != other.Table) return false;
          if (!object.Equals(KeySet, other.KeySet)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Table.Length != 0) hash ^= Table.GetHashCode();
          if (keySet_ != null) hash ^= KeySet.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Table.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Table);
          }
          if (keySet_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(KeySet);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Table.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Table);
          }
          if (keySet_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeySet);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Delete other) {
          if (other == null) {
            return;
          }
          if (other.Table.Length != 0) {
            Table = other.Table;
          }
          if (other.keySet_ != null) {
            if (keySet_ == null) {
              keySet_ = new global::Google.Cloud.Spanner.V1.KeySet();
            }
            KeySet.MergeFrom(other.KeySet);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Table = input.ReadString();
                break;
              }
              case 18: {
                if (keySet_ == null) {
                  keySet_ = new global::Google.Cloud.Spanner.V1.KeySet();
                }
                input.ReadMessage(keySet_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
