// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/spanner.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Google.Cloud.Spanner.V1 {
  /// <summary>
  /// Cloud Spanner API
  ///
  /// The Cloud Spanner API can be used to manage sessions and execute
  /// transactions on data stored in Cloud Spanner databases.
  /// </summary>
  public static partial class Spanner
  {
    static readonly string __ServiceName = "google.spanner.v1.Spanner";

    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.CreateSessionRequest> __Marshaller_CreateSessionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.CreateSessionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.Session> __Marshaller_Session = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.Session.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.GetSessionRequest> __Marshaller_GetSessionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.GetSessionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.DeleteSessionRequest> __Marshaller_DeleteSessionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.DeleteSessionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest> __Marshaller_ExecuteSqlRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.ExecuteSqlRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.ResultSet> __Marshaller_ResultSet = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.ResultSet.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.PartialResultSet> __Marshaller_PartialResultSet = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.PartialResultSet.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.ReadRequest> __Marshaller_ReadRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.ReadRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.BeginTransactionRequest> __Marshaller_BeginTransactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.BeginTransactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.Transaction> __Marshaller_Transaction = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.Transaction.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.CommitRequest> __Marshaller_CommitRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.CommitRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.CommitResponse> __Marshaller_CommitResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.CommitResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.RollbackRequest> __Marshaller_RollbackRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Spanner.V1.RollbackRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.CreateSessionRequest, global::Google.Cloud.Spanner.V1.Session> __Method_CreateSession = new grpc::Method<global::Google.Cloud.Spanner.V1.CreateSessionRequest, global::Google.Cloud.Spanner.V1.Session>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSession",
        __Marshaller_CreateSessionRequest,
        __Marshaller_Session);

    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.GetSessionRequest, global::Google.Cloud.Spanner.V1.Session> __Method_GetSession = new grpc::Method<global::Google.Cloud.Spanner.V1.GetSessionRequest, global::Google.Cloud.Spanner.V1.Session>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSession",
        __Marshaller_GetSessionRequest,
        __Marshaller_Session);

    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.DeleteSessionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSession = new grpc::Method<global::Google.Cloud.Spanner.V1.DeleteSessionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSession",
        __Marshaller_DeleteSessionRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest, global::Google.Cloud.Spanner.V1.ResultSet> __Method_ExecuteSql = new grpc::Method<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest, global::Google.Cloud.Spanner.V1.ResultSet>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteSql",
        __Marshaller_ExecuteSqlRequest,
        __Marshaller_ResultSet);

    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest, global::Google.Cloud.Spanner.V1.PartialResultSet> __Method_ExecuteStreamingSql = new grpc::Method<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest, global::Google.Cloud.Spanner.V1.PartialResultSet>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ExecuteStreamingSql",
        __Marshaller_ExecuteSqlRequest,
        __Marshaller_PartialResultSet);

    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.ReadRequest, global::Google.Cloud.Spanner.V1.ResultSet> __Method_Read = new grpc::Method<global::Google.Cloud.Spanner.V1.ReadRequest, global::Google.Cloud.Spanner.V1.ResultSet>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Read",
        __Marshaller_ReadRequest,
        __Marshaller_ResultSet);

    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.ReadRequest, global::Google.Cloud.Spanner.V1.PartialResultSet> __Method_StreamingRead = new grpc::Method<global::Google.Cloud.Spanner.V1.ReadRequest, global::Google.Cloud.Spanner.V1.PartialResultSet>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamingRead",
        __Marshaller_ReadRequest,
        __Marshaller_PartialResultSet);

    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.BeginTransactionRequest, global::Google.Cloud.Spanner.V1.Transaction> __Method_BeginTransaction = new grpc::Method<global::Google.Cloud.Spanner.V1.BeginTransactionRequest, global::Google.Cloud.Spanner.V1.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BeginTransaction",
        __Marshaller_BeginTransactionRequest,
        __Marshaller_Transaction);

    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.CommitRequest, global::Google.Cloud.Spanner.V1.CommitResponse> __Method_Commit = new grpc::Method<global::Google.Cloud.Spanner.V1.CommitRequest, global::Google.Cloud.Spanner.V1.CommitResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Commit",
        __Marshaller_CommitRequest,
        __Marshaller_CommitResponse);

    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.RollbackRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Rollback = new grpc::Method<global::Google.Cloud.Spanner.V1.RollbackRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Rollback",
        __Marshaller_RollbackRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Spanner.V1.SpannerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Spanner</summary>
    public abstract partial class SpannerBase
    {
      /// <summary>
      /// Creates a new session. A session can be used to perform
      /// transactions that read and/or modify data in a Cloud Spanner database.
      /// Sessions are meant to be reused for many consecutive
      /// transactions.
      ///
      /// Sessions can only execute one transaction at a time. To execute
      /// multiple concurrent read-write/write-only transactions, create
      /// multiple sessions. Note that standalone reads and queries use a
      /// transaction internally, and count toward the one transaction
      /// limit.
      ///
      /// Cloud Spanner limits the number of sessions that can exist at any given
      /// time; thus, it is a good idea to delete idle and/or unneeded sessions.
      /// Aside from explicit deletes, Cloud Spanner can delete sessions for which no
      /// operations are sent for more than an hour. If a session is deleted,
      /// requests to it return `NOT_FOUND`.
      ///
      /// Idle sessions can be kept alive by sending a trivial SQL query
      /// periodically, e.g., `"SELECT 1"`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.Session> CreateSession(global::Google.Cloud.Spanner.V1.CreateSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a session. Returns `NOT_FOUND` if the session does not exist.
      /// This is mainly useful for determining whether a session is still
      /// alive.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.Session> GetSession(global::Google.Cloud.Spanner.V1.GetSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Ends a session, releasing server resources associated with it.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSession(global::Google.Cloud.Spanner.V1.DeleteSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Executes an SQL query, returning all rows in a single reply. This
      /// method cannot be used to return a result set larger than 10 MiB;
      /// if the query yields more data than that, the query fails with
      /// a `FAILED_PRECONDITION` error.
      ///
      /// Queries inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
      ///
      /// Larger result sets can be fetched in streaming fashion by calling
      /// [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.ResultSet> ExecuteSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Like [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], except returns the result
      /// set as a stream. Unlike [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], there
      /// is no limit on the size of the returned result set. However, no
      /// individual row in the result set can exceed 100 MiB, and no
      /// column value can exceed 10 MiB.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ExecuteStreamingSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Spanner.V1.PartialResultSet> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Reads rows from the database using key lookups and scans, as a
      /// simple key/value style alternative to
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be used to
      /// return a result set larger than 10 MiB; if the read matches more
      /// data than that, the read fails with a `FAILED_PRECONDITION`
      /// error.
      ///
      /// Reads inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
      ///
      /// Larger result sets can be yielded in streaming fashion by calling
      /// [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.ResultSet> Read(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Like [Read][google.spanner.v1.Spanner.Read], except returns the result set as a
      /// stream. Unlike [Read][google.spanner.v1.Spanner.Read], there is no limit on the
      /// size of the returned result set. However, no individual row in
      /// the result set can exceed 100 MiB, and no column value can exceed
      /// 10 MiB.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task StreamingRead(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Spanner.V1.PartialResultSet> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Begins a new transaction. This step can often be skipped:
      /// [Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
      /// [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
      /// side-effect.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.Transaction> BeginTransaction(global::Google.Cloud.Spanner.V1.BeginTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Commits a transaction. The request includes the mutations to be
      /// applied to rows in the database.
      ///
      /// `Commit` might return an `ABORTED` error. This can occur at any time;
      /// commonly, the cause is conflicts with concurrent
      /// transactions. However, it can also happen for a variety of other
      /// reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
      /// the transaction from the beginning, re-using the same session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.CommitResponse> Commit(global::Google.Cloud.Spanner.V1.CommitRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Rolls back a transaction, releasing any locks it holds. It is a good
      /// idea to call this for any transaction that includes one or more
      /// [Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and
      /// ultimately decides not to commit.
      ///
      /// `Rollback` returns `OK` if it successfully aborts the transaction, the
      /// transaction was already aborted, or the transaction is not
      /// found. `Rollback` never returns `ABORTED`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Rollback(global::Google.Cloud.Spanner.V1.RollbackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Spanner</summary>
    public partial class SpannerClient : grpc::ClientBase<SpannerClient>
    {
      /// <summary>Creates a new client for Spanner</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SpannerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Spanner that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SpannerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SpannerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SpannerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a new session. A session can be used to perform
      /// transactions that read and/or modify data in a Cloud Spanner database.
      /// Sessions are meant to be reused for many consecutive
      /// transactions.
      ///
      /// Sessions can only execute one transaction at a time. To execute
      /// multiple concurrent read-write/write-only transactions, create
      /// multiple sessions. Note that standalone reads and queries use a
      /// transaction internally, and count toward the one transaction
      /// limit.
      ///
      /// Cloud Spanner limits the number of sessions that can exist at any given
      /// time; thus, it is a good idea to delete idle and/or unneeded sessions.
      /// Aside from explicit deletes, Cloud Spanner can delete sessions for which no
      /// operations are sent for more than an hour. If a session is deleted,
      /// requests to it return `NOT_FOUND`.
      ///
      /// Idle sessions can be kept alive by sending a trivial SQL query
      /// periodically, e.g., `"SELECT 1"`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.Session CreateSession(global::Google.Cloud.Spanner.V1.CreateSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new session. A session can be used to perform
      /// transactions that read and/or modify data in a Cloud Spanner database.
      /// Sessions are meant to be reused for many consecutive
      /// transactions.
      ///
      /// Sessions can only execute one transaction at a time. To execute
      /// multiple concurrent read-write/write-only transactions, create
      /// multiple sessions. Note that standalone reads and queries use a
      /// transaction internally, and count toward the one transaction
      /// limit.
      ///
      /// Cloud Spanner limits the number of sessions that can exist at any given
      /// time; thus, it is a good idea to delete idle and/or unneeded sessions.
      /// Aside from explicit deletes, Cloud Spanner can delete sessions for which no
      /// operations are sent for more than an hour. If a session is deleted,
      /// requests to it return `NOT_FOUND`.
      ///
      /// Idle sessions can be kept alive by sending a trivial SQL query
      /// periodically, e.g., `"SELECT 1"`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.Session CreateSession(global::Google.Cloud.Spanner.V1.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      /// Creates a new session. A session can be used to perform
      /// transactions that read and/or modify data in a Cloud Spanner database.
      /// Sessions are meant to be reused for many consecutive
      /// transactions.
      ///
      /// Sessions can only execute one transaction at a time. To execute
      /// multiple concurrent read-write/write-only transactions, create
      /// multiple sessions. Note that standalone reads and queries use a
      /// transaction internally, and count toward the one transaction
      /// limit.
      ///
      /// Cloud Spanner limits the number of sessions that can exist at any given
      /// time; thus, it is a good idea to delete idle and/or unneeded sessions.
      /// Aside from explicit deletes, Cloud Spanner can delete sessions for which no
      /// operations are sent for more than an hour. If a session is deleted,
      /// requests to it return `NOT_FOUND`.
      ///
      /// Idle sessions can be kept alive by sending a trivial SQL query
      /// periodically, e.g., `"SELECT 1"`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Session> CreateSessionAsync(global::Google.Cloud.Spanner.V1.CreateSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new session. A session can be used to perform
      /// transactions that read and/or modify data in a Cloud Spanner database.
      /// Sessions are meant to be reused for many consecutive
      /// transactions.
      ///
      /// Sessions can only execute one transaction at a time. To execute
      /// multiple concurrent read-write/write-only transactions, create
      /// multiple sessions. Note that standalone reads and queries use a
      /// transaction internally, and count toward the one transaction
      /// limit.
      ///
      /// Cloud Spanner limits the number of sessions that can exist at any given
      /// time; thus, it is a good idea to delete idle and/or unneeded sessions.
      /// Aside from explicit deletes, Cloud Spanner can delete sessions for which no
      /// operations are sent for more than an hour. If a session is deleted,
      /// requests to it return `NOT_FOUND`.
      ///
      /// Idle sessions can be kept alive by sending a trivial SQL query
      /// periodically, e.g., `"SELECT 1"`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Session> CreateSessionAsync(global::Google.Cloud.Spanner.V1.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      /// Gets a session. Returns `NOT_FOUND` if the session does not exist.
      /// This is mainly useful for determining whether a session is still
      /// alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.Session GetSession(global::Google.Cloud.Spanner.V1.GetSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a session. Returns `NOT_FOUND` if the session does not exist.
      /// This is mainly useful for determining whether a session is still
      /// alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.Session GetSession(global::Google.Cloud.Spanner.V1.GetSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSession, null, options, request);
      }
      /// <summary>
      /// Gets a session. Returns `NOT_FOUND` if the session does not exist.
      /// This is mainly useful for determining whether a session is still
      /// alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Session> GetSessionAsync(global::Google.Cloud.Spanner.V1.GetSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a session. Returns `NOT_FOUND` if the session does not exist.
      /// This is mainly useful for determining whether a session is still
      /// alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Session> GetSessionAsync(global::Google.Cloud.Spanner.V1.GetSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSession, null, options, request);
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSession(global::Google.Cloud.Spanner.V1.DeleteSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSession(global::Google.Cloud.Spanner.V1.DeleteSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSession, null, options, request);
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSessionAsync(global::Google.Cloud.Spanner.V1.DeleteSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSessionAsync(global::Google.Cloud.Spanner.V1.DeleteSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSession, null, options, request);
      }
      /// <summary>
      /// Executes an SQL query, returning all rows in a single reply. This
      /// method cannot be used to return a result set larger than 10 MiB;
      /// if the query yields more data than that, the query fails with
      /// a `FAILED_PRECONDITION` error.
      ///
      /// Queries inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
      ///
      /// Larger result sets can be fetched in streaming fashion by calling
      /// [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.ResultSet ExecuteSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExecuteSql(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes an SQL query, returning all rows in a single reply. This
      /// method cannot be used to return a result set larger than 10 MiB;
      /// if the query yields more data than that, the query fails with
      /// a `FAILED_PRECONDITION` error.
      ///
      /// Queries inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
      ///
      /// Larger result sets can be fetched in streaming fashion by calling
      /// [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.ResultSet ExecuteSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteSql, null, options, request);
      }
      /// <summary>
      /// Executes an SQL query, returning all rows in a single reply. This
      /// method cannot be used to return a result set larger than 10 MiB;
      /// if the query yields more data than that, the query fails with
      /// a `FAILED_PRECONDITION` error.
      ///
      /// Queries inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
      ///
      /// Larger result sets can be fetched in streaming fashion by calling
      /// [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ResultSet> ExecuteSqlAsync(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExecuteSqlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes an SQL query, returning all rows in a single reply. This
      /// method cannot be used to return a result set larger than 10 MiB;
      /// if the query yields more data than that, the query fails with
      /// a `FAILED_PRECONDITION` error.
      ///
      /// Queries inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
      ///
      /// Larger result sets can be fetched in streaming fashion by calling
      /// [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ResultSet> ExecuteSqlAsync(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteSql, null, options, request);
      }
      /// <summary>
      /// Like [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], except returns the result
      /// set as a stream. Unlike [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], there
      /// is no limit on the size of the returned result set. However, no
      /// individual row in the result set can exceed 100 MiB, and no
      /// column value can exceed 10 MiB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Spanner.V1.PartialResultSet> ExecuteStreamingSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExecuteStreamingSql(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Like [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], except returns the result
      /// set as a stream. Unlike [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], there
      /// is no limit on the size of the returned result set. However, no
      /// individual row in the result set can exceed 100 MiB, and no
      /// column value can exceed 10 MiB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Spanner.V1.PartialResultSet> ExecuteStreamingSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ExecuteStreamingSql, null, options, request);
      }
      /// <summary>
      /// Reads rows from the database using key lookups and scans, as a
      /// simple key/value style alternative to
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be used to
      /// return a result set larger than 10 MiB; if the read matches more
      /// data than that, the read fails with a `FAILED_PRECONDITION`
      /// error.
      ///
      /// Reads inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
      ///
      /// Larger result sets can be yielded in streaming fashion by calling
      /// [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.ResultSet Read(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Read(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads rows from the database using key lookups and scans, as a
      /// simple key/value style alternative to
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be used to
      /// return a result set larger than 10 MiB; if the read matches more
      /// data than that, the read fails with a `FAILED_PRECONDITION`
      /// error.
      ///
      /// Reads inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
      ///
      /// Larger result sets can be yielded in streaming fashion by calling
      /// [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.ResultSet Read(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Read, null, options, request);
      }
      /// <summary>
      /// Reads rows from the database using key lookups and scans, as a
      /// simple key/value style alternative to
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be used to
      /// return a result set larger than 10 MiB; if the read matches more
      /// data than that, the read fails with a `FAILED_PRECONDITION`
      /// error.
      ///
      /// Reads inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
      ///
      /// Larger result sets can be yielded in streaming fashion by calling
      /// [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ResultSet> ReadAsync(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads rows from the database using key lookups and scans, as a
      /// simple key/value style alternative to
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be used to
      /// return a result set larger than 10 MiB; if the read matches more
      /// data than that, the read fails with a `FAILED_PRECONDITION`
      /// error.
      ///
      /// Reads inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
      ///
      /// Larger result sets can be yielded in streaming fashion by calling
      /// [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ResultSet> ReadAsync(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Read, null, options, request);
      }
      /// <summary>
      /// Like [Read][google.spanner.v1.Spanner.Read], except returns the result set as a
      /// stream. Unlike [Read][google.spanner.v1.Spanner.Read], there is no limit on the
      /// size of the returned result set. However, no individual row in
      /// the result set can exceed 100 MiB, and no column value can exceed
      /// 10 MiB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Spanner.V1.PartialResultSet> StreamingRead(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StreamingRead(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Like [Read][google.spanner.v1.Spanner.Read], except returns the result set as a
      /// stream. Unlike [Read][google.spanner.v1.Spanner.Read], there is no limit on the
      /// size of the returned result set. However, no individual row in
      /// the result set can exceed 100 MiB, and no column value can exceed
      /// 10 MiB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Spanner.V1.PartialResultSet> StreamingRead(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamingRead, null, options, request);
      }
      /// <summary>
      /// Begins a new transaction. This step can often be skipped:
      /// [Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
      /// [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
      /// side-effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.Transaction BeginTransaction(global::Google.Cloud.Spanner.V1.BeginTransactionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BeginTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Begins a new transaction. This step can often be skipped:
      /// [Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
      /// [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
      /// side-effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.Transaction BeginTransaction(global::Google.Cloud.Spanner.V1.BeginTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BeginTransaction, null, options, request);
      }
      /// <summary>
      /// Begins a new transaction. This step can often be skipped:
      /// [Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
      /// [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
      /// side-effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Transaction> BeginTransactionAsync(global::Google.Cloud.Spanner.V1.BeginTransactionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BeginTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Begins a new transaction. This step can often be skipped:
      /// [Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
      /// [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
      /// side-effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Transaction> BeginTransactionAsync(global::Google.Cloud.Spanner.V1.BeginTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BeginTransaction, null, options, request);
      }
      /// <summary>
      /// Commits a transaction. The request includes the mutations to be
      /// applied to rows in the database.
      ///
      /// `Commit` might return an `ABORTED` error. This can occur at any time;
      /// commonly, the cause is conflicts with concurrent
      /// transactions. However, it can also happen for a variety of other
      /// reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
      /// the transaction from the beginning, re-using the same session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.CommitResponse Commit(global::Google.Cloud.Spanner.V1.CommitRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Commit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commits a transaction. The request includes the mutations to be
      /// applied to rows in the database.
      ///
      /// `Commit` might return an `ABORTED` error. This can occur at any time;
      /// commonly, the cause is conflicts with concurrent
      /// transactions. However, it can also happen for a variety of other
      /// reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
      /// the transaction from the beginning, re-using the same session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Spanner.V1.CommitResponse Commit(global::Google.Cloud.Spanner.V1.CommitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Commit, null, options, request);
      }
      /// <summary>
      /// Commits a transaction. The request includes the mutations to be
      /// applied to rows in the database.
      ///
      /// `Commit` might return an `ABORTED` error. This can occur at any time;
      /// commonly, the cause is conflicts with concurrent
      /// transactions. However, it can also happen for a variety of other
      /// reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
      /// the transaction from the beginning, re-using the same session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.CommitResponse> CommitAsync(global::Google.Cloud.Spanner.V1.CommitRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CommitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commits a transaction. The request includes the mutations to be
      /// applied to rows in the database.
      ///
      /// `Commit` might return an `ABORTED` error. This can occur at any time;
      /// commonly, the cause is conflicts with concurrent
      /// transactions. However, it can also happen for a variety of other
      /// reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
      /// the transaction from the beginning, re-using the same session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.CommitResponse> CommitAsync(global::Google.Cloud.Spanner.V1.CommitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Commit, null, options, request);
      }
      /// <summary>
      /// Rolls back a transaction, releasing any locks it holds. It is a good
      /// idea to call this for any transaction that includes one or more
      /// [Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and
      /// ultimately decides not to commit.
      ///
      /// `Rollback` returns `OK` if it successfully aborts the transaction, the
      /// transaction was already aborted, or the transaction is not
      /// found. `Rollback` never returns `ABORTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Rollback(global::Google.Cloud.Spanner.V1.RollbackRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Rollback(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rolls back a transaction, releasing any locks it holds. It is a good
      /// idea to call this for any transaction that includes one or more
      /// [Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and
      /// ultimately decides not to commit.
      ///
      /// `Rollback` returns `OK` if it successfully aborts the transaction, the
      /// transaction was already aborted, or the transaction is not
      /// found. `Rollback` never returns `ABORTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Rollback(global::Google.Cloud.Spanner.V1.RollbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Rollback, null, options, request);
      }
      /// <summary>
      /// Rolls back a transaction, releasing any locks it holds. It is a good
      /// idea to call this for any transaction that includes one or more
      /// [Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and
      /// ultimately decides not to commit.
      ///
      /// `Rollback` returns `OK` if it successfully aborts the transaction, the
      /// transaction was already aborted, or the transaction is not
      /// found. `Rollback` never returns `ABORTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RollbackAsync(global::Google.Cloud.Spanner.V1.RollbackRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RollbackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rolls back a transaction, releasing any locks it holds. It is a good
      /// idea to call this for any transaction that includes one or more
      /// [Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and
      /// ultimately decides not to commit.
      ///
      /// `Rollback` returns `OK` if it successfully aborts the transaction, the
      /// transaction was already aborted, or the transaction is not
      /// found. `Rollback` never returns `ABORTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RollbackAsync(global::Google.Cloud.Spanner.V1.RollbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Rollback, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SpannerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SpannerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SpannerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateSession, serviceImpl.CreateSession)
          .AddMethod(__Method_GetSession, serviceImpl.GetSession)
          .AddMethod(__Method_DeleteSession, serviceImpl.DeleteSession)
          .AddMethod(__Method_ExecuteSql, serviceImpl.ExecuteSql)
          .AddMethod(__Method_ExecuteStreamingSql, serviceImpl.ExecuteStreamingSql)
          .AddMethod(__Method_Read, serviceImpl.Read)
          .AddMethod(__Method_StreamingRead, serviceImpl.StreamingRead)
          .AddMethod(__Method_BeginTransaction, serviceImpl.BeginTransaction)
          .AddMethod(__Method_Commit, serviceImpl.Commit)
          .AddMethod(__Method_Rollback, serviceImpl.Rollback).Build();
    }

  }
}
#endregion
