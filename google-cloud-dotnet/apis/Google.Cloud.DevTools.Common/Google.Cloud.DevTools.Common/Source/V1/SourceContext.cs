// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/source/v1/source_context.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.DevTools.Source.V1 {

  /// <summary>Holder for reflection information generated from google/devtools/source/v1/source_context.proto</summary>
  public static partial class SourceContextReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/source/v1/source_context.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SourceContextReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5nb29nbGUvZGV2dG9vbHMvc291cmNlL3YxL3NvdXJjZV9jb250ZXh0LnBy",
            "b3RvEhlnb29nbGUuZGV2dG9vbHMuc291cmNlLnYxGhxnb29nbGUvYXBpL2Fu",
            "bm90YXRpb25zLnByb3RvIrQCCg1Tb3VyY2VDb250ZXh0EkcKCmNsb3VkX3Jl",
            "cG8YASABKAsyMS5nb29nbGUuZGV2dG9vbHMuc291cmNlLnYxLkNsb3VkUmVw",
            "b1NvdXJjZUNvbnRleHRIABJRCg9jbG91ZF93b3Jrc3BhY2UYAiABKAsyNi5n",
            "b29nbGUuZGV2dG9vbHMuc291cmNlLnYxLkNsb3VkV29ya3NwYWNlU291cmNl",
            "Q29udGV4dEgAEkAKBmdlcnJpdBgDIAEoCzIuLmdvb2dsZS5kZXZ0b29scy5z",
            "b3VyY2UudjEuR2Vycml0U291cmNlQ29udGV4dEgAEjoKA2dpdBgGIAEoCzIr",
            "Lmdvb2dsZS5kZXZ0b29scy5zb3VyY2UudjEuR2l0U291cmNlQ29udGV4dEgA",
            "QgkKB2NvbnRleHQizwEKFUV4dGVuZGVkU291cmNlQ29udGV4dBI5Cgdjb250",
            "ZXh0GAEgASgLMiguZ29vZ2xlLmRldnRvb2xzLnNvdXJjZS52MS5Tb3VyY2VD",
            "b250ZXh0EkwKBmxhYmVscxgCIAMoCzI8Lmdvb2dsZS5kZXZ0b29scy5zb3Vy",
            "Y2UudjEuRXh0ZW5kZWRTb3VyY2VDb250ZXh0LkxhYmVsc0VudHJ5Gi0KC0xh",
            "YmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEijAEK",
            "DEFsaWFzQ29udGV4dBI6CgRraW5kGAEgASgOMiwuZ29vZ2xlLmRldnRvb2xz",
            "LnNvdXJjZS52MS5BbGlhc0NvbnRleHQuS2luZBIMCgRuYW1lGAIgASgJIjIK",
            "BEtpbmQSBwoDQU5ZEAASCQoFRklYRUQQARILCgdNT1ZBQkxFEAISCQoFT1RI",
            "RVIQBCLHAQoWQ2xvdWRSZXBvU291cmNlQ29udGV4dBIyCgdyZXBvX2lkGAEg",
            "ASgLMiEuZ29vZ2xlLmRldnRvb2xzLnNvdXJjZS52MS5SZXBvSWQSFQoLcmV2",
            "aXNpb25faWQYAiABKAlIABIUCgphbGlhc19uYW1lGAMgASgJSAASQAoNYWxp",
            "YXNfY29udGV4dBgEIAEoCzInLmdvb2dsZS5kZXZ0b29scy5zb3VyY2UudjEu",
            "QWxpYXNDb250ZXh0SABCCgoIcmV2aXNpb24idQobQ2xvdWRXb3Jrc3BhY2VT",
            "b3VyY2VDb250ZXh0EkEKDHdvcmtzcGFjZV9pZBgBIAEoCzIrLmdvb2dsZS5k",
            "ZXZ0b29scy5zb3VyY2UudjEuQ2xvdWRXb3Jrc3BhY2VJZBITCgtzbmFwc2hv",
            "dF9pZBgCIAEoCSK6AQoTR2Vycml0U291cmNlQ29udGV4dBIQCghob3N0X3Vy",
            "aRgBIAEoCRIWCg5nZXJyaXRfcHJvamVjdBgCIAEoCRIVCgtyZXZpc2lvbl9p",
            "ZBgDIAEoCUgAEhQKCmFsaWFzX25hbWUYBCABKAlIABJACg1hbGlhc19jb250",
            "ZXh0GAUgASgLMicuZ29vZ2xlLmRldnRvb2xzLnNvdXJjZS52MS5BbGlhc0Nv",
            "bnRleHRIAEIKCghyZXZpc2lvbiI0ChBHaXRTb3VyY2VDb250ZXh0EgsKA3Vy",
            "bBgBIAEoCRITCgtyZXZpc2lvbl9pZBgCIAEoCSJiCgZSZXBvSWQSQwoPcHJv",
            "amVjdF9yZXBvX2lkGAEgASgLMiguZ29vZ2xlLmRldnRvb2xzLnNvdXJjZS52",
            "MS5Qcm9qZWN0UmVwb0lkSAASDQoDdWlkGAIgASgJSABCBAoCaWQiNgoNUHJv",
            "amVjdFJlcG9JZBISCgpwcm9qZWN0X2lkGAEgASgJEhEKCXJlcG9fbmFtZRgC",
            "IAEoCSJUChBDbG91ZFdvcmtzcGFjZUlkEjIKB3JlcG9faWQYASABKAsyIS5n",
            "b29nbGUuZGV2dG9vbHMuc291cmNlLnYxLlJlcG9JZBIMCgRuYW1lGAIgASgJ",
            "QpgBCh1jb20uZ29vZ2xlLmRldnRvb2xzLnNvdXJjZS52MUISU291cmNlQ29u",
            "dGV4dFByb3RvUAFaP2dvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2ds",
            "ZWFwaXMvZGV2dG9vbHMvc291cmNlL3YxO3NvdXJjZaoCH0dvb2dsZS5DbG91",
            "ZC5EZXZUb29scy5Tb3VyY2UuVjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DevTools.Source.V1.SourceContext), global::Google.Cloud.DevTools.Source.V1.SourceContext.Parser, new[]{ "CloudRepo", "CloudWorkspace", "Gerrit", "Git" }, new[]{ "Context" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext), global::Google.Cloud.DevTools.Source.V1.ExtendedSourceContext.Parser, new[]{ "Context", "Labels" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DevTools.Source.V1.AliasContext), global::Google.Cloud.DevTools.Source.V1.AliasContext.Parser, new[]{ "Kind", "Name" }, null, new[]{ typeof(global::Google.Cloud.DevTools.Source.V1.AliasContext.Types.Kind) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DevTools.Source.V1.CloudRepoSourceContext), global::Google.Cloud.DevTools.Source.V1.CloudRepoSourceContext.Parser, new[]{ "RepoId", "RevisionId", "AliasName", "AliasContext" }, new[]{ "Revision" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceSourceContext), global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceSourceContext.Parser, new[]{ "WorkspaceId", "SnapshotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DevTools.Source.V1.GerritSourceContext), global::Google.Cloud.DevTools.Source.V1.GerritSourceContext.Parser, new[]{ "HostUri", "GerritProject", "RevisionId", "AliasName", "AliasContext" }, new[]{ "Revision" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DevTools.Source.V1.GitSourceContext), global::Google.Cloud.DevTools.Source.V1.GitSourceContext.Parser, new[]{ "Url", "RevisionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DevTools.Source.V1.RepoId), global::Google.Cloud.DevTools.Source.V1.RepoId.Parser, new[]{ "ProjectRepoId", "Uid" }, new[]{ "Id" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DevTools.Source.V1.ProjectRepoId), global::Google.Cloud.DevTools.Source.V1.ProjectRepoId.Parser, new[]{ "ProjectId", "RepoName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceId), global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceId.Parser, new[]{ "RepoId", "Name" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A SourceContext is a reference to a tree of files. A SourceContext together
  /// with a path point to a unique revision of a single file or directory.
  /// </summary>
  public sealed partial class SourceContext : pb::IMessage<SourceContext> {
    private static readonly pb::MessageParser<SourceContext> _parser = new pb::MessageParser<SourceContext>(() => new SourceContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceContext(SourceContext other) : this() {
      switch (other.ContextCase) {
        case ContextOneofCase.CloudRepo:
          CloudRepo = other.CloudRepo.Clone();
          break;
        case ContextOneofCase.CloudWorkspace:
          CloudWorkspace = other.CloudWorkspace.Clone();
          break;
        case ContextOneofCase.Gerrit:
          Gerrit = other.Gerrit.Clone();
          break;
        case ContextOneofCase.Git:
          Git = other.Git.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceContext Clone() {
      return new SourceContext(this);
    }

    /// <summary>Field number for the "cloud_repo" field.</summary>
    public const int CloudRepoFieldNumber = 1;
    /// <summary>
    /// A SourceContext referring to a revision in a cloud repo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.CloudRepoSourceContext CloudRepo {
      get { return contextCase_ == ContextOneofCase.CloudRepo ? (global::Google.Cloud.DevTools.Source.V1.CloudRepoSourceContext) context_ : null; }
      set {
        context_ = value;
        contextCase_ = value == null ? ContextOneofCase.None : ContextOneofCase.CloudRepo;
      }
    }

    /// <summary>Field number for the "cloud_workspace" field.</summary>
    public const int CloudWorkspaceFieldNumber = 2;
    /// <summary>
    /// A SourceContext referring to a snapshot in a cloud workspace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceSourceContext CloudWorkspace {
      get { return contextCase_ == ContextOneofCase.CloudWorkspace ? (global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceSourceContext) context_ : null; }
      set {
        context_ = value;
        contextCase_ = value == null ? ContextOneofCase.None : ContextOneofCase.CloudWorkspace;
      }
    }

    /// <summary>Field number for the "gerrit" field.</summary>
    public const int GerritFieldNumber = 3;
    /// <summary>
    /// A SourceContext referring to a Gerrit project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.GerritSourceContext Gerrit {
      get { return contextCase_ == ContextOneofCase.Gerrit ? (global::Google.Cloud.DevTools.Source.V1.GerritSourceContext) context_ : null; }
      set {
        context_ = value;
        contextCase_ = value == null ? ContextOneofCase.None : ContextOneofCase.Gerrit;
      }
    }

    /// <summary>Field number for the "git" field.</summary>
    public const int GitFieldNumber = 6;
    /// <summary>
    /// A SourceContext referring to any third party Git repo (e.g. GitHub).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.GitSourceContext Git {
      get { return contextCase_ == ContextOneofCase.Git ? (global::Google.Cloud.DevTools.Source.V1.GitSourceContext) context_ : null; }
      set {
        context_ = value;
        contextCase_ = value == null ? ContextOneofCase.None : ContextOneofCase.Git;
      }
    }

    private object context_;
    /// <summary>Enum of possible cases for the "context" oneof.</summary>
    public enum ContextOneofCase {
      None = 0,
      CloudRepo = 1,
      CloudWorkspace = 2,
      Gerrit = 3,
      Git = 6,
    }
    private ContextOneofCase contextCase_ = ContextOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextOneofCase ContextCase {
      get { return contextCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContext() {
      contextCase_ = ContextOneofCase.None;
      context_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CloudRepo, other.CloudRepo)) return false;
      if (!object.Equals(CloudWorkspace, other.CloudWorkspace)) return false;
      if (!object.Equals(Gerrit, other.Gerrit)) return false;
      if (!object.Equals(Git, other.Git)) return false;
      if (ContextCase != other.ContextCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contextCase_ == ContextOneofCase.CloudRepo) hash ^= CloudRepo.GetHashCode();
      if (contextCase_ == ContextOneofCase.CloudWorkspace) hash ^= CloudWorkspace.GetHashCode();
      if (contextCase_ == ContextOneofCase.Gerrit) hash ^= Gerrit.GetHashCode();
      if (contextCase_ == ContextOneofCase.Git) hash ^= Git.GetHashCode();
      hash ^= (int) contextCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contextCase_ == ContextOneofCase.CloudRepo) {
        output.WriteRawTag(10);
        output.WriteMessage(CloudRepo);
      }
      if (contextCase_ == ContextOneofCase.CloudWorkspace) {
        output.WriteRawTag(18);
        output.WriteMessage(CloudWorkspace);
      }
      if (contextCase_ == ContextOneofCase.Gerrit) {
        output.WriteRawTag(26);
        output.WriteMessage(Gerrit);
      }
      if (contextCase_ == ContextOneofCase.Git) {
        output.WriteRawTag(50);
        output.WriteMessage(Git);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contextCase_ == ContextOneofCase.CloudRepo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloudRepo);
      }
      if (contextCase_ == ContextOneofCase.CloudWorkspace) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloudWorkspace);
      }
      if (contextCase_ == ContextOneofCase.Gerrit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gerrit);
      }
      if (contextCase_ == ContextOneofCase.Git) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Git);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourceContext other) {
      if (other == null) {
        return;
      }
      switch (other.ContextCase) {
        case ContextOneofCase.CloudRepo:
          CloudRepo = other.CloudRepo;
          break;
        case ContextOneofCase.CloudWorkspace:
          CloudWorkspace = other.CloudWorkspace;
          break;
        case ContextOneofCase.Gerrit:
          Gerrit = other.Gerrit;
          break;
        case ContextOneofCase.Git:
          Git = other.Git;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.DevTools.Source.V1.CloudRepoSourceContext subBuilder = new global::Google.Cloud.DevTools.Source.V1.CloudRepoSourceContext();
            if (contextCase_ == ContextOneofCase.CloudRepo) {
              subBuilder.MergeFrom(CloudRepo);
            }
            input.ReadMessage(subBuilder);
            CloudRepo = subBuilder;
            break;
          }
          case 18: {
            global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceSourceContext subBuilder = new global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceSourceContext();
            if (contextCase_ == ContextOneofCase.CloudWorkspace) {
              subBuilder.MergeFrom(CloudWorkspace);
            }
            input.ReadMessage(subBuilder);
            CloudWorkspace = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.DevTools.Source.V1.GerritSourceContext subBuilder = new global::Google.Cloud.DevTools.Source.V1.GerritSourceContext();
            if (contextCase_ == ContextOneofCase.Gerrit) {
              subBuilder.MergeFrom(Gerrit);
            }
            input.ReadMessage(subBuilder);
            Gerrit = subBuilder;
            break;
          }
          case 50: {
            global::Google.Cloud.DevTools.Source.V1.GitSourceContext subBuilder = new global::Google.Cloud.DevTools.Source.V1.GitSourceContext();
            if (contextCase_ == ContextOneofCase.Git) {
              subBuilder.MergeFrom(Git);
            }
            input.ReadMessage(subBuilder);
            Git = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An ExtendedSourceContext is a SourceContext combined with additional
  /// details describing the context.
  /// </summary>
  public sealed partial class ExtendedSourceContext : pb::IMessage<ExtendedSourceContext> {
    private static readonly pb::MessageParser<ExtendedSourceContext> _parser = new pb::MessageParser<ExtendedSourceContext>(() => new ExtendedSourceContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtendedSourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendedSourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendedSourceContext(ExtendedSourceContext other) : this() {
      Context = other.context_ != null ? other.Context.Clone() : null;
      labels_ = other.labels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendedSourceContext Clone() {
      return new ExtendedSourceContext(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private global::Google.Cloud.DevTools.Source.V1.SourceContext context_;
    /// <summary>
    /// Any source context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.SourceContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels with user defined metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtendedSourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtendedSourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Context, other.Context)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (context_ != null) hash ^= Context.GetHashCode();
      hash ^= Labels.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (context_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Context);
      }
      labels_.WriteTo(output, _map_labels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtendedSourceContext other) {
      if (other == null) {
        return;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::Google.Cloud.DevTools.Source.V1.SourceContext();
        }
        Context.MergeFrom(other.Context);
      }
      labels_.Add(other.labels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (context_ == null) {
              context_ = new global::Google.Cloud.DevTools.Source.V1.SourceContext();
            }
            input.ReadMessage(context_);
            break;
          }
          case 18: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An alias to a repo revision.
  /// </summary>
  public sealed partial class AliasContext : pb::IMessage<AliasContext> {
    private static readonly pb::MessageParser<AliasContext> _parser = new pb::MessageParser<AliasContext>(() => new AliasContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AliasContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliasContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliasContext(AliasContext other) : this() {
      kind_ = other.kind_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliasContext Clone() {
      return new AliasContext(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private global::Google.Cloud.DevTools.Source.V1.AliasContext.Types.Kind kind_ = 0;
    /// <summary>
    /// The alias kind.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.AliasContext.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The alias name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AliasContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AliasContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AliasContext other) {
      if (other == null) {
        return;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            kind_ = (global::Google.Cloud.DevTools.Source.V1.AliasContext.Types.Kind) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AliasContext message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The type of an Alias.
      /// </summary>
      public enum Kind {
        /// <summary>
        /// Do not use.
        /// </summary>
        [pbr::OriginalName("ANY")] Any = 0,
        /// <summary>
        /// Git tag
        /// </summary>
        [pbr::OriginalName("FIXED")] Fixed = 1,
        /// <summary>
        /// Git branch
        /// </summary>
        [pbr::OriginalName("MOVABLE")] Movable = 2,
        /// <summary>
        /// OTHER is used to specify non-standard aliases, those not of the kinds
        /// above. For example, if a Git repo has a ref named "refs/foo/bar", it
        /// is considered to be of kind OTHER.
        /// </summary>
        [pbr::OriginalName("OTHER")] Other = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// A CloudRepoSourceContext denotes a particular revision in a cloud
  /// repo (a repo hosted by the Google Cloud Platform).
  /// </summary>
  public sealed partial class CloudRepoSourceContext : pb::IMessage<CloudRepoSourceContext> {
    private static readonly pb::MessageParser<CloudRepoSourceContext> _parser = new pb::MessageParser<CloudRepoSourceContext>(() => new CloudRepoSourceContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudRepoSourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudRepoSourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudRepoSourceContext(CloudRepoSourceContext other) : this() {
      RepoId = other.repoId_ != null ? other.RepoId.Clone() : null;
      switch (other.RevisionCase) {
        case RevisionOneofCase.RevisionId:
          RevisionId = other.RevisionId;
          break;
        case RevisionOneofCase.AliasName:
          AliasName = other.AliasName;
          break;
        case RevisionOneofCase.AliasContext:
          AliasContext = other.AliasContext.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudRepoSourceContext Clone() {
      return new CloudRepoSourceContext(this);
    }

    /// <summary>Field number for the "repo_id" field.</summary>
    public const int RepoIdFieldNumber = 1;
    private global::Google.Cloud.DevTools.Source.V1.RepoId repoId_;
    /// <summary>
    /// The ID of the repo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.RepoId RepoId {
      get { return repoId_; }
      set {
        repoId_ = value;
      }
    }

    /// <summary>Field number for the "revision_id" field.</summary>
    public const int RevisionIdFieldNumber = 2;
    /// <summary>
    /// A revision ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RevisionId {
      get { return revisionCase_ == RevisionOneofCase.RevisionId ? (string) revision_ : ""; }
      set {
        revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        revisionCase_ = RevisionOneofCase.RevisionId;
      }
    }

    /// <summary>Field number for the "alias_name" field.</summary>
    public const int AliasNameFieldNumber = 3;
    /// <summary>
    /// The name of an alias (branch, tag, etc.).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AliasName {
      get { return revisionCase_ == RevisionOneofCase.AliasName ? (string) revision_ : ""; }
      set {
        revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        revisionCase_ = RevisionOneofCase.AliasName;
      }
    }

    /// <summary>Field number for the "alias_context" field.</summary>
    public const int AliasContextFieldNumber = 4;
    /// <summary>
    /// An alias, which may be a branch or tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.AliasContext AliasContext {
      get { return revisionCase_ == RevisionOneofCase.AliasContext ? (global::Google.Cloud.DevTools.Source.V1.AliasContext) revision_ : null; }
      set {
        revision_ = value;
        revisionCase_ = value == null ? RevisionOneofCase.None : RevisionOneofCase.AliasContext;
      }
    }

    private object revision_;
    /// <summary>Enum of possible cases for the "revision" oneof.</summary>
    public enum RevisionOneofCase {
      None = 0,
      RevisionId = 2,
      AliasName = 3,
      AliasContext = 4,
    }
    private RevisionOneofCase revisionCase_ = RevisionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevisionOneofCase RevisionCase {
      get { return revisionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRevision() {
      revisionCase_ = RevisionOneofCase.None;
      revision_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudRepoSourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudRepoSourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RepoId, other.RepoId)) return false;
      if (RevisionId != other.RevisionId) return false;
      if (AliasName != other.AliasName) return false;
      if (!object.Equals(AliasContext, other.AliasContext)) return false;
      if (RevisionCase != other.RevisionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (repoId_ != null) hash ^= RepoId.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.RevisionId) hash ^= RevisionId.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.AliasName) hash ^= AliasName.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.AliasContext) hash ^= AliasContext.GetHashCode();
      hash ^= (int) revisionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (repoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RepoId);
      }
      if (revisionCase_ == RevisionOneofCase.RevisionId) {
        output.WriteRawTag(18);
        output.WriteString(RevisionId);
      }
      if (revisionCase_ == RevisionOneofCase.AliasName) {
        output.WriteRawTag(26);
        output.WriteString(AliasName);
      }
      if (revisionCase_ == RevisionOneofCase.AliasContext) {
        output.WriteRawTag(34);
        output.WriteMessage(AliasContext);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (repoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RepoId);
      }
      if (revisionCase_ == RevisionOneofCase.RevisionId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RevisionId);
      }
      if (revisionCase_ == RevisionOneofCase.AliasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AliasName);
      }
      if (revisionCase_ == RevisionOneofCase.AliasContext) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AliasContext);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudRepoSourceContext other) {
      if (other == null) {
        return;
      }
      if (other.repoId_ != null) {
        if (repoId_ == null) {
          repoId_ = new global::Google.Cloud.DevTools.Source.V1.RepoId();
        }
        RepoId.MergeFrom(other.RepoId);
      }
      switch (other.RevisionCase) {
        case RevisionOneofCase.RevisionId:
          RevisionId = other.RevisionId;
          break;
        case RevisionOneofCase.AliasName:
          AliasName = other.AliasName;
          break;
        case RevisionOneofCase.AliasContext:
          AliasContext = other.AliasContext;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (repoId_ == null) {
              repoId_ = new global::Google.Cloud.DevTools.Source.V1.RepoId();
            }
            input.ReadMessage(repoId_);
            break;
          }
          case 18: {
            RevisionId = input.ReadString();
            break;
          }
          case 26: {
            AliasName = input.ReadString();
            break;
          }
          case 34: {
            global::Google.Cloud.DevTools.Source.V1.AliasContext subBuilder = new global::Google.Cloud.DevTools.Source.V1.AliasContext();
            if (revisionCase_ == RevisionOneofCase.AliasContext) {
              subBuilder.MergeFrom(AliasContext);
            }
            input.ReadMessage(subBuilder);
            AliasContext = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
  /// </summary>
  public sealed partial class CloudWorkspaceSourceContext : pb::IMessage<CloudWorkspaceSourceContext> {
    private static readonly pb::MessageParser<CloudWorkspaceSourceContext> _parser = new pb::MessageParser<CloudWorkspaceSourceContext>(() => new CloudWorkspaceSourceContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudWorkspaceSourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudWorkspaceSourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudWorkspaceSourceContext(CloudWorkspaceSourceContext other) : this() {
      WorkspaceId = other.workspaceId_ != null ? other.WorkspaceId.Clone() : null;
      snapshotId_ = other.snapshotId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudWorkspaceSourceContext Clone() {
      return new CloudWorkspaceSourceContext(this);
    }

    /// <summary>Field number for the "workspace_id" field.</summary>
    public const int WorkspaceIdFieldNumber = 1;
    private global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceId workspaceId_;
    /// <summary>
    /// The ID of the workspace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceId WorkspaceId {
      get { return workspaceId_; }
      set {
        workspaceId_ = value;
      }
    }

    /// <summary>Field number for the "snapshot_id" field.</summary>
    public const int SnapshotIdFieldNumber = 2;
    private string snapshotId_ = "";
    /// <summary>
    /// The ID of the snapshot.
    /// An empty snapshot_id refers to the most recent snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SnapshotId {
      get { return snapshotId_; }
      set {
        snapshotId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudWorkspaceSourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudWorkspaceSourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WorkspaceId, other.WorkspaceId)) return false;
      if (SnapshotId != other.SnapshotId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (workspaceId_ != null) hash ^= WorkspaceId.GetHashCode();
      if (SnapshotId.Length != 0) hash ^= SnapshotId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (workspaceId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(WorkspaceId);
      }
      if (SnapshotId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SnapshotId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (workspaceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorkspaceId);
      }
      if (SnapshotId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SnapshotId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudWorkspaceSourceContext other) {
      if (other == null) {
        return;
      }
      if (other.workspaceId_ != null) {
        if (workspaceId_ == null) {
          workspaceId_ = new global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceId();
        }
        WorkspaceId.MergeFrom(other.WorkspaceId);
      }
      if (other.SnapshotId.Length != 0) {
        SnapshotId = other.SnapshotId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (workspaceId_ == null) {
              workspaceId_ = new global::Google.Cloud.DevTools.Source.V1.CloudWorkspaceId();
            }
            input.ReadMessage(workspaceId_);
            break;
          }
          case 18: {
            SnapshotId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A SourceContext referring to a Gerrit project.
  /// </summary>
  public sealed partial class GerritSourceContext : pb::IMessage<GerritSourceContext> {
    private static readonly pb::MessageParser<GerritSourceContext> _parser = new pb::MessageParser<GerritSourceContext>(() => new GerritSourceContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GerritSourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GerritSourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GerritSourceContext(GerritSourceContext other) : this() {
      hostUri_ = other.hostUri_;
      gerritProject_ = other.gerritProject_;
      switch (other.RevisionCase) {
        case RevisionOneofCase.RevisionId:
          RevisionId = other.RevisionId;
          break;
        case RevisionOneofCase.AliasName:
          AliasName = other.AliasName;
          break;
        case RevisionOneofCase.AliasContext:
          AliasContext = other.AliasContext.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GerritSourceContext Clone() {
      return new GerritSourceContext(this);
    }

    /// <summary>Field number for the "host_uri" field.</summary>
    public const int HostUriFieldNumber = 1;
    private string hostUri_ = "";
    /// <summary>
    /// The URI of a running Gerrit instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostUri {
      get { return hostUri_; }
      set {
        hostUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gerrit_project" field.</summary>
    public const int GerritProjectFieldNumber = 2;
    private string gerritProject_ = "";
    /// <summary>
    /// The full project name within the host. Projects may be nested, so
    /// "project/subproject" is a valid project name.
    /// The "repo name" is hostURI/project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GerritProject {
      get { return gerritProject_; }
      set {
        gerritProject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision_id" field.</summary>
    public const int RevisionIdFieldNumber = 3;
    /// <summary>
    /// A revision (commit) ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RevisionId {
      get { return revisionCase_ == RevisionOneofCase.RevisionId ? (string) revision_ : ""; }
      set {
        revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        revisionCase_ = RevisionOneofCase.RevisionId;
      }
    }

    /// <summary>Field number for the "alias_name" field.</summary>
    public const int AliasNameFieldNumber = 4;
    /// <summary>
    /// The name of an alias (branch, tag, etc.).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AliasName {
      get { return revisionCase_ == RevisionOneofCase.AliasName ? (string) revision_ : ""; }
      set {
        revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        revisionCase_ = RevisionOneofCase.AliasName;
      }
    }

    /// <summary>Field number for the "alias_context" field.</summary>
    public const int AliasContextFieldNumber = 5;
    /// <summary>
    /// An alias, which may be a branch or tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.AliasContext AliasContext {
      get { return revisionCase_ == RevisionOneofCase.AliasContext ? (global::Google.Cloud.DevTools.Source.V1.AliasContext) revision_ : null; }
      set {
        revision_ = value;
        revisionCase_ = value == null ? RevisionOneofCase.None : RevisionOneofCase.AliasContext;
      }
    }

    private object revision_;
    /// <summary>Enum of possible cases for the "revision" oneof.</summary>
    public enum RevisionOneofCase {
      None = 0,
      RevisionId = 3,
      AliasName = 4,
      AliasContext = 5,
    }
    private RevisionOneofCase revisionCase_ = RevisionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevisionOneofCase RevisionCase {
      get { return revisionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRevision() {
      revisionCase_ = RevisionOneofCase.None;
      revision_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GerritSourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GerritSourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostUri != other.HostUri) return false;
      if (GerritProject != other.GerritProject) return false;
      if (RevisionId != other.RevisionId) return false;
      if (AliasName != other.AliasName) return false;
      if (!object.Equals(AliasContext, other.AliasContext)) return false;
      if (RevisionCase != other.RevisionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HostUri.Length != 0) hash ^= HostUri.GetHashCode();
      if (GerritProject.Length != 0) hash ^= GerritProject.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.RevisionId) hash ^= RevisionId.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.AliasName) hash ^= AliasName.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.AliasContext) hash ^= AliasContext.GetHashCode();
      hash ^= (int) revisionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HostUri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HostUri);
      }
      if (GerritProject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GerritProject);
      }
      if (revisionCase_ == RevisionOneofCase.RevisionId) {
        output.WriteRawTag(26);
        output.WriteString(RevisionId);
      }
      if (revisionCase_ == RevisionOneofCase.AliasName) {
        output.WriteRawTag(34);
        output.WriteString(AliasName);
      }
      if (revisionCase_ == RevisionOneofCase.AliasContext) {
        output.WriteRawTag(42);
        output.WriteMessage(AliasContext);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HostUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostUri);
      }
      if (GerritProject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GerritProject);
      }
      if (revisionCase_ == RevisionOneofCase.RevisionId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RevisionId);
      }
      if (revisionCase_ == RevisionOneofCase.AliasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AliasName);
      }
      if (revisionCase_ == RevisionOneofCase.AliasContext) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AliasContext);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GerritSourceContext other) {
      if (other == null) {
        return;
      }
      if (other.HostUri.Length != 0) {
        HostUri = other.HostUri;
      }
      if (other.GerritProject.Length != 0) {
        GerritProject = other.GerritProject;
      }
      switch (other.RevisionCase) {
        case RevisionOneofCase.RevisionId:
          RevisionId = other.RevisionId;
          break;
        case RevisionOneofCase.AliasName:
          AliasName = other.AliasName;
          break;
        case RevisionOneofCase.AliasContext:
          AliasContext = other.AliasContext;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HostUri = input.ReadString();
            break;
          }
          case 18: {
            GerritProject = input.ReadString();
            break;
          }
          case 26: {
            RevisionId = input.ReadString();
            break;
          }
          case 34: {
            AliasName = input.ReadString();
            break;
          }
          case 42: {
            global::Google.Cloud.DevTools.Source.V1.AliasContext subBuilder = new global::Google.Cloud.DevTools.Source.V1.AliasContext();
            if (revisionCase_ == RevisionOneofCase.AliasContext) {
              subBuilder.MergeFrom(AliasContext);
            }
            input.ReadMessage(subBuilder);
            AliasContext = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A GitSourceContext denotes a particular revision in a third party Git
  /// repository (e.g. GitHub).
  /// </summary>
  public sealed partial class GitSourceContext : pb::IMessage<GitSourceContext> {
    private static readonly pb::MessageParser<GitSourceContext> _parser = new pb::MessageParser<GitSourceContext>(() => new GitSourceContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GitSourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GitSourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GitSourceContext(GitSourceContext other) : this() {
      url_ = other.url_;
      revisionId_ = other.revisionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GitSourceContext Clone() {
      return new GitSourceContext(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    /// <summary>
    /// Git repository URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision_id" field.</summary>
    public const int RevisionIdFieldNumber = 2;
    private string revisionId_ = "";
    /// <summary>
    /// Git commit hash.
    /// required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RevisionId {
      get { return revisionId_; }
      set {
        revisionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GitSourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GitSourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (RevisionId != other.RevisionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (RevisionId.Length != 0) hash ^= RevisionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (RevisionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RevisionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (RevisionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RevisionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GitSourceContext other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.RevisionId.Length != 0) {
        RevisionId = other.RevisionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 18: {
            RevisionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A unique identifier for a cloud repo.
  /// </summary>
  public sealed partial class RepoId : pb::IMessage<RepoId> {
    private static readonly pb::MessageParser<RepoId> _parser = new pb::MessageParser<RepoId>(() => new RepoId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepoId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepoId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepoId(RepoId other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.ProjectRepoId:
          ProjectRepoId = other.ProjectRepoId.Clone();
          break;
        case IdOneofCase.Uid:
          Uid = other.Uid;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepoId Clone() {
      return new RepoId(this);
    }

    /// <summary>Field number for the "project_repo_id" field.</summary>
    public const int ProjectRepoIdFieldNumber = 1;
    /// <summary>
    /// A combination of a project ID and a repo name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.ProjectRepoId ProjectRepoId {
      get { return idCase_ == IdOneofCase.ProjectRepoId ? (global::Google.Cloud.DevTools.Source.V1.ProjectRepoId) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.ProjectRepoId;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    /// <summary>
    /// A server-assigned, globally unique identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return idCase_ == IdOneofCase.Uid ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Uid;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      ProjectRepoId = 1,
      Uid = 2,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepoId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepoId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProjectRepoId, other.ProjectRepoId)) return false;
      if (Uid != other.Uid) return false;
      if (IdCase != other.IdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.ProjectRepoId) hash ^= ProjectRepoId.GetHashCode();
      if (idCase_ == IdOneofCase.Uid) hash ^= Uid.GetHashCode();
      hash ^= (int) idCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idCase_ == IdOneofCase.ProjectRepoId) {
        output.WriteRawTag(10);
        output.WriteMessage(ProjectRepoId);
      }
      if (idCase_ == IdOneofCase.Uid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.ProjectRepoId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProjectRepoId);
      }
      if (idCase_ == IdOneofCase.Uid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepoId other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.ProjectRepoId:
          ProjectRepoId = other.ProjectRepoId;
          break;
        case IdOneofCase.Uid:
          Uid = other.Uid;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.DevTools.Source.V1.ProjectRepoId subBuilder = new global::Google.Cloud.DevTools.Source.V1.ProjectRepoId();
            if (idCase_ == IdOneofCase.ProjectRepoId) {
              subBuilder.MergeFrom(ProjectRepoId);
            }
            input.ReadMessage(subBuilder);
            ProjectRepoId = subBuilder;
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Selects a repo using a Google Cloud Platform project ID
  /// (e.g. winged-cargo-31) and a repo name within that project.
  /// </summary>
  public sealed partial class ProjectRepoId : pb::IMessage<ProjectRepoId> {
    private static readonly pb::MessageParser<ProjectRepoId> _parser = new pb::MessageParser<ProjectRepoId>(() => new ProjectRepoId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectRepoId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectRepoId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectRepoId(ProjectRepoId other) : this() {
      projectId_ = other.projectId_;
      repoName_ = other.repoName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectRepoId Clone() {
      return new ProjectRepoId(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    /// The ID of the project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repo_name" field.</summary>
    public const int RepoNameFieldNumber = 2;
    private string repoName_ = "";
    /// <summary>
    /// The name of the repo. Leave empty for the default repo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RepoName {
      get { return repoName_; }
      set {
        repoName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectRepoId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectRepoId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (RepoName != other.RepoName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (RepoName.Length != 0) hash ^= RepoName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (RepoName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RepoName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (RepoName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepoName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectRepoId other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.RepoName.Length != 0) {
        RepoName = other.RepoName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            RepoName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A CloudWorkspaceId is a unique identifier for a cloud workspace.
  /// A cloud workspace is a place associated with a repo where modified files
  /// can be stored before they are committed.
  /// </summary>
  public sealed partial class CloudWorkspaceId : pb::IMessage<CloudWorkspaceId> {
    private static readonly pb::MessageParser<CloudWorkspaceId> _parser = new pb::MessageParser<CloudWorkspaceId>(() => new CloudWorkspaceId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudWorkspaceId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DevTools.Source.V1.SourceContextReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudWorkspaceId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudWorkspaceId(CloudWorkspaceId other) : this() {
      RepoId = other.repoId_ != null ? other.RepoId.Clone() : null;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudWorkspaceId Clone() {
      return new CloudWorkspaceId(this);
    }

    /// <summary>Field number for the "repo_id" field.</summary>
    public const int RepoIdFieldNumber = 1;
    private global::Google.Cloud.DevTools.Source.V1.RepoId repoId_;
    /// <summary>
    /// The ID of the repo containing the workspace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.DevTools.Source.V1.RepoId RepoId {
      get { return repoId_; }
      set {
        repoId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The unique name of the workspace within the repo.  This is the name
    /// chosen by the client in the Source API's CreateWorkspace method.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudWorkspaceId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudWorkspaceId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RepoId, other.RepoId)) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (repoId_ != null) hash ^= RepoId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (repoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RepoId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (repoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RepoId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudWorkspaceId other) {
      if (other == null) {
        return;
      }
      if (other.repoId_ != null) {
        if (repoId_ == null) {
          repoId_ = new global::Google.Cloud.DevTools.Source.V1.RepoId();
        }
        RepoId.MergeFrom(other.RepoId);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (repoId_ == null) {
              repoId_ = new global::Google.Cloud.DevTools.Source.V1.RepoId();
            }
            input.ReadMessage(repoId_);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
